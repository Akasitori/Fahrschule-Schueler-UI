%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 1/25/2022
%%BoundingBox: 0 0 466 336
%%HiResBoundingBox: 0 0 465.9091 335.3801
%%CropBox: 0 0 465.9091 335.3801
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 16403 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0BFFA9FFCBFFA9FD1BFFCBFFCBFFA9FFCBFD1DFFA9FFCBFFA9FD
%1DFFCBFFA9FFCBFD10FFCBFFA8FFA8CBA8FFA8CBA8FFA8FD15FFA8FFA8CB
%A8FFA8CBA8FFA8CBA8FD17FFA8FFA8CBA8FFA8CBA8FFA8FD15FFCBFFA8CB
%A8FFA8CBA8FFA8CBA8FD0CFFA9FFA9FFA8FFCBFFA8FFCBFFA8FFA9FD15FF
%A9FFFFFFA8FFCBFFA8FFA9FFA8FD13FFA9FFA9FFA8FFA9FFA9FFFFFFA8FF
%A9FD15FFA8FFA9FFA9FFFFFFA8FFA9FFA8FD0AFFA8CBA8FFA8FFA8CBA8FF
%A8CBA8CBA8FFA8FD11FFA8FFA9A8277DA9FFA9FFA9FFA8FFA8CBA8FD11FF
%A8CBA8FFA8CBA8FFA9CB777DA8FFA8FFA8FFA9FD0FFFA8FFA8CBA8FFA9FF
%7EA8A8FFA8FFA8CBA8FD08FFCBFFA9FFCBFF7D522752272828FFA9FFCBFF
%A8FD0FFFA9FFCBFF27F8F87DA87D2E527DFFCBFFA9FFA9FD11FFA9FFCBFF
%FFFFA8A727F8F87DFFFFCBFFA9FD0FFFCBFFCBFFA9FFFFA8FD0527CBFFFF
%A9FFA9FD06FFA8FFA8CBA8FF7DF8F827F8F8F852FFFFA8FFA8CBA8FD0DFF
%A9CBA8FFA827F8F8F827FD04F852FFA8CBA8FFA8FD0DFFA8FFA8CBA8FFCB
%7D4B75FD04F87DFFA8FFA8CBA8FD0DFFCBCBA8FFA8CBA97DF8F8F80000F8
%F8A9CBCBA8FFA8FD06FFA8FFA9FFCB52F827F875759AA1FFA9FFA8FFA9FF
%A8FD0DFFA9FFA8FF52F8F8F80000F84B2000A8FFA9FFA8FFA9FD0DFFA8FF
%A9FFCB7DF851F8F8F84B20A9CBFFA8FFA9FFA8FD0DFFA9FFA8FFCBFF27F8
%26F8F82700F827FFFFFFA8FFA9FD04FFA8CBA8FFA8FF27F8F8F875C299A1
%A9FFA8CBA8FFA8CBA8FD0BFFA8FFA8CBA8FF52F8F827F8F84BC24BA9A8FF
%A8CBA8FFA8FD0BFFA8CBA8FFA8FFF82626F8F84B9976A8FFA8CBA8FFA8CB
%A8FD0BFFA8FFA8CBA8FFCB524AC220F8F827F8F8F8A8A9CBA8FFA8FFFFA9
%FFA9FFCBFFFF7D272720A0999A76FFCBFFA9FFCBFFA9FD0BFFA9FFCBFFA9
%FFFF7DF82727F84B9A99757DFFCBFFA9FFCBFD0BFFCBFFA9FFCBFFFF524B
%51F827759A75FFCBFFA9FFCBFFA9FD0BFFA9FFCBFFA9FFFFA8219A75754B
%272727F8F827FFA9FFCBFFFFA8FFA8CBA8FFA8FFA152289A99C26F757DFF
%A8CBA8FFA8CBA8FD09FFA9CBA8FFA8FFA952F8F8272E75C29A9A4B76A8FF
%A8CBA8FFA8FD09FFA8FFA8CBA8FFA8FF7DC2C29999C27575A1FFA8CBA8FF
%A8CBA8FD0AFFCBA8FFA8CBA8FF534B6F9A99C24B2E27F8F8F8A2FFA8FFA8
%FFFFA8FFA9FFA8FFFFCA2752C2C29A9A9AA8A9FFA9FFA8FFA9FFCBFD09FF
%A9FFA8FFFF7DF8F8F87606A0C29A75C276FFA9FFA9FFA8FD0BFFA8FFA9FF
%A8FFA9CBC2C8C2C299A099CAA9FFA9FFA8FFA9FFA9FD09FFA9FFA8FFA9FF
%A827759A99C2C2760676F8F8F8A8FFFFA8FFCBA8CBA8FFA8CBA8FFA8A14C
%9A9A276FC3A8CBA8FFA8CBA8FFA8FD09FFA8FFA8CBA8CBFD04F8275376C2
%4B75BC4B53FFA8FFA8CBA8FD09FFA8CBA8FFA8CBA8FFA8C9A0C29A7599C2
%A8FFA8FFA8CBA8FFA8FD09FFA8FFA8CBA8FFA827F84BBC4B4BC2765220F8
%F8F827FFA8CBA8FFFFA9FFCBFFA9FFCBFFFFC96F7676C2CAFFA9FFCBFFA9
%FFCBFFCBFD09FFA9FFA9FF7DFD05F827767676C2A0F8F87DFFCBFFA9FFCB
%FD09FFA9FFCBFFA9FFCBFFA9CA9AC2C2C2C3FFA9FFCBFFA9FFCBFFA9FD09
%FFA9FFA9FFFF7DF8F8F8C29AA1769A20FD05F87DFFA9FFCBA8CBA8FFA8CB
%A8FFA8FFC2994A4BA1FFA8FFA8FFA8CBA8FFA8FD09FFA8FFA8CBCB7DFD05
%F805999A4B4BFD04F8A8FFA8CBA8FD09FFA8CBA8FFA8CBA8FFA8AFA1BC4B
%4B76FFCBFFA8FFA8CBA8FFA8FD09FFA8FFA8CBA8FF52F8F8F84B9A4A759A
%7626FD04F852CBFFA8FFFFA9FFA8FFCBFFA8A985A8C2C276A97EA9A9FFA8
%FFA9FFA8FD0BFFA8FFA9FF52F8F8F8285A60C3BBC2997D28F8F87DFFFFA9
%FFA9FD09FFA9FFA8FFFFCB7D592FA1C2C29952537EA8FFA9FFA9FFA8FFCB
%FD09FFA8FFA9FFFF7DF851A0C9527676A177C9A076F8F827FFCBFFA8A8FF
%A8CBA8A97E7F5A8585FFA8FF857F5A857EA9A8FFA8CBA8FD09FFA8CBA8FF
%CB77F82735615A6159A1A0A15A612FF852FFA8FFA8FD09FFA8FFA8CBA8A8
%2828282F2EA2A1C97728062F53CBA8FFA8CBA8FD09FFA9CBA8FFA8FFA87C
%C2C89F7E7D7E77A1C2C8C2A0F852A9FFA8FFFFA9FFA9A97F857E857FA9A9
%A985AF7E857F8584FFCBFFA9FD0BFFA9FFCBFF7D2E5A855A8560615A8560
%615A855AA8CBFFCBFD0BFFA9FFCBFF2F2F28532E2F285353532853282F53
%FFCBFFA9FD0BFFA9FFCBFFA9CFC8C8C2C97D7E7DC9C2C8C2C9C8A07EFFCB
%FFFFCBFFA8855A857E855A857E857E857E855A857E85A8FFA8CBA8FD0BFF
%A8FFA8A95A615A605A605A605A605A605A615AA9A8FFA8FD0BFFA8FF532F
%282F282F282F282F282F282F282853FFA8CBA8FD0BFFA8FFA9CAA0C8C2C8
%76777DA1C2C8C2C8A0C8C2C9A8FFA8FFFFA9857F857E857F857E857E857F
%857F857E857E85A8FFA9FD0DFFA8FF60615A615A615A615A615A615A845A
%6184FFA8FD0BFFCBFF7E2F2853285328532853285328532853282F53FFCB
%FD0DFFA8FFC9C8C2C8A07D767E7DC8C2C8C2C8C2C8C2CAA9FD04FF5A857E
%855A857E855A857E855A855A8584855AA9A8FD0DFFA8CB5A605A605A605A
%605A605A605A605983366084FFCBFD0BFFA853282F282F282F282F282F28
%2F282F282F282853CBFD0CFFA8CBA8C8A0C8A0C876A1777DA0C8A0C8A0C8
%A0C8A0CBA8FFFFFFAF7F857E857F857E857F8585857F857EAF85857EAFFD
%0EFF846160615A8560615A8560615A8560847D855A85FD0EFF282F28532E
%5328532E5328532E5328532E53282FA8FD0DFFA9CAC2C8C2C9C2A1A0A177
%C9C2C9C2C8C2C9C2C8CAFD05FFA95A855A857E855A857E855A857E7F8485
%5A7FA8FD0EFFA936605A605A605A605A605A605A605A835A6084FD0EFFA8
%282F282F282F282F282F282F282F282F282853FD0FFFA0C8C2C8A0C8C2C8
%76A1C2C8A0C8C2C8A0C8C9FD07FFA97E857E857F857E8585857E857EA984
%85A9FD10FFA95A615A615A615A615A615A615A617D6084FD10FFA8282F28
%5328532853285328532853282F7DFD10FFCFC2C8C2C8C2C8C2C8A0C8C2C8
%C2C8C2C8C9FD09FFA97E7F5A857E855A857E855A857EA9A8FD12FFA95A60
%5A605A605A605A605A603684A8FD12FFA82828282F282F282F282F282F28
%2F7DFD12FFCFA0C2A0C8A0C8C2C8A0C8A0C29FC8C9FD0CFFA9A97F857E85
%85855A8585AFFD16FF84855A615A615A615A615AAFFD16FF7D53282F2853
%282F282F2F7EA9FD15FFCAC9C2C8C2C8C2C8C2C8C2CFFD11FFA9A984A985
%A9A9FD1AFFAF8485608484A9A8FD19FFA9A87D7D5359537E7EFD1AFFCFC9
%CAC9C9A7CACAFDFCFFFDFCFFFDFCFFFD9FFFA9FFA8FFA9FFA9FD1BFFA8FF
%A8FFA8FD1DFFA9FFA8FFA9FFA8FD1BFFA8FFA8FFA8FFCBFD12FFA8FFA9FF
%A8FFA9FFA8FD17FFA9FFA9FFA8FFA9FFA8FFCBFD19FFA8FFA9FFA8FFA9FF
%A8FD17FFCBFFA9FFA8FFA9FFA8FFA9FD0EFFA8FFA8CBA8FFA9FFA8FFA8CB
%A8FFCBFD13FFA8CBA8FFA8FFA8FFA8CBA8FFA8CBA8FD13FFA8FFA9FFA8FF
%A8CBA8FFA8CBA8FFA9FD13FFA8CBA8FFA8CBA8FFA8CBA8FFA8CBA8FD0AFF
%A8FFCBFFFFFFA2A2A8FFCBFFA9FFA9FD13FFA9FFA9FFFFFFA8A87EFFCBFF
%CBFFA9FD13FFA8FFFFA87DFFFFFFA9FFCBFFA9FFA9FFCBFD11FFA9FFA9FF
%CBFFFFFFA8FFCBFFCBFFA9FD0AFFA8CBA8FFA9A877F8F8F852FFA9CBA8FF
%A8CBA8FD0FFFA8FFA8CBA9A805264B2727CBA8FFA8CBA8FFA9FD0FFFA8CB
%A97DF8F8F8A8CBFFCBFFA9CBA8FFA8CBA8FD0FFFA8FFA8CBA8CB7D7D27F8
%52CBA8FFA8CBA8FFA8FD06FFA8FFA9FFFF7EFD06F82EFFCBFFA8FFA9FD0F
%FFA9FFA8FFFFA2F826F8F8512627FFA9FFA9FFA8FD0FFFA8FFCBA9FD05F8
%FFA87D7DFFCBFFA8FFA9FFCBFD0DFFA9FFA8FFA9FF52FD05F8272752FFA9
%FFA8FD06FFA8CBA8FFA8FF52F8F84BFD04F853CBA8CBA8FFA8FD0DFFA8FF
%A8CBA8FFF8204BF8F8F84BF87DFFA8FFA8CBA8FD0DFFA8CBA8FF7EFD05F8
%27F8F8F852FFA8CBA8FFA8CBA8FD0BFFA8FFA8CBA8FFCB7DFD05F805F8F8
%A8FFA8CBA8FFCBFFFFCBFFA9FFCBFFCBA8F875C29AF8F8F8277DFFA9FFCB
%FFA8FD0BFFCBFFCBFFA9FF7DF826C227F8F8512052FFFFCBFFA9FFA9FD0D
%FFA9FFCBFF27F8F8202727F827F852FFFFA9FFCBFFA9FD0DFFCBFFA9FFCB
%FFA8274B75F8F8F827F8FFCBFFA9FFA9FFFFA9FFA8CBA8FFA8FFA9766F9A
%BC754B2728A8A9CBA8FFA8CBA8FD0AFFCBA8FFA8CBCB7DF875999A4B2720
%51F8FFA9FFA8CBA8FFA8FD0BFFA8CBA8FFCBA8F8F82727F8F86F6FF8A8A9
%CBA8FFA8CBA8FD0BFFA8FFA8CBA8FFA8FF7DBC9AFD05F87DFFA8CBA8FFA8
%FFFFA8FFA9FFA8FFCBCA76C2759A99C27654A1FFA9FFA8FFA9FD0BFFA9FF
%A8FFA9FF2E4B9A75BCC2BCA0C24B52A8FFFFA9FFA8FD0BFFA8FFA9FFA8FF
%FFFF0527F8F8F8C275F87DFFA9FFA8FFA9FD0BFFA9FFA8FFA9FFA8FFA8A0
%4BC24B26F828F852FFFFA9FFA8FFFFA8CBA8FFA8CBA8FFA1769A9A6FC2BB
%772FA2A8FFA8CBA8FFA8FD09FFA8FFA8CBA8FFFF5220C26F9A99C2C2C826
%F8F852A8FFA8CBA8FD09FFA8CBA8FFA8CBA8FFCB7D4B274A75997570A8A8
%FFA8CBA8FFA8FD09FFA8FFA8CBA8FFA8CBA87E6F6FBCC29952284B7DFFA8
%FFA8CBA8FFFFA9FFCBFFA9FFCBFFA1C2C29A99C29A7EA8FFCBFFA9FFCBFF
%CBFD09FFA9FFA9FFA9FF5220C2A04BC2C2C87527F8F8F827A8FFA9FD0BFF
%A9FFCBFFA9FFCBFFA1A19AC2C2C275C3A8FFCBFFA9FFCBFFA9FD09FFA9FF
%A9FFCBFFA9FFA8A099759AC24C28A1FFA9FFCBFFA9FFCBA8CBA8FFA8CBA8
%FFA9FF9AC2765276A2A9FFA8FFA8CBA8FFA8FD09FFA8FFA8CBA8FFA2F8F8
%75C2C299C24AFD06F852CBFFA8FD09FFA8CBA8FFA8CBA8FFA8A176A1BC9A
%4BBCA1A9A8FFA8CBA8FFA8FD09FFA8FFA8CBA8FFA8CBA8FFC2BC4B9A9A76
%77FFA8CBA8FFA8CBA8FFFFA9FFA8FFA9FFA8FFA9CA99C3A0A0A8FFCBFFA9
%FFA9FFA8FD0BFFA8FFA9FFFF52F8F8F84B4B759A4BFD07F8A8FFFFA9FD09
%FFA9FFA8FFA9FFA8FFCAA876C3A0A0BBCAAFFFA8FFA9FFA8FFCBFD09FFA8
%FFA9FFA8FFA9FFA9CAC2A04B76A1FFA9FFA9FFA8FFA9FFA8A8FFA8CBA8FF
%A8CBA8FFA8764A4B6FA8A2A8A2A8A8FFA8FFA8FD09FFA8CBA8FFA8FF27F8
%F80027BCBBC2522800FD05F852FFA8FD09FFA8FFA8CBA8FFA8CBA8FFA9A1
%4B7675C3A8FFA8CBA8FFA8CBA8FD09FFA8CBA8FFA8CBA8FFA8CBA9A1206F
%99C9A9A9A8FFA8CBA8FFA8CBFFA9FFA9FFCBFFA9FFFFA8767676A177A177
%7D77A17DA8A8FD0BFFA9FFCBFFFF7D275353FFCACAA97E547E535327F8F8
%7DFD0CFFA9FFA9FFCBFFA9FFCACFC2C2756FA1FFA9FFA9FFCBFFA9FD0BFF
%A8FFCBFFA9FFCBAF8485A1C2BCC2A1857EA9A9FFCBFFCBFFA9A8FFA8CBA8
%FFA9FFA2A27DA87DA17677767D7777767D767777FD09FFA9CBA8FFA9A853
%5A537EA88585AF535A5353535A28F852FFA8FD09FFA8FFA8CBA8FFA8C9A0
%C8C2C9C3C2C2C9A0CAA8FFA8FFA8CBA8FD0AFFCBA8FFA8FFA8A95A855AA8
%A0A17D857E855A857EA9A8FFA8FFFFA8FFA9FFA9CB7D7D767D7DA277A177
%7D77A1777D77A177A1FD0AFFA9FFCBA95354535A597E5A7E7E5A535A535A
%537E537ECBFD0BFFA8FFA9FFC9C8C2C8C2C884858485A7C8C2C9CAFFA8FF
%A9FD0BFFCBFFA8FFCBA95A857F857E857F857E857F857E857FFFA8FD04FF
%A8FFA8A27677767776777677767D7677767D76777677A2FD0BFFA8A82FFD
%06537FFD09535A53A8A8FD0BFFA8CAA0C2A0C8A0C8A08436603684C2C89F
%C8A7FFA8FFA8FD0BFFA8CBA8A95A855A857E855A857E855A857E855A857E
%A9A8FD04FFCBA276A177A177A177A177A177A177A177A177A17DFD0CFFA9
%535A537D535A537E7E7E535A537E535A537E535459FD0CFFCFC2C8C2C9C2
%C8C2C95A615A6160C8C2C9C2C8C9FFA9FD0DFFA9FF7F857E857F857E857F
%857E857F857E857F8584FD04FFA8A27677767D7777767D7777767D777776
%7D777776CAFD0CFF7E532F7D77FD045385535A5353535A5353535A2F84FD
%0CFFC9C8C2C8A0C8C2C8A0845A605A60A0C8A0C8C2C8A7FD0EFFCB7E857E
%855A857E855A857E855A857E855A855A85FD05FF777D777D77A1777D77A1
%777D77A1777D77A177A8FD0EFF7E537D7E535A537E7E5A535A535A535A53
%5A2F7EFD0EFFC9C8C2C8C2C8C2C85A615A615AA7C2C8C2C8C2C9FD0EFFA9
%857E857F857E857F857E857F857E857F855AA9FD07FF77777677767D7677
%767D7677767D767776A8FD10FF597DFD04535A7FFD08532F7EFD10FFA0C2
%A0C8A0C8A06036605A607DC8C2C89FC9FD10FF847F5A857E855A857E855A
%857E855A855A85A8FD08FFA17D77A177A177A177A177A1777D77CAFD12FF
%7D5A535A53857E5A537E535A535A53A8FD12FFC9C8C2C8C2C95A6160615A
%84C2C8C2CAFD12FFA9857F857E857F857E857F857E857FA9FD0BFFA8A176
%777677767D7677767DA1FD15FFA87E53535A7E53532F532F5359AFFD14FF
%CAC9A0C8A06036605A6036A7A0CFFD14FFA9A97E7F5A857E855A855A857E
%AFFD0FFFA2A27DA177A2A1A8CAFD19FF84855A7E537E7EA9A9FD19FFC9CA
%60855A8584AFA8FD19FFA9A97E85858584AFAFFD16FFCBFD1FFFA8FD1FFF
%AFFFFFFFA9FD1FFFA9FDFCFFFDFCFFFDFCFFFD26FFCBFD1FFFCBFD23FFCB
%FD1FFFCBFD16FFA8CBA8CBA8FFA9FFA8FFA8FD17FFA8FFA8CBA8FFA8CBA8
%FFCBFD17FFA8CBA8FFA8CBA8FFA8FFA8FD17FFA8FFA8CBA8FFA8CBA8FFA9
%FD0EFFA9FFA9FFFFFF7D7DA8FFA8FD17FFA9FFCBFFA9FFFFFFA8FFA9FFCB
%FD15FFA9FFA9FFCBFFA9FFCBFFA9FFCBFD15FFA9FFCBFFA9FFCBFFA9FFA9
%FFA9FD0AFFA9CBA8FFA8CBA8FF27F8F827A8FFA8FFA8FD11FFA8FFA8CBA8
%FFA9FF5252A2FFA8FFA8CBA8FD12FFCBA8FFCBFFCBFFA8CBA9FFA8CBA8FF
%A8FD11FFCBFFA8CBA8FFA9FFA9FFA9CBA8FFA8CBA8FD08FFCBFFA9FFA8FF
%FFFF7DFD04F87EFFFFA8FFA9FD11FFA8FFA9FFCBFF27F8F84C7DA8A9FFA9
%FFA8FD11FFA9FFA97D525227527652A2FFA9FFA8FFA9FD11FFA8FFA9FF7D
%5227527DFFFFFFA8FFA9FFA8FD06FFA9CBA8FFA8CBA8A82727FD04F877FF
%A8CBA8FFA8FD0DFFA8FFA8CBA8FFA8FF27FD05F877FFA8FFA8CBA8FD0EFF
%CBA8FFA8FF52FD04F82626F8A2FFA8CBA8FFA8FD0DFFA8FFA8CBA8FFCB52
%FD05F8537DFFA8FFA8CBA8FD06FFA9FFCBFFA9FF52F8F8272020F8CBFFFF
%A9FFCBFFCBFD0DFFA9FFA9FFFFFF52FD06F8A8CBFFCBFFA9FFCBFD0DFFA9
%FFCBFFA9FF4B9A7527F8512052FFFFA9FFCBFFA9FD0DFFA9FFA9FFCBFFF8
%274BFD04F827A8FFCBFFA9FFCBFD04FFA8CBA8FFA8FF7D27F8F820C24A7D
%A9FFA8CBA8FFA8CBA9FD0BFFA8FFA8CBA8A85227F8F8206FF852CBFFA8FF
%A8CBA8FFCBFD0BFFA8CBA8FFA8CBA9A899C220F8F851F852A9FFA8FFA8CB
%A8FD0BFFA8FFA8CBA8FF7DF84B9AF8F8F827F8A8A8FFA8CBA8FFA9FFFFA8
%FFA9FFA8FFA827F8F8277DC2C3CAFFA8FFA9FFA8FFA9FD0BFFA9FFA8FFA9
%FF52F800F8F875C24B27FFA9FFA8FFA9FFA8FD0BFFA8FFA9FFA8FFA9FF9A
%9AC275F8F84BF8F8FFCBFFA8FFA9FD0BFFCBFFA8FFA9FFCB7EF875BC27F8
%F8F827A8FFA8FFA9FFA8FFFFA8CBA8FFA8CBA8FF272852A16FA7A176A8FF
%A8FFA8CBA8FFA8FD09FFA8FFA8CBA8FFFF52F827F82775C26F52A8FFA8CB
%A8FFA8CBA8FD09FFCBCBA8FFA8CBA8FFA1996F9A757520C24A27A8FFA8CB
%A8FFA8FD09FFA8FFA8CBA8FFA8FF7E4B6F996F7520274BFFA8CBA8FFA8CB
%A8FFFFA9FFCBFFA9FFCB7D28A1C9C9C3A1A1FFA9FFCBFFA9FFCBFD0BFFA9
%FFA9FFCBFFA17753A09AC2759A76A2FFFFA9FFCBFFA9FD0BFFA8FFCBFFA9
%FFAFC99976C2C2BCC8C8C27DFFCBFFA9FFCBFFCBFD09FFA9FFA9FFCBFFA9
%FFA09A99C2C2A02877A8FFA9FFCBFFA9FFFFA8CBA8FFA8CBA8FF520675C2
%A07575C3A8FFA8FFA8CBA8FFA8FD09FFA8FFA8CBA8FFA8CA775476C2BC75
%99777DFFA8CBA8FFA8CBA8FD09FFA9CBA8FFA8CBA8FFA8C2997699C2C1C8
%A0CBA8FFA8CBA8FFA8FD09FFA8FFA8CBA8FFA8FF7D76BC754AC29A2E2727
%A8FFA8FFA8CBA8FFFFA9FFA8FFA9FFA9C952769A764BC2C2FFA9FFA8FFA9
%FFA8FD0BFFA8FFA9FFA8FFCBA153A1C29A99C2A1FFA8FFA9FFA8FFA9FFA9
%FD09FFA9FFA8FFA9FFA8FFC2C299C8C2C275CACBFFA8FFA9FFA8FFCBFD09
%FFA8FFA9FFA8FFA80020C39A529A762727F852FFFFA8FFA9FFA8A8FFA8CB
%A8FFA8CBA8CA9A7675C2BBCAA8FFA8CBA8FFA8CBA8FD09FFA8CBA8FFA8CB
%A8FFA8A876A17676BBCAA9CBA8FFA8CBA8FFA8FD09FFA8FFA8CBA8FFA8CB
%A8CABCC2999A9AA8A9FFA8CBA8FFA8CBA8FD09FFA8CBA8FFA8CBA852F8F8
%4BC275754BFD04F8A8A8CBA8FFA8CBFFCBFFA9FFCBFFA9FFFFC999754AA1
%FFFFCBFFA9FFCBFFA9FD0BFFA9FFCBFFA9FFCBFFCBCB9AC29AC2CBFFA9FF
%CBFFA9FFCBFFCBFD09FFA9FFA9FFCBFFCBFFA9A1207599C37D7E7EFFCBFF
%CBFFA9FFCBFD09FFA9FFCBFFCBA8FD04F827759A75FD04F87DFFA9FFCBFF
%A9A8FFA8CBA8FFA8CBA8A9A1BC999976A9A8FFA8CBA8FFA8CBA8FD09FFA8
%CBA8FFA8CBA8FFA9FFA8A06F4B6FA8A2A8A8FFA9FFA8FFA8FD09FFA8FFA8
%CBA8FF7E7D2F53289ABBC27628282F28537EFFCBFFA8FD09FFA9CBA8FFA8
%FF52F8F8274BC2BCC24BFD04F87ECBCBA8FFA8FFFFA8FFA9FFA8A960605A
%A9C9C3C2CA5A6184FFCBFFA8FFA9FD0BFFA9FFA8FFCBFFA8A8A1A1C2C29A
%C2767D777D7DA8CBFFA8FD0BFFA8FFFFA82F2F282F2853A1A17D7E282F28
%53282F53A8FFFFCBFD09FFA9FFA8FFFFA14BC2C2FD04C976FD04F87CFFA9
%FFA8FFFFA9CBA8FFA88436605A60366184845A605A605AA9A8CBA8FFA8FD
%09FFA8FFA8CBA8FFA17D767776C2C2A1A0A0767D767776A1A8FFA8FD0AFF
%CBA87E2828282F282E287D777D522F282F282F2828287EA8FD09FFA8FFA8
%FFA8C9C2C8C2C8A0C8A0C975FD04F8C2A0C9A8FFA8FFFFA9FFA9855A6160
%615A615A615A6160615A615AAFCBFFA9FD0BFFCBFFA9FF7D7D77A177A1A0
%A177A1A0A177A177A177A2A8FD0BFFCB84282F28532E53285377A1777D2E
%5328532E532853287EFD0CFFA8C9C2C8C2C9C2C8C2C8C2C8754B4BC2C2C8
%C2C9A8FD04FFA88536605A605A605A605A605A605A605A605AA9A8FD0DFF
%A8FF7D777777767D777D767D7777767D7777767D76A2FD0BFFA9282F282F
%282F282F52A1777D7653282F282F282F28297EFD0BFFA7C2A0C8C2C9A0C8
%C2C8A0C8C2C8C2C8C2C8A0C8C2C2A8FFFFFFA936615A615A615A615A615A
%615A615A615A6184FFCBFD0DFFA87D77A1777D77A1777D77A1777D77A177
%7D777DA1FD0CFF7E285328532853287777A1777D285328532853282F53FD
%0CFFCAC2C8C2CFC8C8C2C8C2C8C2C8C2C8C2C8C2C8C2C8C8FD04FFA86036
%605A605A605A605A605A605A605A603660A8FD0EFFA17677767D7677767D
%7677767D7677767D767777FD0DFFA953062F282F282F527D767D762F282F
%282F282828FD0EFFC99FC9A7C8A0C8A0C8A0C8A0C8A0C8A0C8A0C2A0FD06
%FFA9615A615A8560615A8560615A8560615A6184FD0FFFA8A176A1777D77
%A177A177A177A177A1777D7DFD0FFFA853285328532E7D77A177A12E532E
%53282F2FFD10FFC9C8C9C2C8C2C9C2C8C2C9C2C8C2C9C2C8C2FD08FFA885
%36605A605A605A605A605A605A5A84FD11FFA8A1767D7677767D7777767D
%777776777DFD11FFA85928282853777D767D7753282F282853FD12FFCAA0
%C8C2C8A0C8C2C8A0C8C2C8A0C8C2CFFD0AFFAF5A605A615A615A615A605A
%85A9FD14FFA876A1777D77A1777D777D77A1A8FD14FFA82F2928A1777D77
%A1532F28537EFD14FFCFC2C8C2C8C2C8C2C8C2C8C2C8C9FD0EFF84605A60
%5A605A6084A9A9FD17FFA1A17677767D767D7DA8FD18FF7D53767D767776
%532F84A8FD17FFA7C9A0C8A0C8A0C8A0CACAFD06FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-01-25T17:30:33+03:00"
   xmp:ModifyDate="2022-01-25T17:30:33+03:00"
   xmp:MetadataDate="2022-01-25T17:30:33+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:8ca4863f-8aa7-ef45-8b42-d1ecbc836745"
   xmpMM:InstanceID="xmp.iid:8ca4863f-8aa7-ef45-8b42-d1ecbc836745"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">shablon_dlya_rabot</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="184"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9UkgCp2A6nFUtudUNSsH&#xA;/Bn+AyYgmkC8sshq7lvmcnSVoJBqDQ4UomDULiI7tzXwb+uRMQik0t7mOdOSHcfaU9RlZFMVXArs&#xA;Vdiqjc3UcC1bdj9lR1OEC1Yrrvn3y/pd7bWOraxaabdXn+8ttPOkTyVPEcQxBNTt88soBlSOJJNS&#xA;anJJXRzSxmqOV+RwUhMLXU6kJPQE9HH8cgYoITDIIdirsVdiqX3Wp0JSDcjq56fRkxFICXyTzSGr&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:38665561-e756-0449-9f2a-ee244b1816bf"
    stRef:documentID="xmp.did:38665561-e756-0449-9f2a-ee244b1816bf"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:38665561-e756-0449-9f2a-ee244b1816bf"
      stEvt:when="2022-01-25T17:30:31+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:8ca4863f-8aa7-ef45-8b42-d1ecbc836745"
      stEvt:when="2022-01-25T17:30:33+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="580.949285"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -335.38 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 335.38 li
465.909 335.38 li
465.909 0 li
cp
clp
217.55 46.6802 mo
217.55 51.5499 216.81 56.2501 215.42 60.6602 cv
213.59 66.48 210.65 71.8101 206.84 76.3902 cv
206.25 77.1202 205.63 77.8199 204.99 78.5098 cv
204.89 78.6299 204.79 78.7398 204.68 78.8502 cv
204.56 78.9698 li
204.46 79.0801 204.35 79.19 204.25 79.2901 cv
202.91 80.65 201.49 81.94 199.99 83.1402 cv
199.62 83.4302 199.25 83.7198 198.87 84.0001 cv
198.49 84.2901 198.1 84.5699 197.71 84.8399 cv
197.31 85.1202 196.92 85.3902 196.52 85.65 cv
196.12 85.9102 195.71 86.17 195.3 86.42 cv
195.14 86.5201 194.97 86.6202 194.81 86.7198 cv
194.6 86.8502 194.38 86.98 194.16 87.1002 cv
194.07 87.15 193.99 87.1998 193.9 87.2501 cv
193.62 87.4102 193.34 87.5601 193.06 87.71 cv
192.68 87.92 192.29 88.1299 191.9 88.3199 cv
191.62 88.46 191.34 88.6002 191.05 88.7398 cv
190.88 88.8199 190.71 88.9102 190.53 88.98 cv
190.26 89.1099 189.99 89.2398 189.71 89.3502 cv
189.32 89.5298 188.93 89.6998 188.53 89.8599 cv
188.25 89.9698 187.98 90.0899 187.7 90.19 cv
187.38 90.3101 187.07 90.4302 186.75 90.5401 cv
186.63 90.5899 186.51 90.6299 186.39 90.67 cv
185.99 90.8101 185.59 90.9498 185.18 91.0801 cv
184.83 91.1998 184.47 91.3101 184.11 91.4 cv
183.82 91.5001 183.53 91.5801 183.24 91.6602 cv
183.16 91.6802 183.08 91.6998 183.01 91.7198 cv
182.57 91.8399 182.13 91.9498 181.69 92.0499 cv
180.27 92.3902 178.82 92.6602 177.36 92.8599 cv
176.84 92.9302 176.31 93.0001 175.78 93.0499 cv
175.25 93.1099 174.71 93.15 174.18 93.19 cv
173.1 93.2598 172.02 93.2999 170.93 93.2999 cv
169.15 93.2999 167.38 93.1998 165.65 93.0098 cv
165.41 92.9898 165.18 92.96 164.95 92.9302 cv
164.93 92.92 164.92 92.92 164.9 92.92 cv
162.69 92.6299 160.53 92.19 158.43 91.6002 cv
155.96 90.92 153.57 90.0298 151.29 88.9698 cv
150.94 88.8101 150.59 88.6402 150.24 88.4698 cv
147.99 87.3599 145.85 86.0699 143.84 84.6202 cv
141.82 83.1802 139.92 81.5801 138.16 79.8301 cv
137.43 79.1099 136.73 78.3702 136.06 77.6002 cv
134.96 76.3799 133.95 75.1002 133 73.7701 cv
132.62 73.23 132.24 72.69 131.88 72.1299 cv
130.98 70.7701 130.16 69.3599 129.42 67.9102 cv
126.15 61.5401 124.31 54.3301 124.31 46.6802 cv
124.31 20.9302 145.18 .0601172 170.93 .0601172 cv
196.68 .0601172 217.55 20.9302 217.55 46.6802 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.909804 .882353 .937255 rgb
f
188.939 35.7964 mo
189.059 38.4249 187.827 40.6163 186.187 40.6905 cv
184.549 40.7647 183.123 38.6939 183.004 36.0655 cv
182.885 33.4371 184.118 31.2462 185.756 31.1719 cv
187.395 31.0977 188.82 33.168 188.939 35.7964 cv
cp
.168627 .215686 .317647 rgb
f
160.87 27.3658 mo
160.87 27.3658 144.95 33.4542 144.138 51.4717 cv
142.965 77.5142 174.174 71.4766 174.174 71.4766 cv
174.174 71.4766 191.851 73.3106 196.741 60.2794 cv
201.631 47.2481 185.914 39.3819 185.914 39.3819 cv
185.914 39.3819 166.857 22.6016 160.87 27.3658 cv
cp
0 0 0 rgb
f
206.84 76.3902 mo
202.81 65.5801 191.34 49.1402 172.22 49.8399 cv
170.92 49.8902 169.66 50.0098 168.45 50.19 cv
168.41 50.1998 168.37 50.21 168.33 50.21 cv
151.42 52.8599 140.23 67.9898 136.06 77.6002 cv
136.73 78.3702 137.43 79.1099 138.16 79.8301 cv
139.92 81.5801 141.82 83.1802 143.84 84.6202 cv
145.85 86.0699 147.99 87.3599 150.24 88.4698 cv
150.59 88.6402 150.94 88.8101 151.29 88.9698 cv
153.57 90.0298 155.96 90.92 158.43 91.6002 cv
160.53 92.19 162.69 92.6299 164.9 92.92 cv
164.92 92.92 164.93 92.92 164.95 92.9302 cv
165.18 92.96 165.41 92.9898 165.64 93.0098 cv
167.38 93.1998 169.15 93.2999 170.93 93.2999 cv
172.02 93.2999 173.1 93.2598 174.18 93.19 cv
174.71 93.15 175.25 93.1099 175.78 93.0499 cv
176.31 93.0001 176.84 92.9302 177.36 92.8599 cv
178.82 92.6602 180.27 92.3902 181.69 92.0499 cv
182.13 91.9498 182.57 91.8399 183.01 91.7198 cv
183.08 91.6998 183.16 91.6802 183.24 91.6602 cv
183.53 91.5801 183.82 91.5001 184.11 91.4 cv
184.47 91.3101 184.83 91.1998 185.18 91.0801 cv
185.59 90.9498 185.99 90.8101 186.39 90.67 cv
186.51 90.6299 186.63 90.5899 186.75 90.5401 cv
187.07 90.4302 187.38 90.3101 187.7 90.19 cv
187.98 90.0899 188.25 89.9698 188.53 89.8599 cv
188.93 89.6998 189.32 89.5298 189.71 89.3502 cv
189.99 89.2398 190.26 89.1099 190.53 88.98 cv
190.71 88.9102 190.88 88.8199 191.05 88.7398 cv
191.34 88.6002 191.62 88.46 191.9 88.3199 cv
192.29 88.1299 192.68 87.92 193.06 87.71 cv
193.34 87.5601 193.62 87.4102 193.9 87.2501 cv
193.99 87.1998 194.07 87.15 194.16 87.1002 cv
194.38 86.98 194.6 86.8502 194.81 86.7198 cv
194.97 86.6202 195.14 86.5201 195.3 86.42 cv
195.71 86.17 196.12 85.9102 196.52 85.65 cv
196.92 85.3902 197.31 85.1202 197.71 84.8399 cv
198.1 84.5699 198.49 84.2901 198.87 84.0001 cv
199.25 83.7198 199.62 83.4302 199.99 83.1402 cv
201.49 81.94 202.91 80.65 204.25 79.2901 cv
206.84 76.3902 li
cp
.407843 .713726 .847059 rgb
f
194.809 86.7183 mo
187.829 90.8985 179.659 93.2984 170.929 93.2984 cv
169.149 93.2984 167.379 93.1983 165.649 93.0084 cv
165.409 92.9883 165.179 92.9586 164.949 92.9283 cv
164.929 92.9185 164.919 92.9185 164.899 92.9185 cv
162.689 92.6285 160.529 92.1885 158.429 91.5982 cv
155.959 90.9185 153.569 90.0284 151.289 88.9683 cv
150.939 88.8082 150.589 88.6382 150.239 88.4683 cv
147.989 87.3585 145.849 86.0684 143.839 84.6182 cv
143.749 77.7486 143.699 72.3282 143.699 72.3282 cv
161.459 59.1485 li
170.179 52.6783 li
170.289 52.6783 170.399 52.6783 170.509 52.6885 cv
175.309 52.7886 179.359 53.7686 182.549 54.9483 cv
183.059 55.1485 183.549 55.3384 184.019 55.5386 cv
188.449 57.4185 190.849 59.5284 190.849 59.5284 cv
190.849 59.5284 192.929 73.3082 194.809 86.7183 cv
cp
f
168.045 43.3873 mo
168.413 53.2349 li
168.413 53.2349 170.258 56.2593 176.416 56.5294 cv
181.003 56.73 182.633 55.4263 182.633 55.4263 cv
181.92 50.9136 li
181.098 45.754 li
169.92 43.7291 li
168.045 43.3873 li
cp
.956863 .517647 .384314 rgb
f
168.045 42.8868 mo
168.082 43.1724 168.204 43.5064 168.388 43.8882 cv
170.932 49.0425 179.269 50.7759 181.92 50.9136 cv
181.098 45.754 li
168.045 42.8868 li
cp
0 0 0 rgb
f
182.544 21.7447 mo
182.544 21.7447 188.543 34.6973 186.645 42.0894 cv
184.747 49.481 178.028 48.4708 173.992 47.1382 cv
169.956 45.8052 168.043 43.3897 168.043 43.3897 cv
168.043 43.3897 164.33 44.7398 161.752 41.3155 cv
159.174 37.8917 160.627 33.8629 162.743 32.9009 cv
164.859 31.9385 167.434 33.4254 167.434 33.4254 cv
165.359 29.6685 li
165.359 29.6685 173.314 10.1714 182.544 21.7447 cv
cp
.956863 .517647 .384314 rgb
f
184.481 27.127 mo
184.457 27.127 184.433 27.1251 184.408 27.1216 cv
181.847 26.7418 li
181.573 26.7012 181.385 26.4468 181.425 26.1739 cv
181.466 25.9009 181.719 25.7159 181.993 25.7525 cv
184.554 26.1324 li
184.828 26.1729 185.016 26.4273 184.976 26.7003 cv
184.938 26.9488 184.725 27.127 184.481 27.127 cv
cp
0 0 0 rgb
f
174.93 28.1856 mo
174.734 28.1856 174.549 28.0704 174.469 27.8795 cv
174.362 27.6246 174.481 27.3316 174.736 27.2247 cv
177.708 25.9761 li
177.963 25.8716 178.257 25.9888 178.363 26.2432 cv
178.47 26.4981 178.351 26.7911 178.096 26.898 cv
175.123 28.1465 li
175.06 28.1729 174.995 28.1856 174.93 28.1856 cv
cp
f
182.466 37.7491 mo
182.449 37.7491 182.432 37.7481 182.415 37.7466 cv
182.14 37.7188 181.94 37.4732 181.968 37.1988 cv
182.378 33.1558 180.703 31.1207 180.685 31.1006 cv
180.508 30.8902 180.533 30.5753 180.742 30.3965 cv
180.952 30.2169 181.266 30.2408 181.445 30.4498 cv
181.525 30.5435 183.419 32.7989 182.963 37.2994 cv
182.936 37.5572 182.719 37.7491 182.466 37.7491 cv
cp
f
177.128 40.2481 mo
177.289 40.5875 177.566 40.9429 178.039 41.0782 cv
178.513 41.2149 178.956 41.0342 179.29 40.8082 cv
177.128 40.2481 li
cp
178.382 42.1275 mo
178.184 42.1275 177.978 42.1006 177.765 42.0401 cv
176.111 41.5674 175.925 39.6714 175.918 39.5909 cv
175.904 39.4293 175.969 39.2706 176.093 39.1656 cv
176.217 39.0601 176.385 39.0215 176.541 39.063 cv
180.425 40.0689 li
180.586 40.1109 180.717 40.231 180.771 40.3887 cv
180.827 40.5469 180.799 40.7217 180.698 40.855 cv
180.653 40.9141 179.714 42.1275 178.382 42.1275 cv
cp
f
167.451 38.8282 mo
167.382 38.8282 167.311 38.814 167.244 38.7833 cv
161.971 36.3863 li
161.719 36.272 161.608 35.9756 161.723 35.7242 cv
161.836 35.4742 162.131 35.3609 162.385 35.4761 cv
167.658 37.8731 li
167.91 37.9874 168.02 38.2837 167.906 38.5352 cv
167.823 38.7193 167.641 38.8282 167.451 38.8282 cv
cp
f
162.753 40.0469 mo
162.624 40.0469 162.496 39.9976 162.398 39.8985 cv
162.204 39.7022 162.205 39.3853 162.402 39.1915 cv
164.726 36.8936 li
164.923 36.6988 165.239 36.7007 165.434 36.8975 cv
165.628 37.0938 165.626 37.4107 165.43 37.6045 cv
163.105 39.9024 li
163.007 39.9991 162.88 40.0469 162.753 40.0469 cv
cp
f
174.93 23.147 mo
174.93 23.147 177.933 22.7178 181.066 24.501 cv
184.2 26.2838 184.843 28.0215 184.843 28.0215 cv
184.843 28.0215 186.781 23.4175 182.533 19.3555 cv
178.286 15.2935 170.136 14.1671 165.438 18.9727 cv
160.74 23.7784 161.027 28.0215 161.027 28.0215 cv
167.434 33.4254 li
167.434 33.4254 177.327 31.6319 174.93 23.147 cv
cp
f
164.295 20.2647 mo
164.295 20.2647 158.25 8.78619 152.124 13.6368 cv
145.997 18.4874 152.82 28.2784 158.905 28.9922 cv
164.99 29.7066 164.295 20.2647 164.295 20.2647 cv
cp
f
165.649 93.0084 mo
165.409 92.9883 165.179 92.9586 164.949 92.9283 cv
164.929 92.9185 164.919 92.9185 164.899 92.9185 cv
162.689 92.6285 160.529 92.1885 158.429 91.5982 cv
161.459 59.1485 li
161.559 58.1182 li
168.045 54.8565 li
166.876 52.0235 li
166.876 52.0235 173.759 79.0684 165.649 93.0084 cv
cp
.407843 .713726 .847059 rgb
f
195.299 86.4185 mo
195.139 86.5186 194.969 86.6182 194.809 86.7183 cv
194.599 86.8482 194.379 86.9786 194.159 87.0982 cv
196.329 75.7686 191.889 69.2784 191.839 69.2086 cv
191.679 68.9786 191.719 68.6485 191.939 68.4786 cv
192.169 68.3082 192.479 68.3585 192.639 68.5884 cv
192.839 68.8682 197.179 75.1685 195.299 86.4185 cv
cp
.968627 .701961 .411765 rgb
f
176.977 57.0298 mo
171.3 57.0298 168.086 53.6187 168.044 53.5728 cv
167.858 53.3697 167.872 53.0543 168.074 52.8672 cv
168.278 52.6812 168.593 52.6939 168.78 52.8965 cv
168.992 53.1246 174.057 58.4512 183.009 54.7422 cv
183.262 54.6378 183.557 54.7579 183.662 55.0128 cv
183.768 55.2676 183.647 55.5601 183.392 55.6661 cv
181.001 56.6568 178.855 57.0298 176.977 57.0298 cv
cp
f
168.756 42.8868 mo
168.756 43.9244 167.914 44.7657 166.876 44.7657 cv
165.839 44.7657 164.997 43.9244 164.997 42.8868 cv
164.997 41.8487 165.839 41.0074 166.876 41.0074 cv
167.914 41.0074 168.756 41.8487 168.756 42.8868 cv
cp
.901961 .956863 1 rgb
f
176.416 33.5753 mo
176.14 33.5753 175.916 33.3516 175.916 33.0753 cv
175.916 30.7759 li
175.916 30.6446 175.968 30.5186 176.06 30.4249 cv
177.078 29.3917 li
177.271 29.1949 177.588 29.192 177.785 29.3868 cv
177.982 29.5806 177.984 29.897 177.79 30.0938 cv
176.916 30.981 li
176.916 33.0753 li
176.916 33.3516 176.692 33.5753 176.416 33.5753 cv
cp
0 0 0 rgb
f
183.972 33.5753 mo
183.695 33.5753 183.472 33.3516 183.472 33.0753 cv
183.472 30.7759 li
183.472 30.6446 183.523 30.5186 183.616 30.4249 cv
184.634 29.3917 li
184.826 29.1949 185.143 29.192 185.341 29.3868 cv
185.538 29.5806 185.539 29.897 185.346 30.0938 cv
184.472 30.981 li
184.472 33.0753 li
184.472 33.3516 184.248 33.5753 183.972 33.5753 cv
cp
f
168.462 36.8502 mo
168.581 39.4786 167.349 41.67 165.71 41.7442 cv
164.071 41.8184 162.646 39.7476 162.527 37.1192 cv
162.408 34.4908 163.64 32.2999 165.279 32.2252 cv
166.917 32.1509 168.343 34.2217 168.462 36.8502 cv
cp
.168627 .215686 .317647 rgb
f
167.778 36.8814 mo
167.897 39.5098 166.665 41.7007 165.026 41.775 cv
163.387 41.8492 161.962 39.7789 161.843 37.15 cv
161.724 34.5215 162.955 32.3306 164.595 32.2564 cv
166.234 32.1822 167.659 34.253 167.778 36.8814 cv
cp
.223529 .278431 .419608 rgb
f
165.268 31.9815 mo
165.351 32.8331 165.477 33.3785 165.504 33.4786 cv
165.574 33.7794 165.396 34.0801 165.096 34.1612 cv
165.018 34.1646 li
164.738 34.1998 164.482 34.0201 164.413 33.7418 cv
164.4 33.7086 164.221 32.9629 164.154 31.751 cv
163.917 28.0147 164.643 19.9371 174.414 15.815 cv
175.401 15.9952 176.085 16.2007 176.336 16.2789 cv
165.314 20.0977 164.931 28.5313 165.268 31.9815 cv
cp
f
173.305 45.0079 mo
167.282 45.0079 164.221 40.8389 164.083 40.6465 cv
163.903 40.3946 163.96 40.0445 164.212 39.8638 cv
164.464 39.6827 164.814 39.7393 164.996 39.9913 cv
165.131 40.1778 168.372 44.5547 174.784 43.795 cv
175.089 43.7608 175.372 43.9786 175.408 44.2872 cv
175.444 44.5953 175.224 44.8746 174.915 44.9112 cv
174.357 44.9771 173.82 45.0079 173.305 45.0079 cv
cp
f
179.438 44.1802 mo
179.475 44.9732 178.36 45.668 176.95 45.732 cv
175.539 45.7955 174.367 45.2046 174.33 44.4117 cv
174.294 43.6187 175.409 42.9244 176.819 42.8604 cv
178.23 42.7964 179.402 43.3873 179.438 44.1802 cv
cp
f
93.3798 46.6202 mo
93.3798 55.5201 90.8798 63.8399 86.56 70.92 cv
85.81 72.15 84.9999 73.3301 84.1498 74.48 cv
83.5199 75.3199 82.87 76.1299 82.1801 76.92 cv
80.3901 79.0201 78.4101 80.9498 76.2797 82.71 cv
75.58 83.2798 74.8598 83.8399 74.12 84.3702 cv
73.7201 84.67 73.31 84.96 72.8901 85.2398 cv
72.1698 85.7198 71.4399 86.19 70.6899 86.6299 cv
70.5497 86.73 70.3998 86.8101 70.2499 86.9 cv
70.1 86.9898 69.9399 87.0801 69.7797 87.17 cv
68.2997 88.0201 66.7499 88.7798 65.1698 89.46 cv
61.8398 90.9 58.2997 91.9498 54.62 92.5699 cv
54.2099 92.65 53.81 92.71 53.3998 92.7701 cv
52.3598 92.92 51.31 93.0298 50.2499 93.1099 cv
50.1401 93.1202 50.0297 93.1299 49.9198 93.1299 cv
49.1899 93.1802 48.4399 93.21 47.6899 93.2198 cv
47.3798 93.2398 47.0697 93.2398 46.7597 93.2398 cv
42.9999 93.2398 39.33 92.7901 35.83 91.9498 cv
32.9799 91.2701 30.2397 90.3199 27.62 89.1202 cv
25.54 88.1998 23.54 87.1099 21.6298 85.8902 cv
20.9198 85.44 20.2201 84.96 19.5297 84.46 cv
18.7201 83.8799 17.9301 83.2701 17.1601 82.6202 cv
15.1498 80.98 13.2797 79.1602 11.5697 77.19 cv
11.1899 76.7501 10.8197 76.3101 10.4599 75.8599 cv
10.0697 75.3799 9.68986 74.8902 9.31974 74.3902 cv
9.16008 74.1802 9.00969 73.98 8.85978 73.7701 cv
7.6298 72.0601 6.51994 70.2598 5.5297 68.3799 cv
5.1298 67.6402 4.75969 66.8799 4.41008 66.1202 cv
1.66008 60.1802 .140056 53.5699 .140056 46.6202 cv
.140056 20.8702 21.0097 5.85937e-05 46.7597 5.85937e-05 cv
72.5097 5.85937e-05 93.3798 20.8702 93.3798 46.6202 cv
cp
.909804 .882353 .937255 rgb
f
59.2519 35.6539 mo
59.371 38.2823 58.1391 40.4737 56.4999 40.5479 cv
54.8612 40.6221 53.436 38.5513 53.3168 35.9229 cv
53.1977 33.2945 54.4296 31.1031 56.0688 31.0289 cv
57.7079 30.9546 59.1327 33.0254 59.2519 35.6539 cv
cp
.168627 .215686 .317647 rgb
f
74.12 84.3702 mo
73.7201 84.67 73.31 84.96 72.8901 85.2398 cv
72.0297 85.8199 71.1498 86.3799 70.2499 86.9 cv
65.1698 89.8702 59.4799 91.9 53.3998 92.7701 cv
53.1098 92.8101 52.8197 92.8502 52.5199 92.8799 cv
50.9701 93.0801 49.3901 93.19 47.7797 93.2198 cv
47.6899 93.2198 li
47.3798 93.2398 47.0697 93.2398 46.7597 93.2398 cv
42.9999 93.2398 39.33 92.7901 35.83 91.9498 cv
30.7201 90.7198 25.9301 88.65 21.6298 85.8902 cv
20.0697 84.9 18.58 83.8101 17.1601 82.6202 cv
15.1498 80.98 13.2797 79.1602 11.5697 77.19 cv
11.1899 76.7501 10.8197 76.3101 10.4599 75.8599 cv
9.87004 67.8702 17.3901 60.17 18.7299 58.6002 cv
23.04 53.5001 35.1601 50.6602 47.06 51.0001 cv
47.06 51.0001 63.2699 50.94 70.0199 58.15 cv
72.9897 61.3199 73.9799 72.6202 74.12 84.3702 cv
cp
.572549 .705882 .917647 rgb
f
20.1401 57.2271 mo
19.5302 84.4615 li
18.7201 83.8819 17.9301 83.2715 17.1601 82.6216 cv
15.1498 80.9815 13.2802 79.1617 11.5702 77.1915 cv
11.1899 76.7515 10.8202 76.3116 10.4599 75.8619 cv
10.0702 75.3819 9.68986 74.8917 9.32023 74.3917 cv
9.16008 74.1817 9.01017 73.9815 8.85978 73.7715 cv
7.6298 72.0616 6.51994 70.2618 5.53019 68.3819 cv
11.4843 62.6729 20.1401 57.2271 20.1401 57.2271 cv
cp
f
82.1801 76.92 mo
80.3901 79.0201 78.4101 80.9498 76.2797 82.71 cv
75.58 83.2798 74.8598 83.8399 74.12 84.3702 cv
73.7201 84.67 73.31 84.96 72.8901 85.2398 cv
72.7001 85.3702 72.4999 85.5001 72.31 85.6202 cv
72.0697 85.7798 71.83 85.94 71.5898 86.0801 cv
71.1498 86.3702 70.7001 86.6402 70.2499 86.9 cv
68.62 87.8599 66.9198 88.71 65.1698 89.46 cv
59.3798 84.69 li
70.4198 58.6002 li
82.1801 76.92 li
cp
f
38.1737 42.5655 mo
37.4145 51.9195 li
37.4145 51.9195 38.0517 54.7564 44.1718 55.7569 cv
48.7309 56.5025 51.2187 53.751 51.2187 53.751 cv
51.141 51.732 li
50.9325 46.4795 li
40.0068 43.1295 li
38.1737 42.5655 li
cp
.956863 .517647 .384314 rgb
f
40.0068 43.1295 mo
40.0097 43.419 40.0917 43.7676 40.2304 44.1705 cv
42.1596 49.6221 48.5097 51.2794 51.141 51.732 cv
50.9325 46.4795 li
40.0068 43.1295 li
cp
0 0 0 rgb
f
55.2289 22.6656 mo
55.2289 22.6656 59.684 36.3179 56.9101 43.4771 cv
54.1357 50.6363 47.5434 48.8292 43.6698 47.0186 cv
39.7958 45.2076 38.1723 42.5674 38.1723 42.5674 cv
38.1723 42.5674 34.3022 43.4752 32.1327 39.7486 cv
29.9638 36.0215 31.894 32.1695 34.1225 31.4595 cv
36.351 30.7496 38.7455 32.5406 38.7455 32.5406 cv
37.12 28.5411 li
37.12 28.5411 47.3818 10.0079 55.2289 22.6656 cv
cp
.956863 .517647 .384314 rgb
f
53.0566 39.3331 mo
52.9906 39.3331 52.9242 39.3204 52.8603 39.293 cv
52.6064 39.1846 52.4882 38.8907 52.5966 38.6368 cv
53.5732 36.3482 52.0614 33.585 52.0463 33.5572 cv
51.912 33.316 51.9985 33.0118 52.2392 32.877 cv
52.4799 32.7437 52.7841 32.8287 52.9189 33.0694 cv
52.9921 33.1993 54.6879 36.2842 53.5165 39.0294 cv
53.4355 39.2193 53.2504 39.3331 53.0566 39.3331 cv
cp
0 0 0 rgb
f
37.5971 38.6031 mo
37.477 38.6031 37.3588 38.5494 37.2807 38.4468 cv
34.1152 34.3106 li
33.9814 34.1363 34.0146 33.8863 34.1894 33.753 cv
34.3632 33.6168 34.6132 33.6529 34.747 33.8272 cv
37.9125 37.9634 li
38.0463 38.1378 38.0131 38.3878 37.8383 38.5211 cv
37.7665 38.5767 37.6811 38.6031 37.5971 38.6031 cv
cp
f
33.9369 37.2037 mo
33.726 37.2037 33.5497 37.0377 33.54 36.8248 cv
33.5292 36.605 33.6991 36.4185 33.9184 36.4083 cv
36.4164 36.2901 li
36.6518 36.2813 36.8227 36.4493 36.8329 36.6685 cv
36.8437 36.8882 36.6737 37.0748 36.4545 37.085 cv
33.9565 37.2032 li
33.9496 37.2037 33.9433 37.2037 33.9369 37.2037 cv
cp
f
47.6313 33.8365 mo
47.3603 33.8365 47.1376 33.6202 47.1313 33.3482 cv
47.0727 30.877 li
47.0663 30.6011 47.2846 30.3721 47.561 30.3653 cv
47.8368 30.3663 48.0658 30.5777 48.0727 30.8536 cv
48.1313 33.3248 li
48.1376 33.6006 47.9194 33.8296 47.643 33.8365 cv
47.6391 33.8365 47.6352 33.8365 47.6313 33.8365 cv
cp
f
54.9311 34.0049 mo
54.665 34.0049 54.4438 33.795 54.432 33.5264 cv
54.3261 31.0567 li
54.3144 30.7808 54.5282 30.5474 54.8041 30.5357 cv
55.0893 30.5181 55.3134 30.7379 55.3251 31.0137 cv
55.4311 33.4835 li
55.4428 33.7593 55.2289 33.9927 54.953 34.0045 cv
54.9457 34.0049 54.9384 34.0049 54.9311 34.0049 cv
cp
f
46.4237 29.2003 mo
46.3256 29.2003 46.2265 29.1714 46.1396 29.1114 cv
45.9125 28.9537 45.8559 28.6421 46.0131 28.4156 cv
47.1596 26.7628 49.3354 27.5191 49.4272 27.5518 cv
49.6864 27.6446 49.8207 27.9297 49.7284 28.1895 cv
49.6366 28.4488 49.35 28.585 49.0912 28.4937 cv
49.0287 28.4717 47.5414 27.9659 46.8354 28.9849 cv
46.7382 29.1251 46.5824 29.2003 46.4237 29.2003 cv
cp
f
55.9633 29.188 mo
55.7953 29.188 55.6313 29.1036 55.537 28.9503 cv
55.4262 28.7725 55.038 28.2916 54.5771 28.1983 cv
54.3251 28.1461 54.0697 28.2154 53.7983 28.4073 cv
53.5722 28.566 53.2602 28.5128 53.1015 28.2867 cv
52.9423 28.0611 52.9965 27.7491 53.2221 27.5899 cv
53.7187 27.2393 54.2607 27.1124 54.7831 27.2198 cv
55.7489 27.4195 56.3266 28.3248 56.3896 28.4273 cv
56.5336 28.6627 56.4594 28.9708 56.2236 29.1148 cv
56.142 29.1646 56.0522 29.188 55.9633 29.188 cv
cp
f
55.2279 22.6675 mo
54.3847 21.4341 li
54.3847 21.4341 53.3476 22.1451 51.0409 22.6324 cv
47.4975 23.4004 43.3359 23.1837 43.3359 23.1837 cv
43.3359 23.1837 44.0346 24.1983 43.8735 27.8516 cv
43.7133 31.5152 39.9125 33.5552 39.9125 33.5552 cv
38.5761 32.6148 37.4491 32.0806 36.5024 31.7974 cv
36.0922 31.6807 35.7289 31.607 35.3896 31.5665 cv
33.1967 31.3506 32.3803 32.7042 32.3803 32.7042 cv
32.3803 32.7042 27.3354 24.6627 33.1723 18.8848 cv
37.2651 14.8516 42.745 15.1094 45.6488 15.6304 cv
46.6362 15.8106 47.3202 16.0162 47.5717 16.0948 cv
47.6401 16.1138 47.6742 16.1236 47.6742 16.1236 cv
47.6742 16.1236 56.413 14.0513 57.8666 15.3467 cv
59.3202 16.6314 56.2768 22.7213 55.2279 22.6675 cv
cp
f
48.9247 41.1353 mo
48.9203 41.2598 48.9345 41.3897 48.9814 41.5064 cv
49.0575 41.6949 49.2162 41.8365 49.4657 41.9385 cv
49.9106 42.1221 50.3412 42.1011 50.6938 42.0142 cv
48.9247 41.1353 li
cp
50.1728 43.0782 mo
49.8315 43.0782 49.4643 43.0191 49.0868 42.8643 cv
48.5849 42.6583 48.2265 42.315 48.0502 41.8712 cv
47.7411 41.0923 48.0873 40.2891 48.1278 40.1998 cv
48.184 40.0762 48.2875 39.981 48.4154 39.9356 cv
48.5424 39.8897 48.684 39.8985 48.8056 39.959 cv
52.0683 41.5806 li
52.2231 41.6578 52.3271 41.8091 52.3432 41.9815 cv
52.3598 42.1539 52.2856 42.3223 52.1479 42.4268 cv
52.1029 42.461 51.2724 43.0782 50.1728 43.0782 cv
cp
f
52.5199 92.8799 mo
50.9701 93.0801 49.3901 93.19 47.7797 93.2198 cv
44.31 56.21 li
47.7201 57.1002 li
52.5199 92.8799 li
cp
.635294 .772549 .976471 rgb
f
51.3656 51.4356 mo
51.3656 51.4356 55.3383 62.4795 54.1791 62.3155 cv
53.0199 62.1509 45.8808 56.4703 45.8808 56.4703 cv
45.8808 56.4703 41.207 62.898 39.5771 63.0176 cv
37.9472 63.1368 37.4145 51.5137 37.4145 51.5137 cv
37.4145 51.5137 38.6479 54.8004 44.7328 55.3575 cv
50.8178 55.9146 51.3656 51.4356 51.3656 51.4356 cv
cp
.901961 .956863 1 rgb
f
39.6972 36.6656 mo
39.8163 39.2945 38.5839 41.4854 36.9452 41.5596 cv
35.3061 41.6338 33.8808 39.5635 33.7616 36.9346 cv
33.6425 34.3062 34.8749 32.1153 36.5136 32.0411 cv
38.1528 31.9669 39.578 34.0372 39.6972 36.6656 cv
cp
.168627 .215686 .317647 rgb
f
39.0131 36.6968 mo
39.1322 39.3253 37.8998 41.5162 36.2612 41.5904 cv
34.622 41.6651 33.1967 39.5943 33.0776 36.9659 cv
32.9589 34.337 34.1908 32.1461 35.8295 32.0718 cv
37.4687 31.9976 38.894 34.0684 39.0131 36.6968 cv
cp
.223529 .278431 .419608 rgb
f
36.5024 31.7974 mo
36.5859 32.6485 36.7123 33.1939 36.7392 33.294 cv
36.809 33.5948 36.6313 33.8956 36.3315 33.9766 cv
36.2528 33.98 li
35.9731 34.0152 35.7172 33.8355 35.6484 33.5572 cv
35.6357 33.524 35.4555 32.7784 35.3896 31.5665 cv
35.1528 27.8301 35.8778 19.7525 45.6488 15.6304 cv
46.6362 15.8106 47.3202 16.0162 47.5717 16.0948 cv
36.5492 19.9131 36.1659 28.3467 36.5024 31.7974 cv
cp
f
44.539 44.8233 mo
38.517 44.8233 35.456 40.6548 35.3178 40.4625 cv
35.1376 40.2105 35.1952 39.8609 35.4467 39.6797 cv
35.6991 39.4991 36.0487 39.5552 36.2309 39.8072 cv
36.3656 39.9937 39.6049 44.3721 46.0185 43.6104 cv
46.3276 43.5718 46.6059 43.794 46.6425 44.1026 cv
46.6791 44.4107 46.4589 44.69 46.1503 44.7266 cv
45.5922 44.7925 45.0541 44.8233 44.539 44.8233 cv
cp
f
50.6733 43.9957 mo
50.7094 44.7886 49.5951 45.4835 48.1845 45.5474 cv
46.7738 45.6114 45.6015 45.0201 45.5658 44.2271 cv
45.5297 43.4346 46.644 42.7398 48.0546 42.6758 cv
49.4648 42.6119 50.6376 43.2032 50.6733 43.9957 cv
cp
f
70.6899 86.6299 mo
70.5497 86.73 70.3998 86.8101 70.2499 86.9 cv
70.1 86.9898 69.9399 87.0801 69.7797 87.17 cv
65.79 68.48 li
65.7397 68.21 65.9101 67.9498 66.1801 67.8902 cv
66.4501 67.8301 66.7099 68.0001 66.7699 68.2701 cv
70.6899 86.6299 li
cp
.901961 .956863 1 rgb
f
341.73 46.6802 mo
341.73 53.3799 340.31 59.7598 337.77 65.5201 cv
337.21 66.7701 336.61 67.9898 335.95 69.1802 cv
335.62 69.7901 335.27 70.3902 334.91 70.98 cv
334.27 72.0298 333.59 73.0401 332.88 74.0201 cv
332.76 74.1802 332.65 74.3399 332.539 74.4898 cv
332.53 74.5098 332.52 74.5201 332.499 74.5401 cv
330.22 77.5899 327.57 80.3502 324.63 82.7701 cv
323.539 83.6602 322.41 84.5098 321.24 85.2999 cv
320.38 85.8799 319.499 86.44 318.6 86.96 cv
317.98 87.3199 317.35 87.67 316.71 88.0098 cv
312.12 90.4102 307.09 92.0699 301.749 92.8301 cv
299.88 93.1002 297.98 93.2501 296.039 93.2798 cv
295.73 93.2999 295.42 93.2999 295.11 93.2999 cv
291.35 93.2999 287.68 92.8502 284.18 92.0098 cv
279.07 90.7798 274.28 88.71 269.98 85.9498 cv
268.42 84.96 266.93 83.8702 265.51 82.6802 cv
263.499 81.0401 261.63 79.2198 259.92 77.2501 cv
259.14 76.3399 258.38 75.4102 257.67 74.4498 cv
257.51 74.2398 257.36 74.0401 257.21 73.8301 cv
255.499 71.44 253.999 68.8799 252.76 66.1802 cv
250.01 60.2398 248.49 53.6299 248.49 46.6802 cv
248.49 20.9302 269.36 .0601172 295.11 .0601172 cv
320.86 .0601172 341.73 20.9302 341.73 46.6802 cv
cp
.909804 .882353 .937255 rgb
f
307.235 35.7188 mo
307.354 38.3472 306.121 40.5386 304.483 40.6129 cv
302.843 40.6871 301.418 38.6163 301.299 35.9879 cv
301.18 33.3594 302.413 31.168 304.051 31.0938 cv
305.69 31.0196 307.116 33.0904 307.235 35.7188 cv
cp
.956863 .596078 .239216 rgb
f
324.629 82.7686 mo
323.539 83.6583 322.409 84.5084 321.239 85.2984 cv
320.379 85.8785 319.499 86.4385 318.599 86.9586 cv
313.519 89.9283 307.829 91.9586 301.749 92.8282 cv
299.879 93.0982 297.979 93.2486 296.039 93.2784 cv
295.729 93.2984 295.419 93.2984 295.109 93.2984 cv
291.349 93.2984 287.679 92.8482 284.179 92.0084 cv
279.069 90.7784 274.279 88.7086 269.979 85.9483 cv
268.419 84.9586 266.929 83.8682 265.509 82.6783 cv
263.499 81.0386 261.629 79.2183 259.919 77.2486 cv
259.139 76.3384 258.379 75.4083 257.669 74.4483 cv
260.849 66.9185 266.659 56.1285 274.579 53.4883 cv
287.049 49.3282 313.62 55.1885 313.62 55.1885 cv
313.62 55.1885 322.719 59.6085 324.629 82.7686 cv
cp
.25098 .313726 .498039 rgb
f
318.599 86.9586 mo
313.519 89.9283 307.829 91.9586 301.749 92.8282 cv
299.879 93.0982 297.979 93.2486 296.039 93.2784 cv
295.729 93.2984 295.419 93.2984 295.109 93.2984 cv
291.349 93.2984 287.679 92.8482 284.179 92.0084 cv
279.069 90.7784 274.279 88.7086 269.979 85.9483 cv
268.419 84.9586 266.929 83.8682 265.509 82.6783 cv
265.589 70.4883 266.509 59.3482 269.459 56.6885 cv
270.939 55.3482 272.709 54.2984 274.579 53.4883 cv
278.909 51.6182 283.749 50.9883 286.929 50.7784 cv
289.039 50.6382 290.409 50.6885 290.409 50.6885 cv
290.409 50.6885 293.239 50.7984 297.039 51.2183 cv
298.089 51.3482 299.149 51.4786 300.259 51.6382 cv
306.729 52.5684 314.309 54.3785 316.269 57.7984 cv
317.959 60.7383 318.499 73.9083 318.599 86.9586 cv
cp
f
304.06 26.2701 mo
284.789 40.8599 li
284.789 40.8599 274.289 30.3199 278.56 24.2999 cv
281.21 20.5499 286.57 18.7501 290.24 17.92 cv
290.66 17.8301 291.05 17.7501 291.42 17.6802 cv
292.999 17.3702 294.06 17.2798 294.06 17.2798 cv
294.06 17.2798 294.4 16.9698 294.98 16.5201 cv
294.4 16.98 294.07 17.3399 294.07 17.3399 cv
294.74 17.0899 295.46 16.8702 296.23 16.67 cv
296.07 16.6099 295.73 16.48 295.24 16.3199 cv
297.23 14.8199 301.42 12.2598 305.079 13.8599 cv
310.11 16.0499 304.06 26.2701 304.06 26.2701 cv
cp
0 0 0 rgb
f
286.789 43.1392 mo
286.154 53.4932 li
286.154 53.4932 287.838 56.584 293.866 57.4478 cv
298.355 58.0914 300.002 57.1685 300.002 57.1685 cv
299.695 51.8863 li
299.389 46.7349 li
288.599 43.6578 li
286.789 43.1392 li
cp
.956863 .517647 .384314 rgb
f
288.599 43.6578 mo
288.608 43.942 288.695 44.2823 288.839 44.6754 cv
290.838 49.9893 297.104 51.4932 299.695 51.8863 cv
299.389 46.7349 li
288.599 43.6578 li
cp
0 0 0 rgb
f
303.146 23.2769 mo
303.146 23.2769 307.783 36.5914 305.198 43.6724 cv
302.614 50.7535 296.108 49.107 292.27 47.4044 cv
288.433 45.7017 286.788 43.1417 286.788 43.1417 cv
286.788 43.1417 283.006 44.1075 280.805 40.4913 cv
278.604 36.8746 280.424 33.0562 282.598 32.3165 cv
284.772 31.5767 287.157 33.2881 287.157 33.2881 cv
285.484 29.3936 li
285.484 29.3936 295.199 11.0035 303.146 23.2769 cv
cp
.956863 .517647 .384314 rgb
f
286.456 38.942 mo
286.345 38.942 286.233 38.9048 286.14 38.8292 cv
281.681 35.1885 li
281.467 35.0142 281.436 34.6988 281.61 34.4849 cv
281.786 34.2706 282.1 34.2403 282.314 34.4141 cv
286.773 38.0547 li
286.987 38.2291 287.018 38.5445 286.844 38.7584 cv
286.745 38.8795 286.601 38.942 286.456 38.942 cv
cp
0 0 0 rgb
f
282.207 38.6236 mo
281.973 38.6236 281.764 38.4576 281.717 38.2183 cv
281.665 37.9473 281.842 37.6851 282.114 37.6329 cv
285.234 37.0303 li
285.501 36.9761 285.766 37.1544 285.82 37.4263 cv
285.871 37.6973 285.695 37.9595 285.423 38.0118 cv
282.303 38.6143 li
282.271 38.6207 282.24 38.6236 282.207 38.6236 cv
cp
f
294.176 28.8477 mo
294.059 28.8477 293.942 28.8072 293.847 28.7242 cv
293.639 28.5425 293.618 28.2266 293.8 28.0186 cv
295.353 26.2418 297.256 26.7042 298.046 27.1959 cv
298.281 27.3419 298.352 27.6504 298.206 27.8848 cv
298.059 28.1192 297.752 28.19 297.519 28.046 cv
297.356 27.9463 295.902 27.1353 294.552 28.6768 cv
294.454 28.7901 294.315 28.8477 294.176 28.8477 cv
cp
f
304.236 28.4229 mo
304.114 28.4229 303.991 28.3785 303.894 28.2881 cv
302.908 27.3648 301.77 27.9073 301.723 27.9312 cv
301.477 28.0543 301.177 27.9532 301.053 27.7081 cv
300.93 27.4625 301.027 27.1641 301.271 27.0391 cv
301.344 27.0025 303.065 26.1465 304.578 27.5577 cv
304.779 27.7462 304.789 28.0626 304.601 28.2642 cv
304.502 28.3697 304.37 28.4229 304.236 28.4229 cv
cp
f
301.888 38.1656 mo
301.831 38.1656 301.773 38.1558 301.716 38.1353 cv
301.457 38.0401 301.324 37.753 301.418 37.4937 cv
302.733 33.9009 301.022 31.8184 300.949 31.7315 cv
300.771 31.5215 300.795 31.2066 301.004 31.0274 cv
301.214 30.8487 301.527 30.8707 301.707 31.0801 cv
301.796 31.1837 303.882 33.6685 302.358 37.8375 cv
302.284 38.0401 302.092 38.1656 301.888 38.1656 cv
cp
f
303.883 33.3946 mo
303.652 33.3946 303.444 33.2325 303.395 32.9966 cv
302.892 30.5821 li
302.884 30.5479 302.881 30.5132 302.881 30.4796 cv
302.881 30.2476 303.043 30.0396 303.28 29.9908 cv
303.543 29.9351 303.815 30.107 303.871 30.378 cv
304.373 32.7925 li
304.381 32.8267 304.384 32.8614 304.384 32.8951 cv
304.384 33.127 304.222 33.335 303.986 33.3838 cv
303.952 33.3912 303.917 33.3946 303.883 33.3946 cv
cp
f
296.32 33.5704 mo
296.088 33.5704 295.88 33.4083 295.831 33.1724 cv
295.329 30.7584 li
295.272 30.4879 295.446 30.2232 295.716 30.1671 cv
295.981 30.1094 296.251 30.2838 296.307 30.5543 cv
296.81 32.9683 li
296.867 33.2388 296.693 33.5035 296.422 33.5596 cv
296.388 33.567 296.354 33.5704 296.32 33.5704 cv
cp
f
304.056 26.2691 mo
304.056 26.2691 303.06 24.1187 300.478 23.9424 cv
297.896 23.7662 296.277 25.4927 296.277 25.4927 cv
296.277 25.4927 297.142 29.9117 293.489 32.0064 cv
289.835 34.1011 287.157 33.2881 287.157 33.2881 cv
284.665 32.2242 li
283.025 28.3868 li
290.882 20.897 li
300.729 16.4478 li
305.319 21.1588 li
304.056 26.2691 li
cp
f
299.031 42.1309 mo
298.627 42.1309 296.243 42.0294 295.313 39.6832 cv
295.211 39.4263 295.337 39.1358 295.593 39.0342 cv
295.85 38.9337 296.14 39.0582 296.243 39.315 cv
296.981 41.1788 299.009 41.126 299.052 41.1309 cv
299.281 41.1016 299.558 41.3375 299.569 41.6133 cv
299.578 41.8892 299.362 42.1207 299.085 42.1299 cv
299.079 42.1304 299.06 42.1309 299.031 42.1309 cv
cp
f
297.176 58.252 mo
290.398 58.252 285.239 53.5572 284.989 53.3257 cv
284.787 53.1382 284.774 52.8223 284.961 52.6197 cv
285.15 52.417 285.465 52.4048 285.668 52.5919 cv
285.735 52.6539 292.489 58.7935 300.35 56.8712 cv
300.617 56.8072 300.888 56.9708 300.954 57.2383 cv
301.019 57.5064 300.855 57.7774 300.586 57.8428 cv
299.417 58.1285 298.275 58.252 297.176 58.252 cv
cp
1 1 1 rgb
f
287.679 36.7305 mo
287.798 39.3594 286.567 41.5504 284.927 41.6246 cv
283.288 41.6988 281.864 39.628 281.745 36.9996 cv
281.625 34.3712 282.857 32.1802 284.496 32.106 cv
286.135 32.0318 287.56 34.1021 287.679 36.7305 cv
cp
.956863 .596078 .239216 rgb
f
286.996 36.7618 mo
287.115 39.3902 285.882 41.5811 284.244 41.6558 cv
282.605 41.73 281.179 39.6592 281.06 37.0308 cv
280.941 34.4019 282.173 32.211 283.812 32.1368 cv
285.451 32.0626 286.876 34.1334 286.996 36.7618 cv
cp
.968627 .701961 .411765 rgb
f
296.23 16.67 mo
295.46 16.8702 294.74 17.0899 294.07 17.3399 cv
294.07 17.3399 294.4 16.98 294.98 16.5201 cv
295.06 16.46 295.15 16.3902 295.24 16.3199 cv
295.73 16.48 296.07 16.6099 296.23 16.67 cv
cp
0 0 0 rgb
f
283.94 31.44 mo
283.95 32.2901 284.03 32.8502 284.05 32.9498 cv
284.1 33.2501 283.9 33.5401 283.59 33.5899 cv
283.51 33.5899 li
283.23 33.6002 282.99 33.4 282.94 33.1202 cv
282.93 33.0899 282.81 32.3301 282.85 31.1202 cv
282.9 27.96 283.88 21.7701 290.24 17.92 cv
290.66 17.8301 291.05 17.7501 291.42 17.6802 cv
293.01 17.3902 294.06 17.2798 294.06 17.2798 cv
284.789 20.65 283.88 28.21 283.94 31.44 cv
cp
.968627 .701961 .411765 rgb
f
292.522 44.8882 mo
286.499 44.8882 283.438 40.7198 283.3 40.5274 cv
283.12 40.2754 283.178 39.9258 283.429 39.7447 cv
283.68 39.564 284.03 39.6192 284.213 39.8721 cv
284.348 40.0582 287.592 44.4346 294 43.6754 cv
294.302 43.6392 294.588 43.8585 294.625 44.1675 cv
294.662 44.4756 294.441 44.7549 294.133 44.7916 cv
293.575 44.8575 293.037 44.8882 292.522 44.8882 cv
cp
f
298.656 44.0606 mo
298.692 44.8536 297.578 45.5484 296.166 45.6124 cv
294.756 45.6763 293.583 45.085 293.548 44.292 cv
293.512 43.4991 294.626 42.8047 296.037 42.7408 cv
297.448 42.6768 298.62 43.2681 298.656 44.0606 cv
cp
f
332.88 74.0201 mo
332.749 74.1998 332.63 74.3702 332.499 74.5401 cv
330.22 77.5899 327.57 80.3502 324.63 82.7701 cv
323.55 83.65 322.43 84.5001 321.27 85.2798 cv
312.59 81.5801 li
315.699 57.0137 li
332.88 74.0201 li
cp
.25098 .313726 .498039 rgb
f
465.909 46.6783 mo
465.909 52.9385 464.679 58.9083 462.439 64.3585 cv
460.799 68.3482 458.62 72.0684 455.989 75.4185 cv
449.949 83.1285 441.529 88.8882 431.829 91.5884 cv
427.839 92.7086 423.629 93.2984 419.289 93.2984 cv
417.639 93.2984 416.009 93.2183 414.399 93.0484 cv
413.349 92.9385 412.309 92.7886 411.279 92.6085 cv
410.139 92.4083 409.019 92.1685 407.909 91.8882 cv
407.699 91.8384 407.479 91.7886 407.269 91.7286 cv
405.489 91.2584 403.739 90.6783 402.049 89.9986 cv
399.069 88.8184 396.229 87.3282 393.589 85.5782 cv
392.769 85.0386 391.959 84.4683 391.179 83.8785 cv
389.62 82.6983 388.139 81.4283 386.739 80.0582 cv
383.409 76.8184 380.579 73.0884 378.339 68.9883 cv
374.719 62.3585 372.659 54.7584 372.659 46.6783 cv
372.659 20.9283 393.539 .0581641 419.289 .0581641 cv
445.039 .0581641 465.909 20.9283 465.909 46.6783 cv
cp
.909804 .882353 .937255 rgb
f
407.805 26.4708 mo
407.805 26.4708 403.344 30.2134 402.922 33.9683 cv
402.501 37.7232 402.501 37.7232 402.501 37.7232 cv
402.501 37.7232 397.154 39.4307 395.539 45.8917 cv
393.348 54.6622 399.327 57.7125 399.327 57.7125 cv
445.763 62.7256 li
445.763 62.7256 451.22 57.9434 450.127 50.2574 cv
449.036 42.5718 444.537 40.1265 444.537 40.1265 cv
444.537 40.1265 445.278 35.1856 442.791 30.2222 cv
439.921 24.4937 434.031 24.4371 434.031 24.4371 cv
407.805 26.4708 li
cp
0 0 0 rgb
f
403.657 35.7964 mo
403.538 38.4249 404.77 40.6163 406.409 40.6905 cv
408.047 40.7647 409.473 38.6939 409.591 36.0655 cv
409.71 33.4371 408.479 31.2462 406.839 31.1719 cv
405.201 31.0977 403.776 33.168 403.657 35.7964 cv
cp
.168627 .215686 .317647 rgb
f
455.989 75.4185 mo
449.949 83.1285 441.529 88.8882 431.829 91.5884 cv
427.839 92.7086 423.629 93.2984 419.289 93.2984 cv
417.639 93.2984 416.009 93.2183 414.399 93.0484 cv
413.349 92.9385 412.309 92.7886 411.279 92.6085 cv
410.139 92.4083 409.019 92.1685 407.909 91.8882 cv
407.699 91.8384 407.479 91.7886 407.269 91.7286 cv
405.489 91.2584 403.739 90.6783 402.049 89.9986 cv
399.069 88.8184 396.229 87.3282 393.589 85.5782 cv
393.689 83.0884 393.859 81.6783 393.859 81.6783 cv
401.389 57.9283 li
402.129 55.5884 li
402.569 54.1885 403.469 53.0186 404.659 52.2383 cv
405.269 51.8282 405.959 51.5284 406.699 51.3682 cv
408.079 51.0484 409.799 50.6983 411.749 50.3682 cv
412.359 50.2784 412.969 50.1783 413.62 50.0884 cv
415.639 49.8082 417.859 49.5884 420.149 49.4883 cv
421.529 49.4283 422.909 49.4185 424.299 49.4683 cv
424.919 49.4883 425.539 49.5186 426.159 49.5582 cv
426.879 49.6182 427.589 49.6885 428.309 49.7686 cv
429.109 49.8682 429.899 49.9883 430.689 50.1485 cv
432.489 50.4883 434.249 50.9683 435.919 51.6182 cv
440.349 53.3482 444.199 56.9083 447.37 60.8985 cv
451.409 65.9883 454.349 71.7886 455.989 75.4185 cv
cp
.968627 .701961 .411765 rgb
f
426.301 47.3326 mo
426.301 47.3326 429.566 48.4024 430.556 49.9219 cv
431.665 51.6255 429.59 56.1104 423.684 59.5987 cv
419.37 62.147 415.727 63.0479 415.727 63.0479 cv
415.727 63.0479 411.97 57.8521 411.249 54.6934 cv
410.529 51.5347 413.173 47.3912 413.173 47.3912 cv
426.301 47.3326 li
cp
.639216 .482353 .564706 rgb
f
436.87 33.7901 mo
433.52 48.0401 421.01 43.7798 421.01 43.7798 cv
421.01 43.7798 401.77 41.1998 409.01 32.3101 cv
409.01 32.3101 405.09 26.3101 405.12 23.3702 cv
405.14 21.3399 409.41 16.6099 415.42 14.8199 cv
416.02 14.6402 416.63 14.4898 417.26 14.3799 cv
419.48 13.9698 421.89 13.9898 424.37 14.69 cv
434.63 17.5699 438.17 28.2501 436.87 33.7901 cv
cp
0 0 0 rgb
f
413.14 47.1309 mo
413.173 47.3912 li
413.989 52.2725 li
414.612 56.1016 li
414.612 56.1016 414.391 57.0362 418.835 56.2022 cv
424.788 55.0616 426.412 52.2476 426.412 52.2476 cv
425.572 43.1959 li
423.794 43.7637 li
413.14 47.1309 li
cp
.956863 .517647 .384314 rgb
f
413.173 47.3912 mo
413.989 52.2725 li
416.863 51.564 422.019 49.6568 423.607 44.8077 cv
423.727 44.4146 423.795 44.066 423.796 43.7823 cv
413.183 47.3145 li
413.173 47.3912 li
cp
0 0 0 rgb
f
408.42 24.1334 mo
408.42 24.1334 404.388 37.5894 407.27 44.524 cv
410.153 51.459 416.557 49.5352 420.302 47.6724 cv
424.046 45.8101 425.572 43.1895 425.572 43.1895 cv
425.572 43.1895 429.378 43.9854 431.411 40.2891 cv
433.443 36.5933 431.464 32.8721 429.268 32.231 cv
427.073 31.5899 424.773 33.398 424.773 33.398 cv
426.268 29.4483 li
426.268 29.4483 415.792 11.5694 408.42 24.1334 cv
cp
.956863 .517647 .384314 rgb
f
410.509 40.0552 mo
410.32 40.0552 410.138 39.9468 410.054 39.7628 cv
408.841 37.1011 410.429 34.0401 410.496 33.9112 cv
410.625 33.667 410.928 33.5733 411.171 33.7027 cv
411.415 33.8311 411.509 34.1334 411.381 34.3775 cv
411.367 34.4048 409.957 37.1382 410.964 39.3477 cv
411.079 39.5992 410.968 39.8956 410.716 40.0103 cv
410.65 40.0411 410.579 40.0552 410.509 40.0552 cv
cp
0 0 0 rgb
f
426.031 39.4097 mo
425.928 39.4097 425.826 39.3785 425.737 39.314 cv
425.513 39.1514 425.464 38.8389 425.626 38.6158 cv
428.623 34.4962 li
428.786 34.272 429.099 34.2242 429.322 34.3858 cv
429.545 34.5484 429.594 34.8609 429.432 35.084 cv
426.435 39.2037 li
426.337 39.3384 426.185 39.4097 426.031 39.4097 cv
cp
f
429.576 37.9546 mo
429.564 37.9546 427.119 37.8985 427.119 37.8985 cv
426.843 37.8921 426.624 37.6631 426.63 37.3868 cv
426.637 37.1114 426.847 36.8892 427.142 36.8985 cv
429.587 36.9546 li
429.863 36.961 430.081 37.19 430.076 37.4664 cv
430.069 37.7383 429.847 37.9546 429.576 37.9546 cv
cp
f
424.773 33.398 mo
424.773 33.398 418.835 31.2559 416.305 27.501 cv
413.775 23.7462 413.442 21.7427 413.442 21.7427 cv
413.442 21.7427 412.963 24.4796 411.011 25.3594 cv
409.059 26.2388 407.805 26.4708 407.805 26.4708 cv
406.988 30.3785 li
406.688 21.3497 li
406.688 21.3497 411.818 17.7022 412.554 17.6075 cv
413.291 17.5132 422.803 17.9888 423.413 18.4796 cv
424.022 18.9703 427.878 25.817 427.878 25.817 cv
428.499 29.0528 li
424.773 33.398 li
cp
f
426.015 47.9727 mo
426.015 47.9727 419.659 53.9649 415.935 53.9996 cv
412.212 54.0347 412.735 50.9385 412.735 50.9385 cv
413.349 58.0811 li
416.637 59.1587 li
424.858 55.8453 li
429.472 50.6817 li
426.015 47.9727 li
cp
.639216 .482353 .564706 rgb
f
419.29 59.5196 mo
419.29 59.5196 422.079 63.3331 422.645 69.3155 cv
423.211 75.2979 419.738 82.0215 419.738 82.0215 cv
419.738 82.0215 414.169 75.7071 413.432 70.9395 cv
412.695 66.1719 415.246 59.4039 415.246 59.4039 cv
415.246 59.4039 412.721 65.1461 412.097 68.6597 cv
411.474 72.1734 410.613 76.69 410.613 76.69 cv
410.613 76.69 407.234 72.2105 407.435 66.8922 cv
407.637 61.5738 413.349 58.0811 413.349 58.0811 cv
419.29 59.5196 li
cp
f
414.683 54.5381 mo
414.453 54.5381 414.385 54.6304 414.352 54.6773 cv
413.933 55.2564 414.346 57.1236 414.905 58.751 cv
415.371 57.2964 415.72 55.5474 415.288 54.8375 cv
415.175 54.6534 415.014 54.5621 414.766 54.542 cv
414.737 54.5396 414.708 54.5381 414.683 54.5381 cv
cp
418.578 61.2769 mo
417.037 61.2769 415.052 60.7383 414.78 60.6622 cv
414.751 60.6544 414.724 60.6441 414.698 60.6309 cv
414.592 60.5801 414.503 60.4922 414.454 60.3755 cv
414.118 59.5811 412.492 55.543 413.541 54.0914 cv
413.744 53.8101 414.137 53.4854 414.848 53.545 cv
415.414 53.5919 415.863 53.8585 416.142 54.3174 cv
416.977 55.689 416.046 58.5987 415.586 59.837 cv
416.666 60.0962 418.504 60.4405 419.356 60.1944 cv
420.255 59.9346 420.765 56.8394 420.406 55.0909 cv
420.35 54.8204 420.524 54.5562 420.794 54.5005 cv
421.06 54.4483 421.329 54.6182 421.384 54.8897 cv
421.709 56.4673 421.497 60.6168 419.633 61.1553 cv
419.334 61.2418 418.97 61.2769 418.578 61.2769 cv
cp
.572549 .705882 .917647 rgb
f
417.99 62.9815 mo
417.663 65.0899 417.515 67.5025 418.099 68.2296 cv
418.186 68.338 418.227 68.3736 418.401 68.3819 cv
418.525 68.3814 418.578 68.3404 418.626 68.2706 cv
419.099 67.5923 418.632 65.1695 417.99 62.9815 cv
cp
418.399 69.3819 mo
417.969 69.3819 417.596 69.2003 417.32 68.8555 cv
415.992 67.2022 417.225 61.5054 417.371 60.8614 cv
417.418 60.6451 417.605 60.4864 417.826 60.4722 cv
418.037 60.4605 418.251 60.5914 418.328 60.8004 cv
418.712 61.8589 420.577 67.2217 419.447 68.8423 cv
419.202 69.1934 418.841 69.3799 418.405 69.3819 cv
418.403 69.3819 418.401 69.3819 418.399 69.3819 cv
cp
f
407.909 91.8882 mo
407.699 91.8384 407.479 91.7886 407.269 91.7286 cv
405.489 91.2584 403.739 90.6783 402.049 89.9986 cv
399.069 88.8184 396.229 87.3282 393.589 85.5782 cv
392.769 85.0386 391.959 84.4683 391.179 83.8785 cv
389.62 82.6983 388.139 81.4283 386.739 80.0582 cv
386.759 79.9283 386.789 79.7984 386.819 79.6685 cv
389.37 68.1285 394.209 61.0284 398.209 56.9083 cv
401.829 53.1885 405.295 51.8682 405.295 51.8682 cv
405.255 51.9883 404.699 52.1085 404.659 52.2383 cv
404.269 53.6783 404.089 55.7286 404.079 58.2183 cv
404.049 66.8082 406.009 80.5684 407.909 91.8882 cv
cp
.968627 .701961 .411765 rgb
f
415.027 35.171 mo
414.719 35.1441 414.526 34.9263 414.526 34.6714 cv
414.528 34.6236 414.762 32.1685 414.762 32.1685 cv
414.789 31.8931 415.036 31.6876 415.308 31.7183 cv
415.567 31.7427 415.76 31.9605 415.76 32.2154 cv
415.758 32.2632 415.524 34.7183 415.524 34.7183 cv
415.498 34.9771 415.281 35.171 415.027 35.171 cv
cp
0 0 0 rgb
f
407.805 34.9805 mo
407.784 34.9805 407.761 34.9791 407.74 34.9761 cv
407.488 34.9434 407.304 34.7286 407.304 34.481 cv
407.304 34.4595 407.305 34.4376 407.308 34.4156 cv
407.627 31.9703 li
407.663 31.6968 407.92 31.5005 408.188 31.5396 cv
408.44 31.5723 408.623 31.7872 408.623 32.0347 cv
408.623 32.0562 408.622 32.0782 408.62 32.1002 cv
408.3 34.5455 li
408.267 34.7969 408.052 34.9805 407.805 34.9805 cv
cp
f
413.748 42.5552 mo
414.071 42.6392 414.432 42.6885 414.775 42.6397 cv
415.083 42.5943 415.283 42.2169 415.4 41.8057 cv
413.748 42.5552 li
cp
414.497 43.6592 mo
413.352 43.6592 412.279 43.043 412.228 43.0137 cv
412.067 42.9195 411.971 42.7432 411.981 42.5562 cv
411.99 42.3697 412.103 42.2037 412.273 42.1265 cv
415.829 40.5128 li
415.987 40.441 416.169 40.4561 416.312 40.5513 cv
416.455 40.6465 416.54 40.8096 416.536 40.9815 cv
416.529 41.2295 416.424 43.4078 414.921 43.629 cv
414.78 43.65 414.638 43.6592 414.497 43.6592 cv
cp
f
407.085 30.4112 mo
406.856 30.4112 406.65 30.253 406.597 30.0206 cv
406.538 29.751 406.706 29.4835 406.976 29.4234 cv
409.204 28.9244 li
409.477 28.8643 409.741 29.0338 409.801 29.3028 cv
409.861 29.5723 409.692 29.8399 409.422 29.9 cv
407.195 30.399 li
407.158 30.4073 407.121 30.4112 407.085 30.4112 cv
cp
f
417.204 30.9122 mo
417.16 30.9122 417.114 30.9063 417.068 30.8931 cv
413.55 29.8931 li
413.285 29.8174 413.13 29.5411 413.206 29.2754 cv
413.282 29.0103 413.554 28.8521 413.824 28.9312 cv
417.341 29.9312 li
417.607 30.0069 417.761 30.2833 417.685 30.5489 cv
417.622 30.7686 417.422 30.9122 417.204 30.9122 cv
cp
f
415.26 32.7159 mo
415.151 32.7159 415.04 32.6802 414.949 32.607 cv
414.124 31.9512 li
413.909 31.7794 413.872 31.4649 414.044 31.2486 cv
414.216 31.0328 414.534 30.9981 414.747 31.169 cv
415.572 31.8248 li
415.788 31.9966 415.824 32.3111 415.652 32.5274 cv
415.553 32.6514 415.407 32.7159 415.26 32.7159 cv
cp
f
408.123 32.5352 mo
408.001 32.5352 407.878 32.4908 407.782 32.4004 cv
407.094 31.7574 li
406.893 31.5689 406.882 31.2525 407.071 31.0504 cv
407.26 30.8502 407.576 30.8384 407.778 31.0269 cv
408.465 31.67 li
408.666 31.8585 408.677 32.1749 408.489 32.3765 cv
408.39 32.482 408.257 32.5352 408.123 32.5352 cv
cp
f
424.134 36.8502 mo
424.015 39.4786 425.247 41.67 426.886 41.7442 cv
428.525 41.8184 429.951 39.7476 430.07 37.1192 cv
430.188 34.4908 428.956 32.2999 427.318 32.2252 cv
425.678 32.1509 424.253 34.2217 424.134 36.8502 cv
cp
.168627 .215686 .317647 rgb
f
424.818 36.8814 mo
424.699 39.5098 425.931 41.7007 427.57 41.775 cv
429.209 41.8492 430.634 39.7789 430.753 37.15 cv
430.872 34.5215 429.64 32.3306 428.001 32.2564 cv
426.363 32.1822 424.937 34.253 424.818 36.8814 cv
cp
.223529 .278431 .419608 rgb
f
428.44 31.7501 mo
428.38 32.96 428.2 33.71 428.18 33.7398 cv
428.11 34.0201 427.86 34.1998 427.579 34.1602 cv
427.499 34.1602 li
427.2 34.0801 427.02 33.7798 427.09 33.48 cv
427.12 33.3799 427.249 32.8301 427.329 31.98 cv
427.66 28.6002 425.85 18.8101 415.42 14.8199 cv
416.02 14.6402 416.63 14.4898 417.26 14.3799 cv
426.53 18.6299 428.68 28.0899 428.44 31.7501 cv
cp
f
419.291 45.0079 mo
418.776 45.0079 418.24 44.9776 417.68 44.9112 cv
417.372 44.8746 417.152 44.5953 417.188 44.2872 cv
417.225 43.9781 417.509 43.7584 417.813 43.795 cv
424.221 44.5538 427.465 40.1783 427.6 39.9913 cv
427.781 39.7383 428.132 39.6822 428.384 39.8638 cv
428.635 40.0445 428.694 40.3946 428.513 40.6465 cv
428.375 40.8389 425.314 45.0079 419.291 45.0079 cv
cp
f
413.158 44.1802 mo
413.121 44.9732 414.236 45.668 415.647 45.732 cv
417.057 45.7955 418.23 45.2046 418.266 44.4117 cv
418.301 43.6187 417.187 42.9244 415.777 42.8604 cv
414.367 42.7964 413.194 43.3873 413.158 44.1802 cv
cp
f
217.42 167.718 mo
217.42 176.228 215.14 184.209 211.15 191.079 cv
211 191.338 210.84 191.598 210.68 191.858 cv
210.31 192.478 209.92 193.098 209.51 193.698 cv
209.34 193.948 209.17 194.198 208.98 194.448 cv
202.9 203.159 193.9 209.659 183.42 212.608 cv
183.2 212.669 182.97 212.728 182.75 212.789 cv
178.94 213.798 174.93 214.338 170.8 214.338 cv
154.69 214.338 140.48 206.169 132.13 193.739 cv
131.34 192.588 130.61 191.388 129.94 190.169 cv
126.27 183.508 124.18 175.858 124.18 167.718 cv
124.18 141.968 145.05 121.098 170.8 121.098 cv
196.55 121.098 217.42 141.968 217.42 167.718 cv
cp
.909804 .882353 .937255 rgb
f
205.65 177.23 mo
205.81 201.03 182.12 197.03 182.12 197.03 cv
159.69 188.16 li
159.69 188.16 137.22 176.28 151.95 162.53 cv
151.95 162.53 146.8 139.4 165.04 134.76 cv
165.12 134.73 165.2 134.71 165.28 134.69 cv
165.88 134.55 166.46 134.43 167.02 134.35 cv
183.91 131.73 185.36 154.46 185.36 154.46 cv
185.36 154.46 205.52 158.19 205.65 177.23 cv
cp
0 0 0 rgb
f
154.869 155.725 mo
154.75 158.353 155.982 160.544 157.621 160.619 cv
159.26 160.693 160.685 158.622 160.804 155.994 cv
160.923 153.365 159.691 151.174 158.052 151.1 cv
156.413 151.025 154.988 153.096 154.869 155.725 cv
cp
.956863 .596078 .239216 rgb
f
208.98 194.452 mo
202.9 203.162 193.9 209.662 183.42 212.612 cv
183.2 212.671 182.97 212.732 182.75 212.792 cv
178.94 213.801 174.93 214.341 170.8 214.341 cv
168.87 214.341 166.97 214.221 165.1 214.002 cv
163.53 213.801 161.98 213.532 160.46 213.192 cv
148.7 210.532 138.64 203.432 132.13 193.742 cv
138.39 185.182 146.24 178.702 151.58 176.402 cv
159.48 173.002 172.01 170.721 183.58 174.032 cv
183.61 174.042 183.65 174.042 183.69 174.051 cv
187.17 175.051 190.55 176.551 193.7 178.682 cv
200.51 183.282 205.47 188.622 208.98 194.452 cv
cp
.407843 .462745 .666667 rgb
f
162.293 165.899 mo
162.295 166.17 li
162.523 171.273 li
162.685 175.274 li
162.685 175.274 163.373 176.878 168.031 176.577 cv
174.273 176.148 175.256 172.793 175.256 172.793 cv
175.522 163.413 li
173.629 163.773 li
162.293 165.899 li
cp
.956863 .517647 .384314 rgb
f
162.295 166.17 mo
162.523 171.273 li
165.556 170.905 171.077 169.591 173.308 164.82 cv
173.479 164.432 173.593 164.083 173.629 163.793 cv
162.314 166.092 li
162.295 166.17 li
cp
0 0 0 rgb
f
160.316 141.746 mo
160.316 141.746 154.511 155.033 156.602 162.498 cv
158.694 169.962 165.496 168.788 169.564 167.345 cv
173.634 165.901 175.522 163.406 175.522 163.406 cv
175.522 163.406 179.324 164.695 181.866 161.16 cv
184.408 157.626 182.843 153.566 180.673 152.636 cv
178.502 151.706 175.921 153.273 175.921 153.273 cv
177.944 149.412 li
177.944 149.412 169.434 129.788 160.316 141.746 cv
cp
.956863 .517647 .384314 rgb
f
162.118 139.779 mo
162.118 139.779 161.698 146.848 168.809 150.061 cv
175.921 153.273 180.673 152.636 180.673 152.636 cv
180.211 143.417 li
170.555 135.134 li
163.35 136.283 li
162.118 139.779 li
cp
0 0 0 rgb
f
175.44 151.234 mo
175.467 155.26 li
179.048 151.729 li
175.44 151.234 li
cp
f
210.68 191.858 mo
210.31 192.478 209.92 193.098 209.51 193.698 cv
209.34 193.948 209.17 194.198 208.98 194.448 cv
202.9 203.159 193.9 209.659 183.42 212.608 cv
183.2 212.669 182.97 212.728 182.75 212.789 cv
183.39 173.999 li
183.39 173.999 183.46 174.008 183.58 174.029 cv
183.61 174.039 183.65 174.039 183.69 174.048 cv
185.99 174.438 201.06 177.419 209.15 189.279 cv
209.7 190.068 210.2 190.938 210.68 191.858 cv
cp
.407843 .462745 .666667 rgb
f
158.665 146.599 mo
158.462 146.599 158.273 146.468 158.209 146.264 cv
158.131 146.012 158.271 145.744 158.523 145.665 cv
161.171 144.837 li
161.425 144.758 161.691 144.899 161.77 145.15 cv
161.849 145.402 161.708 145.67 161.456 145.749 cv
158.808 146.577 li
158.761 146.592 158.712 146.599 158.665 146.599 cv
cp
0 0 0 rgb
f
176.193 159.475 mo
176.064 159.475 175.935 159.422 175.841 159.32 cv
175.663 159.126 175.675 158.824 175.869 158.645 cv
179.965 154.876 li
180.159 154.697 180.462 154.71 180.641 154.904 cv
180.819 155.098 180.807 155.4 180.613 155.579 cv
176.517 159.348 li
176.425 159.433 176.309 159.475 176.193 159.475 cv
cp
f
180.342 158.979 mo
180.278 158.979 180.213 158.966 180.151 158.939 cv
177.706 157.865 li
177.465 157.759 177.355 157.477 177.461 157.236 cv
177.567 156.994 177.847 156.884 178.09 156.99 cv
180.535 158.064 li
180.776 158.169 180.886 158.452 180.78 158.693 cv
180.702 158.872 180.526 158.979 180.342 158.979 cv
cp
f
159.484 153.301 mo
159.452 153.301 159.419 153.297 159.387 153.291 cv
159.128 153.237 158.962 152.984 159.016 152.726 cv
159.504 150.374 li
158.544 149.267 li
158.371 149.067 158.393 148.766 158.592 148.593 cv
158.79 148.42 159.092 148.44 159.266 148.641 cv
160.381 149.926 li
160.478 150.039 160.518 150.19 160.488 150.336 cv
159.952 152.92 li
159.905 153.146 159.706 153.301 159.484 153.301 cv
cp
f
167.496 153.709 mo
167.463 153.709 167.431 153.705 167.398 153.698 cv
167.14 153.645 166.974 153.392 167.027 153.133 cv
167.515 150.781 li
166.555 149.674 li
166.382 149.475 166.404 149.173 166.603 149.001 cv
166.801 148.828 167.104 148.849 167.277 149.048 cv
168.392 150.334 li
168.49 150.446 168.529 150.598 168.499 150.744 cv
167.963 153.328 li
167.916 153.553 167.717 153.709 167.496 153.709 cv
cp
f
161.069 159.135 mo
160.848 159.135 160.649 158.981 160.602 158.755 cv
159.712 154.507 161.77 152.367 161.858 152.278 cv
162.044 152.089 162.346 152.089 162.534 152.274 cv
162.721 152.459 162.724 152.76 162.54 152.948 cv
162.467 153.023 160.759 154.841 161.538 158.559 cv
161.592 158.817 161.426 159.071 161.168 159.125 cv
161.135 159.132 161.101 159.135 161.069 159.135 cv
cp
f
163.987 161.173 mo
164.748 161.964 165.252 162.266 165.406 162.266 cv
165.492 162.256 165.811 162.07 166.203 161.581 cv
166.542 161.157 166.712 160.785 166.761 160.596 cv
166.457 160.583 165.644 160.696 163.987 161.173 cv
cp
165.386 163.222 mo
165.102 163.222 164.423 163.09 163.008 161.523 cv
162.844 161.341 162.785 161.095 162.85 160.865 cv
162.917 160.625 163.106 160.437 163.356 160.362 cv
166.768 159.343 167.213 159.678 167.427 159.84 cv
167.597 159.967 167.853 160.276 167.664 160.912 cv
167.405 161.782 166.319 163.162 165.471 163.219 cv
165.448 163.221 165.42 163.222 165.386 163.222 cv
cp
f
148.216 191.638 mo
148.165 191.698 143.389 196.818 144.295 206.025 cv
144.008 205.84 143.731 205.645 143.455 205.441 cv
143.376 205.389 143.307 205.329 143.228 205.267 cv
142.64 196.126 147.436 191.015 147.497 190.946 cv
147.691 190.75 148.001 190.745 148.208 190.928 cv
148.405 191.122 148.409 191.442 148.216 191.638 cv
cp
.968627 .701961 .411765 rgb
f
168.65 177.421 mo
165.1 214.002 li
163.53 213.801 161.98 213.532 160.46 213.192 cv
165.32 178.261 li
168.65 177.421 li
cp
.572549 .705882 .917647 rgb
f
162.601 173.201 mo
162.601 173.201 157.86 183.693 158.995 183.529 cv
160.129 183.364 167.115 177.683 167.115 177.683 cv
167.115 177.683 171.689 184.111 173.284 184.231 cv
174.879 184.35 175.4 172.727 175.4 172.727 cv
175.4 172.727 174.193 176.013 168.239 176.571 cv
162.284 177.128 162.601 173.201 162.601 173.201 cv
cp
.901961 .956863 1 rgb
f
175.58 156.963 mo
175.46 159.591 176.692 161.782 178.331 161.857 cv
179.97 161.931 181.395 159.86 181.515 157.232 cv
181.634 154.603 180.401 152.412 178.763 152.338 cv
177.123 152.264 175.698 154.335 175.58 156.963 cv
cp
.956863 .596078 .239216 rgb
f
176.263 156.994 mo
176.144 159.623 177.376 161.814 179.015 161.888 cv
180.654 161.962 182.08 159.891 182.199 157.263 cv
182.318 154.634 181.085 152.443 179.447 152.369 cv
177.808 152.294 176.382 154.365 176.263 156.994 cv
cp
.968627 .701961 .411765 rgb
f
170.736 165.121 mo
170.221 165.121 169.684 165.09 169.126 165.024 cv
168.817 164.987 168.597 164.708 168.634 164.4 cv
168.67 164.092 168.946 163.872 169.258 163.908 cv
175.668 164.667 178.91 160.291 179.045 160.104 cv
179.227 159.853 179.577 159.797 179.83 159.977 cv
180.081 160.158 180.139 160.507 179.958 160.759 cv
179.82 160.952 176.758 165.121 170.736 165.121 cv
cp
f
164.603 164.293 mo
164.567 165.086 165.681 165.78 167.092 165.844 cv
168.502 165.908 169.675 165.317 169.711 164.524 cv
169.747 163.732 168.632 163.037 167.222 162.973 cv
165.811 162.909 164.639 163.5 164.603 164.293 cv
cp
f
179.68 154.59 mo
179.68 154.89 179.43 155.14 179.12 155.14 cv
178.8 155.14 178.55 154.88 178.56 154.57 cv
178.74 139.9 167.02 135.41 165.04 134.76 cv
165.12 134.73 165.2 134.71 165.28 134.69 cv
165.88 134.55 166.46 134.43 167.02 134.35 cv
171.03 136.19 179.84 141.71 179.68 154.59 cv
cp
f
341.6 288.76 mo
341.6 295.02 340.37 300.99 338.13 306.44 cv
337.93 306.94 337.71 307.43 337.48 307.92 cv
331.86 320.39 320.91 329.95 307.52 333.67 cv
306.57 333.94 305.6 334.18 304.62 334.38 cv
304.289 334.45 303.97 334.51 303.64 334.57 cv
300.829 335.11 297.93 335.38 294.98 335.38 cv
293.329 335.38 291.7 335.3 290.09 335.13 cv
289.039 335.02 287.999 334.87 286.97 334.69 cv
285.61 334.45 284.28 334.16 282.96 333.81 cv
281.18 333.34 279.43 332.76 277.74 332.08 cv
273.829 330.53 270.18 328.46 266.87 325.96 cv
261.6 321.98 257.21 316.9 254.03 311.07 cv
250.41 304.44 248.35 296.84 248.35 288.76 cv
248.35 263.01 269.23 242.14 294.98 242.14 cv
320.73 242.14 341.6 263.01 341.6 288.76 cv
cp
.909804 .882353 .937255 rgb
f
278.487 276.7 mo
278.209 279.493 279.398 281.898 281.139 282.07 cv
282.881 282.243 284.518 280.118 284.794 277.324 cv
285.071 274.53 283.883 272.126 282.141 271.954 cv
280.4 271.781 278.763 273.906 278.487 276.7 cv
cp
.956863 .596078 .239216 rgb
f
307.52 333.669 mo
303.53 334.789 299.32 335.378 294.98 335.378 cv
292.25 335.378 289.57 335.148 286.97 334.688 cv
285.61 334.448 284.28 334.159 282.96 333.808 cv
281.18 333.338 279.43 332.758 277.74 332.079 cv
281.05 298.749 li
299.1 294.489 li
306.28 296.619 li
307.52 333.669 li
cp
.639216 .482353 .564706 rgb
f
301.4 288.67 mo
296.67 287.79 283.13 266.01 283.13 266.01 cv
283.13 266.01 276.39 257.7 278.21 256.6 cv
280.03 255.51 281.76 257.18 281.76 257.18 cv
281.76 257.18 287.789 256.23 293.31 256.01 cv
294.01 255.98 294.7 255.96 295.37 255.96 cv
297.4 255.95 299.24 256.08 300.51 256.44 cv
305.52 257.86 308.88 266.07 308.88 266.07 cv
308.88 266.07 311.39 265.84 312.45 269.26 cv
313.52 272.69 306.12 289.55 301.4 288.67 cv
cp
0 0 0 rgb
f
301.342 285.954 mo
301.575 297.424 li
301.575 297.424 299.573 300.763 292.873 301.445 cv
287.883 301.952 286.104 300.857 286.104 300.857 cv
286.683 295.034 li
287.256 289.355 li
299.319 286.445 li
301.342 285.954 li
cp
.956863 .517647 .384314 rgb
f
299.319 286.445 mo
299.296 286.758 299.185 287.13 299.008 287.558 cv
296.557 293.339 289.565 294.717 286.683 295.034 cv
287.256 289.355 li
299.319 286.445 li
cp
0 0 0 rgb
f
284.169 263.261 mo
284.169 263.261 278.441 277.764 280.975 285.707 cv
283.51 293.649 290.774 292.126 295.092 290.419 cv
299.411 288.711 301.344 285.957 301.344 285.957 cv
301.344 285.957 305.479 287.196 308.076 283.299 cv
310.672 279.403 308.834 275.1 306.466 274.184 cv
304.098 273.267 301.384 275.051 301.384 275.051 cv
303.41 270.823 li
303.41 270.823 293.509 250.059 284.169 263.261 cv
cp
.956863 .517647 .384314 rgb
f
284.169 263.261 mo
284.169 263.261 288.634 261.464 290.538 263.039 cv
292.444 264.613 294.689 277.909 301.384 275.051 cv
308.079 272.193 304.616 263.674 304.616 263.674 cv
304.616 263.674 287.776 249.255 284.169 263.261 cv
cp
0 0 0 rgb
f
287.39 294.448 mo
287.39 294.448 285.26 314.108 282.96 333.808 cv
270.49 330.499 260.079 322.148 254.03 311.068 cv
257.73 307.188 263.65 300.698 268.76 298.628 cv
277.68 295.008 287.39 294.448 287.39 294.448 cv
cp
.25098 .313726 .498039 rgb
f
292.216 301.559 mo
289.203 301.559 286.86 300.901 286.658 300.842 cv
286.393 300.765 286.241 300.488 286.317 300.223 cv
286.394 299.958 286.671 299.802 286.936 299.881 cv
287.038 299.911 296.916 302.676 302.138 296.548 cv
302.318 296.337 302.634 296.313 302.843 296.492 cv
303.053 296.671 303.079 296.987 302.9 297.197 cv
299.902 300.714 295.629 301.559 292.216 301.559 cv
cp
.572549 .705882 .917647 rgb
f
337.48 307.92 mo
331.86 320.39 320.91 329.95 307.52 333.67 cv
306.57 333.94 305.6 334.18 304.62 334.38 cv
304.289 334.45 303.97 334.51 303.64 334.57 cv
302.289 319.32 301.51 292.66 301.51 292.66 cv
301.51 292.66 322.28 292.97 337.48 307.92 cv
cp
.25098 .313726 .498039 rgb
f
301.897 281.448 mo
301.774 281.448 301.651 281.402 301.555 281.309 cv
301.36 281.121 301.354 280.809 301.543 280.614 cv
305.158 276.872 li
305.345 276.676 305.657 276.669 305.853 276.86 cv
306.048 277.048 306.054 277.36 305.865 277.555 cv
302.25 281.297 li
302.155 281.397 302.026 281.448 301.897 281.448 cv
cp
0 0 0 rgb
f
306.786 280.534 mo
306.745 280.534 306.703 280.529 306.662 280.517 cv
303.541 279.704 li
303.279 279.634 303.121 279.366 303.19 279.103 cv
303.258 278.839 303.53 278.675 303.789 278.752 cv
306.91 279.565 li
307.172 279.634 307.33 279.903 307.262 280.166 cv
307.204 280.387 307.004 280.534 306.786 280.534 cv
cp
f
283.224 269.776 mo
283.12 269.776 283.015 269.743 282.926 269.674 cv
282.714 269.511 282.669 269.211 282.829 268.996 cv
282.868 268.944 283.801 267.721 286.174 268.059 cv
286.443 268.098 286.629 268.347 286.591 268.617 cv
286.553 268.886 286.31 269.067 286.034 269.034 cv
284.278 268.781 283.641 269.555 283.614 269.588 cv
283.516 269.711 283.371 269.776 283.224 269.776 cv
cp
f
294.029 269.912 mo
293.917 269.912 293.805 269.875 293.713 269.797 cv
292.459 268.752 291.033 269.118 290.972 269.134 cv
290.713 269.207 290.441 269.05 290.37 268.789 cv
290.298 268.527 290.451 268.258 290.711 268.186 cv
290.791 268.164 292.684 267.657 294.344 269.042 cv
294.552 269.215 294.58 269.526 294.407 269.735 cv
294.309 269.851 294.169 269.912 294.029 269.912 cv
cp
f
283.7 275.492 mo
283.388 275.468 283.186 275.231 283.208 274.96 cv
283.425 272.29 li
283.447 272.019 283.683 271.814 283.955 271.839 cv
284.226 271.861 284.428 272.098 284.406 272.37 cv
284.189 275.04 li
284.168 275.296 283.953 275.492 283.7 275.492 cv
cp
f
291.598 275.818 mo
291.287 275.794 291.084 275.557 291.107 275.286 cv
291.324 272.615 li
291.345 272.344 291.586 272.138 291.854 272.165 cv
292.124 272.186 292.327 272.423 292.304 272.695 cv
292.087 275.366 li
292.067 275.623 291.851 275.818 291.598 275.818 cv
cp
f
285.618 281.866 mo
285.43 281.866 285.25 281.757 285.168 281.575 cv
283.494 277.828 286.004 274.807 286.112 274.681 cv
286.288 274.476 286.597 274.45 286.804 274.625 cv
287.011 274.799 287.038 275.11 286.863 275.317 cv
286.772 275.425 284.65 278.003 286.067 281.172 cv
286.178 281.42 286.067 281.711 285.819 281.823 cv
285.753 281.852 285.685 281.866 285.618 281.866 cv
cp
f
288.742 284.266 mo
288.471 284.266 288.251 284.046 288.25 283.776 cv
288.249 283.504 288.469 283.284 288.74 283.282 cv
288.81 283.282 290.477 283.252 291.076 281.822 cv
291.181 281.57 291.472 281.456 291.719 281.557 cv
291.97 281.663 292.088 281.951 291.984 282.201 cv
291.129 284.243 288.838 284.266 288.742 284.266 cv
cp
f
300.481 278.878 mo
300.204 281.671 301.392 284.076 303.134 284.249 cv
304.875 284.42 306.512 282.295 306.788 279.503 cv
307.066 276.709 305.877 274.304 304.136 274.131 cv
302.394 273.959 300.757 276.084 300.481 278.878 cv
cp
.956863 .596078 .239216 rgb
f
301.207 278.95 mo
300.931 281.743 302.119 284.148 303.861 284.32 cv
305.603 284.493 307.24 282.368 307.516 279.574 cv
307.792 276.781 306.605 274.376 304.863 274.204 cv
303.121 274.031 301.485 276.156 301.207 278.95 cv
cp
.968627 .701961 .411765 rgb
f
295.587 287.313 mo
294.818 287.313 294.004 287.247 293.145 287.098 cv
292.819 287.042 292.6 286.731 292.657 286.405 cv
292.713 286.079 293.017 285.858 293.35 285.917 cv
300.139 287.095 303.84 282.613 303.994 282.421 cv
304.203 282.165 304.579 282.125 304.836 282.331 cv
305.094 282.538 305.136 282.914 304.929 283.172 cv
304.778 283.362 301.538 287.313 295.587 287.313 cv
cp
f
288.369 286.062 mo
288.286 286.905 289.433 287.708 290.932 287.856 cv
292.431 288.004 293.714 287.442 293.797 286.599 cv
293.881 285.756 292.733 284.953 291.234 284.804 cv
289.735 284.656 288.452 285.219 288.369 286.062 cv
cp
f
304.98 276.58 mo
304.97 276.9 304.69 277.15 304.36 277.14 cv
304.02 277.12 303.76 276.83 303.789 276.5 cv
304.579 264.5 297.55 258.51 293.31 256.01 cv
294.01 255.98 294.7 255.96 295.37 255.96 cv
299.829 259.1 305.72 265.4 304.98 276.58 cv
cp
f
341.6 167.718 mo
341.6 179.169 337.47 189.659 330.63 197.768 cv
329.77 198.789 328.86 199.779 327.92 200.718 cv
326.4 202.239 324.77 203.659 323.04 204.948 cv
322.2 205.588 321.329 206.198 320.44 206.779 cv
320.34 206.848 320.24 206.909 320.13 206.968 cv
318.87 207.789 317.56 208.548 316.21 209.228 cv
315.9 209.388 315.59 209.548 315.27 209.698 cv
313.82 210.398 312.329 211.029 310.81 211.579 cv
308.79 212.308 306.71 212.909 304.57 213.348 cv
301.47 213.999 298.27 214.338 294.98 214.338 cv
293.57 214.338 292.17 214.279 290.79 214.148 cv
289.35 214.018 287.93 213.829 286.53 213.558 cv
285.75 213.419 284.98 213.258 284.22 213.079 cv
282 212.558 279.85 211.878 277.77 211.039 cv
275.92 210.308 274.13 209.459 272.4 208.499 cv
272.2 208.388 272 208.279 271.81 208.159 cv
270.63 207.499 269.49 206.789 268.39 206.008 cv
267.44 205.358 266.51 204.659 265.61 203.919 cv
265.5 203.838 265.4 203.758 265.29 203.669 cv
264.02 202.608 262.8 201.489 261.64 200.308 cv
261.31 199.978 260.99 199.638 260.68 199.298 cv
259.79 198.338 258.94 197.338 258.14 196.308 cv
257.35 195.289 256.6 194.239 255.9 193.159 cv
251.13 185.838 248.35 177.108 248.35 167.718 cv
248.35 141.968 269.23 121.098 294.98 121.098 cv
320.73 121.098 341.6 141.968 341.6 167.718 cv
cp
.909804 .882353 .937255 rgb
f
307.36 162.02 mo
286.18 159.88 li
285.18 159.78 li
282.49 159.51 li
282.49 159.51 280.65 152.84 282.329 148.27 cv
284.01 143.71 287.94 145.57 287.94 145.57 cv
287.94 145.57 289.69 144.07 292.88 142.75 cv
293.95 142.31 295.16 141.9 296.52 141.57 cv
297.98 141.21 299.61 140.95 301.4 140.85 cv
309.92 140.38 307.14 146.18 307.14 146.18 cv
307.14 146.18 309.03 147.52 309.8 151.73 cv
310.94 157.95 307.36 162.02 307.36 162.02 cv
cp
0 0 0 rgb
f
309.611 160.918 mo
309.887 163.535 308.788 165.795 307.157 165.968 cv
305.526 166.14 303.979 164.159 303.703 161.542 cv
303.426 158.925 304.525 156.665 306.157 156.492 cv
307.788 156.32 309.334 158.301 309.611 160.918 cv
cp
.556863 .396078 .490196 rgb
f
330.63 197.768 mo
329.77 198.789 328.86 199.779 327.92 200.718 cv
326.4 202.239 324.77 203.659 323.04 204.948 cv
322.2 205.588 321.329 206.198 320.44 206.779 cv
320.34 206.848 320.24 206.909 320.13 206.968 cv
320.41 186.468 li
320.41 186.468 325.24 190.968 330.63 197.768 cv
cp
.968627 .701961 .411765 rgb
f
316.21 209.228 mo
315.9 209.388 315.59 209.548 315.27 209.698 cv
311.91 211.329 308.32 212.568 304.57 213.348 cv
301.47 213.999 298.27 214.338 294.98 214.338 cv
293.57 214.338 292.17 214.279 290.79 214.148 cv
289.35 214.018 287.93 213.829 286.53 213.558 cv
285.75 213.419 284.98 213.258 284.22 213.079 cv
282 212.558 279.85 211.878 277.77 211.039 cv
287.49 178.079 li
287.49 178.079 295.179 173.718 302.903 177.584 cv
307.54 179.903 313.76 196.638 316.21 209.228 cv
cp
.407843 .713726 .847059 rgb
f
303.66 177.838 mo
288.88 178.768 li
288.88 178.768 287.4 194.128 286.53 213.558 cv
285.75 213.419 284.98 213.258 284.22 213.079 cv
280.03 212.088 276.07 210.539 272.4 208.499 cv
272.2 208.388 272 208.279 271.81 208.159 cv
270.63 207.499 269.49 206.789 268.39 206.008 cv
267.44 205.358 266.51 204.659 265.61 203.919 cv
265.5 203.838 265.4 203.758 265.29 203.669 cv
264.02 202.608 262.8 201.489 261.64 200.308 cv
261.31 199.978 260.99 199.638 260.68 199.298 cv
260.96 192.948 261.829 188.218 263.6 186.568 cv
271.46 179.258 290.96 176.818 290.96 176.818 cv
300.079 176.688 li
300.079 176.688 301.52 177.108 303.66 177.838 cv
cp
.968627 .701961 .411765 rgb
f
323.04 204.948 mo
322.2 205.588 321.329 206.198 320.44 206.779 cv
319.079 207.669 317.67 208.489 316.21 209.228 cv
315.9 209.388 315.59 209.548 315.27 209.698 cv
313.82 210.398 312.329 211.029 310.81 211.579 cv
310.8 211.459 310.812 211.335 310.78 211.218 cv
304.533 188.801 302.903 177.584 302.903 177.584 cv
308.533 179.513 319.78 183.888 321.7 188.318 cv
322.43 190.008 322.84 196.468 323.04 204.948 cv
cp
f
294.095 146.158 mo
294.095 146.158 285.391 126.726 275.454 136.599 cv
267.142 144.858 280.035 157.586 287.49 153.956 cv
294.945 150.327 294.095 146.158 294.095 146.158 cv
cp
0 0 0 rgb
f
288.754 169.297 mo
289.161 179.693 li
289.161 179.693 291.152 182.608 297.252 182.865 cv
301.797 183.056 303.141 180.673 303.141 180.673 cv
301.688 171.62 li
290.613 169.632 li
288.754 169.297 li
cp
.956863 .517647 .384314 rgb
f
288.746 168.663 mo
288.783 168.946 288.904 169.277 289.086 169.654 cv
291.616 174.756 299.886 176.597 302.512 176.729 cv
301.688 171.62 li
288.746 168.663 li
cp
0 0 0 rgb
f
303.08 147.833 mo
303.08 147.833 309.045 160.654 307.178 167.98 cv
305.31 175.305 298.653 174.316 294.652 173.003 cv
290.652 171.689 288.752 169.299 288.752 169.299 cv
288.752 169.299 285.077 170.643 282.517 167.256 cv
279.956 163.868 281.39 159.875 283.484 158.918 cv
285.579 157.961 288.131 159.43 288.131 159.43 cv
286.071 155.711 li
286.071 155.711 293.917 136.384 303.08 147.833 cv
cp
.956863 .517647 .384314 rgb
f
288.131 159.43 mo
288.131 159.43 293.718 160.476 297.502 154.222 cv
301.286 147.968 300.895 145.427 300.895 145.427 cv
304.841 151.773 li
304.841 151.773 305.641 147.323 303.827 144.519 cv
302.012 141.714 300.177 142.327 300.177 142.327 cv
287.935 145.567 li
284.838 155.46 li
288.131 159.43 li
cp
0 0 0 rgb
f
302.864 164.347 mo
302.822 164.347 302.78 164.341 302.737 164.329 cv
302.496 164.259 302.359 164.008 302.428 163.768 cv
303.119 161.396 301.304 158.858 301.286 158.833 cv
301.138 158.63 301.183 158.347 301.385 158.2 cv
301.588 158.052 301.87 158.096 302.018 158.299 cv
302.104 158.417 304.115 161.217 303.299 164.021 cv
303.242 164.219 303.06 164.347 302.864 164.347 cv
cp
f
287.676 165.556 mo
287.558 165.556 287.441 165.51 287.352 165.419 cv
283.77 161.749 li
283.595 161.57 283.599 161.283 283.778 161.108 cv
283.956 160.934 284.244 160.938 284.418 161.116 cv
288 164.786 li
288.175 164.965 288.171 165.252 287.993 165.427 cv
287.905 165.513 287.79 165.556 287.676 165.556 cv
cp
f
283.933 164.619 mo
283.716 164.619 283.525 164.463 283.487 164.241 cv
283.446 163.995 283.612 163.761 283.859 163.719 cv
286.287 163.31 li
286.528 163.271 286.767 163.434 286.809 163.681 cv
286.85 163.928 286.684 164.162 286.437 164.203 cv
284.009 164.613 li
283.984 164.617 283.958 164.619 283.933 164.619 cv
cp
f
305.21 153.701 mo
305.186 153.701 305.163 153.699 305.138 153.695 cv
302.831 153.328 li
302.584 153.289 302.415 153.056 302.455 152.809 cv
302.495 152.561 302.727 152.392 302.974 152.433 cv
305.281 152.801 li
305.528 152.84 305.697 153.072 305.657 153.319 cv
305.621 153.543 305.429 153.701 305.21 153.701 cv
cp
f
295.666 155.346 mo
295.503 155.346 295.346 155.257 295.265 155.103 cv
295.149 154.881 295.235 154.607 295.456 154.491 cv
299.204 152.528 li
299.422 152.412 299.698 152.497 299.815 152.719 cv
299.931 152.94 299.845 153.214 299.623 153.331 cv
295.876 155.294 li
295.81 155.329 295.738 155.346 295.666 155.346 cv
cp
f
305.284 159.02 mo
305.092 159.02 304.914 158.898 304.852 158.706 cv
304.101 156.377 li
304.055 156.232 304.083 156.075 304.178 155.956 cv
304.884 155.067 li
305.039 154.871 305.324 154.84 305.521 154.994 cv
305.716 155.15 305.749 155.435 305.593 155.631 cv
305.038 156.33 li
305.715 158.428 li
305.791 158.666 305.661 158.921 305.422 158.998 cv
305.376 159.013 305.329 159.02 305.284 159.02 cv
cp
f
297.841 159.74 mo
297.65 159.74 297.472 159.618 297.41 159.426 cv
296.659 157.097 li
296.612 156.949 296.643 156.787 296.742 156.668 cv
297.717 155.496 li
297.878 155.304 298.163 155.277 298.356 155.438 cv
298.548 155.598 298.575 155.884 298.414 156.076 cv
297.598 157.056 li
298.273 159.148 li
298.349 159.386 298.218 159.641 297.98 159.718 cv
297.934 159.733 297.887 159.74 297.841 159.74 cv
cp
f
301.035 167.788 mo
299.41 167.788 297.619 166.059 297.383 165.824 cv
297.205 165.648 297.205 165.361 297.381 165.184 cv
297.558 165.007 297.845 165.005 298.022 165.182 cv
298.616 165.772 300.538 167.324 301.547 166.755 cv
301.766 166.632 302.039 166.708 302.165 166.926 cv
302.288 167.144 302.212 167.42 301.995 167.544 cv
301.691 167.715 301.366 167.788 301.035 167.788 cv
cp
f
268.39 206.008 mo
267.44 205.358 266.51 204.659 265.61 203.919 cv
265.5 203.838 265.4 203.758 265.29 203.669 cv
264.02 202.608 262.8 201.489 261.64 200.308 cv
260.4 199.039 259.23 197.709 258.14 196.308 cv
257.35 195.289 256.6 194.239 255.9 193.159 cv
262.18 187.148 267.38 183.848 267.38 183.848 cv
268.39 206.008 li
cp
.968627 .701961 .411765 rgb
f
297.939 183.373 mo
292.862 183.373 288.804 180.432 288.633 180.305 cv
288.411 180.142 288.363 179.83 288.526 179.607 cv
288.69 179.384 289.002 179.336 289.225 179.5 cv
289.264 179.529 293.199 182.373 297.942 182.373 cv
297.982 182.373 298.021 182.372 298.061 182.372 cv
302.448 182.328 303.148 179.883 303.175 179.779 cv
303.246 179.514 303.521 179.357 303.783 179.42 cv
304.048 179.489 304.21 179.756 304.145 180.022 cv
304.112 180.157 303.274 183.32 298.071 183.372 cv
298.027 183.372 297.982 183.373 297.939 183.373 cv
cp
1 1 1 rgb
f
289.472 162.862 mo
289.748 165.479 288.65 167.74 287.018 167.912 cv
285.386 168.085 283.84 166.103 283.564 163.486 cv
283.288 160.87 284.386 158.608 286.017 158.436 cv
287.649 158.264 289.196 160.246 289.472 162.862 cv
cp
.556863 .396078 .490196 rgb
f
288.79 162.934 mo
289.067 165.551 287.968 167.812 286.337 167.984 cv
284.705 168.156 283.159 166.175 282.882 163.558 cv
282.606 160.941 283.704 158.681 285.336 158.508 cv
286.968 158.336 288.514 160.317 288.79 162.934 cv
cp
.639216 .482353 .564706 rgb
f
294.029 170.739 mo
288.502 170.739 285.471 167.09 285.329 166.914 cv
285.133 166.673 285.17 166.321 285.411 166.125 cv
285.652 165.93 286.003 165.966 286.201 166.205 cv
286.347 166.383 289.853 170.557 296.198 169.417 cv
296.507 169.356 296.795 169.564 296.85 169.87 cv
296.906 170.175 296.703 170.467 296.397 170.522 cv
295.563 170.672 294.773 170.739 294.029 170.739 cv
cp
f
300.868 169.522 mo
300.951 170.311 299.88 171.071 298.476 171.219 cv
297.072 171.368 295.867 170.848 295.783 170.058 cv
295.7 169.269 296.77 168.509 298.174 168.361 cv
299.579 168.212 300.785 168.732 300.868 169.522 cv
cp
f
296.52 141.57 mo
292.35 143.9 286.31 149.08 286.27 159.57 cv
286.27 159.68 286.24 159.79 286.18 159.88 cv
286.079 160.03 285.91 160.14 285.71 160.13 cv
285.46 160.13 285.26 159.98 285.18 159.78 cv
285.16 159.71 285.15 159.65 285.15 159.58 cv
285.18 151.07 289.07 145.84 292.88 142.75 cv
293.95 142.31 295.16 141.9 296.52 141.57 cv
cp
f
93.2402 167.691 mo
93.2402 176.201 90.9599 184.181 86.9701 191.05 cv
86.8202 191.311 86.6601 191.571 86.4999 191.831 cv
86.1298 192.451 85.7402 193.071 85.33 193.67 cv
85.1601 193.92 84.9902 194.17 84.8002 194.42 cv
78.7201 203.13 69.7201 209.63 59.2402 212.581 cv
59.0199 212.641 58.79 212.701 58.5702 212.76 cv
54.7602 213.771 50.7499 214.311 46.62 214.311 cv
30.5102 214.311 16.3002 206.141 7.95011 193.711 cv
7.16008 192.561 6.4301 191.361 5.76017 190.141 cv
2.08976 183.481 -8.04688e-05 175.831 -8.04688e-05 167.691 cv
-8.04688e-05 141.941 20.87 121.071 46.62 121.071 cv
72.37 121.071 93.2402 141.941 93.2402 167.691 cv
cp
.909804 .882353 .937255 rgb
f
39.0072 153.626 mo
39.0072 153.626 31.1078 151.091 31.0649 157.029 cv
31.0155 163.909 39.1669 163.211 39.1669 163.211 cv
39.0072 153.626 li
cp
.94902 .494118 .392157 rgb
f
35.7548 160.151 mo
35.6039 160.151 35.455 160.081 35.3603 159.949 cv
32.4194 155.84 li
32.2636 155.622 32.3139 155.319 32.5312 155.164 cv
32.748 155.007 33.0507 155.058 33.2074 155.275 cv
36.1484 159.384 li
36.3041 159.602 36.2538 159.905 36.0365 160.061 cv
35.9511 160.122 35.8525 160.151 35.7548 160.151 cv
cp
0 0 0 rgb
f
32.683 159.123 mo
32.4394 159.123 32.2294 158.94 32.2021 158.692 cv
32.1728 158.426 32.3642 158.187 32.6303 158.157 cv
34.7944 157.919 li
35.0644 157.892 35.2997 158.081 35.329 158.347 cv
35.3583 158.613 35.1669 158.852 34.9008 158.881 cv
32.7367 159.12 li
32.7187 159.122 32.7006 159.123 32.683 159.123 cv
cp
f
33.2231 158.098 mo
33.3627 160.726 34.8046 162.785 36.4428 162.698 cv
38.081 162.61 39.2958 160.41 39.1557 157.782 cv
39.016 155.155 37.5741 153.096 35.936 153.183 cv
34.2978 153.27 33.0829 155.471 33.2231 158.098 cv
cp
.407843 .462745 .666667 rgb
f
91.6801 179.698 mo
86.3998 199.648 68.2299 214.338 46.62 214.338 cv
32.08 214.338 19.1 207.688 10.5502 197.268 cv
24.1899 180.579 38.8998 178.798 38.8998 178.798 cv
38.8998 178.798 38.5502 176.279 38.8998 175.598 cv
39.1498 175.119 40.0702 174.678 40.58 174.468 cv
40.7802 174.388 40.9101 174.338 40.9101 174.338 cv
40.9101 174.338 41.6498 174.209 42.81 174.029 cv
45.1401 173.659 49.1601 173.068 52.2802 172.838 cv
53.2299 172.758 54.1 172.718 54.81 172.728 cv
55.58 172.739 56.1698 172.808 56.4902 172.959 cv
56.8798 173.138 57.33 174.338 57.33 174.338 cv
57.33 174.338 63.1 173.448 71.0702 174.338 cv
74.4198 174.718 82.7499 176.258 91.6801 179.698 cv
cp
.639216 .482353 .564706 rgb
f
54.2153 168.553 mo
55.0234 176.524 li
55.0234 176.524 52.0976 178.469 48.2548 178.894 cv
43.0653 179.467 41.0243 176.548 41.0243 176.548 cv
40.1908 167.192 li
54.2153 168.553 li
cp
.956863 .517647 .384314 rgb
f
54.2138 168.541 mo
54.2138 168.541 52.3256 175.231 46.3432 174.899 cv
41.5209 174.632 39.5326 168.015 39.5326 168.015 cv
54.2138 168.541 li
cp
0 0 0 rgb
f
35.9833 147.326 mo
35.9833 147.326 34.0131 162.237 38.7983 168.314 cv
43.9301 174.83 50.9594 172.086 53.4687 169.754 cv
56.8534 166.611 57.2377 162.652 57.2377 162.652 cv
57.2377 162.652 62.3432 163.183 63.6327 158.939 cv
64.9877 154.482 61.5434 151.309 59.017 151.338 cv
56.4911 151.367 56.2416 151.851 56.2416 151.851 cv
56.5492 147.197 li
56.5492 147.197 39.7289 131.68 35.9833 147.326 cv
cp
.956863 .517647 .384314 rgb
f
57.6391 158.425 mo
57.5175 158.425 57.3964 158.38 57.3022 158.289 cv
57.1098 158.103 57.1049 157.796 57.2909 157.604 cv
60.849 153.925 li
61.0346 153.732 61.3417 153.728 61.5341 153.914 cv
61.7265 154.1 61.7314 154.407 61.5453 154.599 cv
57.9872 158.277 li
57.8925 158.376 57.7655 158.425 57.6391 158.425 cv
cp
0 0 0 rgb
f
61.268 158.703 mo
61.1816 158.703 61.0937 158.68 61.0146 158.631 cv
58.5712 157.127 li
58.3432 156.987 58.2724 156.689 58.4125 156.461 cv
58.5517 156.232 58.851 156.162 59.079 156.302 cv
61.5224 157.806 li
61.7504 157.946 61.8212 158.244 61.6811 158.472 cv
61.5898 158.621 61.4306 158.703 61.268 158.703 cv
cp
f
49.7216 155.095 mo
49.4618 155.095 49.247 154.889 49.2377 154.628 cv
49.1523 152.158 li
49.143 151.891 49.3525 151.666 49.62 151.657 cv
49.873 151.653 50.1117 151.857 50.121 152.125 cv
50.2065 154.594 li
50.2157 154.861 50.0063 155.086 49.7387 155.095 cv
49.7333 155.095 49.7275 155.095 49.7216 155.095 cv
cp
f
40.2714 155.457 mo
40.0116 155.457 39.7968 155.251 39.7875 154.989 cv
39.7021 152.52 li
39.6928 152.253 39.9023 152.028 40.1698 152.019 cv
40.4213 152.03 40.6615 152.219 40.6708 152.486 cv
40.7563 154.956 li
40.7655 155.223 40.5561 155.447 40.2885 155.457 cv
40.2831 155.457 40.2773 155.457 40.2714 155.457 cv
cp
f
45.2187 161.568 mo
45.0092 161.568 44.8163 161.432 44.7543 161.221 cv
43.6254 157.408 44.5707 154.139 44.6117 154.002 cv
44.6884 153.746 44.9584 153.6 45.2133 153.676 cv
45.4696 153.752 45.6161 154.021 45.5404 154.278 cv
45.5317 154.309 44.6391 157.419 45.683 160.946 cv
45.7592 161.203 45.6127 161.472 45.3564 161.548 cv
45.3105 161.562 45.2641 161.568 45.2187 161.568 cv
cp
f
38.5912 150.416 mo
38.4711 150.416 38.3505 150.372 38.2568 150.282 cv
38.0629 150.097 38.0561 149.791 38.2406 149.597 cv
39.224 148.567 41.0024 148.418 41.0776 148.412 cv
41.3407 148.394 41.5771 148.59 41.5976 148.856 cv
41.6191 149.123 41.4198 149.356 41.1537 149.378 cv
41.1391 149.379 39.6669 149.506 38.9418 150.266 cv
38.8466 150.366 38.7187 150.416 38.5912 150.416 cv
cp
f
50.7343 150.214 mo
50.6513 150.214 50.5673 150.193 50.4906 150.148 cv
49.5844 149.62 48.1352 149.904 48.1191 149.907 cv
47.8627 149.963 47.6015 149.791 47.5483 149.529 cv
47.4945 149.267 47.663 149.011 47.9247 148.958 cv
47.9989 148.942 49.7485 148.593 50.9789 149.312 cv
51.2099 149.446 51.288 149.743 51.1532 149.974 cv
51.0634 150.128 50.9008 150.214 50.7343 150.214 cv
cp
f
57.3661 153.44 mo
57.3661 153.44 56.6786 158.181 56.0683 158.112 cv
55.4579 158.044 55.0605 150.855 56.6777 150.247 cv
58.2948 149.638 57.3661 153.44 57.3661 153.44 cv
cp
f
45.9452 165.782 mo
45.6869 165.782 45.4731 165.578 45.4623 165.317 cv
45.4516 165.051 45.6591 164.825 45.9262 164.814 cv
46.0263 164.81 48.3949 164.685 49.3193 162.655 cv
49.4301 162.412 49.7182 162.304 49.9609 162.415 cv
50.2045 162.526 50.3119 162.814 50.2011 163.057 cv
49.0258 165.637 46.0883 165.777 45.9643 165.782 cv
45.9579 165.782 45.9516 165.782 45.9452 165.782 cv
cp
f
56.6239 151.168 mo
56.6239 151.168 51.5361 150.964 48.0224 148.484 cv
45.0556 146.39 43.8061 143.269 43.8061 143.269 cv
43.8061 143.269 41.6147 143.084 38.5912 145.132 cv
35.5673 147.18 35.5815 153.093 35.5815 153.093 cv
35.5815 153.093 29.4037 143.341 31.9828 139.682 cv
34.5624 136.023 39.1669 138.768 39.1669 138.768 cv
39.1669 138.768 38.0883 132.263 47.2514 134.397 cv
56.4145 136.532 58.8251 144.256 58.8251 144.256 cv
58.8251 144.256 61.9032 143.85 62.4115 146.695 cv
62.9194 149.542 61.8803 152.503 61.8803 152.503 cv
61.8803 152.503 60.4799 151.286 58.4472 152.141 cv
56.4145 152.997 56.4145 152.997 56.4145 152.997 cv
56.6239 151.168 li
cp
f
40.9106 174.342 mo
40.9106 174.342 42.7289 176.067 46.9345 176.171 cv
51.1405 176.277 54.829 172.878 54.829 172.878 cv
57.539 177.85 li
50.8383 181.941 li
39.6083 180.997 li
39.6083 175.962 li
40.9106 174.342 li
cp
.639216 .482353 .564706 rgb
f
45.5497 182.453 mo
41.0053 182.453 38.5253 179.129 38.496 179.088 cv
38.3339 178.866 38.3832 178.554 38.6059 178.391 cv
38.8285 178.229 39.1405 178.277 39.3041 178.5 cv
39.4325 178.675 42.5243 182.783 48.3061 181.021 cv
48.5712 180.942 48.8495 181.09 48.9301 181.354 cv
49.0102 181.618 48.8612 181.897 48.5971 181.978 cv
47.497 182.313 46.4804 182.453 45.5497 182.453 cv
cp
1 1 1 rgb
f
44.3818 167.271 mo
44.4242 168.063 45.601 168.645 47.0112 168.569 cv
48.4213 168.495 49.5297 167.791 49.4877 166.999 cv
49.4452 166.206 48.268 165.624 46.8583 165.699 cv
45.4482 165.774 44.3393 166.478 44.3818 167.271 cv
cp
.407843 .462745 .666667 rgb
f
56.2392 156.903 mo
56.2392 159.534 57.5693 161.667 59.2099 161.667 cv
60.8505 161.667 62.1806 159.534 62.1806 156.903 cv
62.1806 154.272 60.8505 152.139 59.2099 152.139 cv
57.5693 152.139 56.2392 154.272 56.2392 156.903 cv
cp
.337255 .403922 .588235 rgb
f
57.0727 156.903 mo
57.0727 159.534 58.4023 161.667 60.0434 161.667 cv
61.684 161.667 63.0136 159.534 63.0136 156.903 cv
63.0136 154.272 61.684 152.139 60.0434 152.139 cv
58.4023 152.139 57.0727 154.272 57.0727 156.903 cv
cp
.407843 .462745 .666667 rgb
f
59.7997 155.051 mo
59.7773 155.051 59.7548 155.05 59.7319 155.047 cv
59.4584 155.01 59.2665 154.758 59.3036 154.484 cv
60.7084 144.139 56.5653 140.767 56.5234 140.734 cv
56.3066 140.565 56.2665 140.251 56.4345 140.033 cv
56.6029 139.816 56.9145 139.775 57.1327 139.941 cv
57.3232 140.087 61.7861 143.637 60.2948 154.619 cv
60.2607 154.869 60.0463 155.051 59.7997 155.051 cv
cp
f
48.4516 167.634 mo
48.1757 167.634 47.9521 167.411 47.9516 167.135 cv
47.9516 166.858 48.1752 166.635 48.4511 166.634 cv
48.5404 166.634 57.4032 166.542 59.3173 159.635 cv
59.3915 159.369 59.6669 159.215 59.933 159.287 cv
60.1991 159.361 60.3549 159.637 60.2812 159.903 cv
58.1625 167.546 48.5483 167.634 48.4516 167.634 cv
cp
f
217.42 288.758 mo
217.42 297.659 214.92 305.978 210.6 313.058 cv
202.41 326.448 187.65 335.378 170.8 335.378 cv
156.75 335.378 144.15 329.159 135.61 319.329 cv
128.49 311.148 124.18 300.448 124.18 288.758 cv
124.18 263.008 145.05 242.138 170.8 242.138 cv
196.55 242.138 217.42 263.008 217.42 288.758 cv
cp
.909804 .882353 .937255 rgb
f
175.924 276.522 mo
175.924 276.522 183.32 273.02 184.131 278.821 cv
185.071 285.542 177.01 285.916 177.01 285.916 cv
175.924 276.522 li
cp
.956863 .517647 .384314 rgb
f
179.887 282.5 mo
179.809 282.5 179.73 282.481 179.656 282.442 cv
179.416 282.314 179.326 282.016 179.454 281.776 cv
181.796 277.377 li
181.924 277.136 182.221 277.046 182.462 277.173 cv
182.702 277.301 182.792 277.599 182.664 277.839 cv
180.322 282.239 li
180.233 282.405 180.063 282.5 179.887 282.5 cv
cp
0 0 0 rgb
f
180.61 281.143 mo
180.343 281.143 180.124 280.929 180.118 280.662 cv
180.112 280.39 180.328 280.165 180.599 280.159 cv
182.746 280.112 li
182.989 280.121 183.242 280.322 183.248 280.593 cv
183.255 280.865 183.039 281.09 182.768 281.096 cv
180.621 281.143 li
180.617 281.143 180.613 281.143 180.61 281.143 cv
cp
f
183.082 279.635 mo
183.319 282.255 182.185 284.5 180.552 284.647 cv
178.918 284.794 177.402 282.789 177.165 280.169 cv
176.929 277.547 178.062 275.304 179.696 275.157 cv
181.33 275.009 182.847 277.014 183.082 279.635 cv
cp
.407843 .462745 .666667 rgb
f
210.6 313.058 mo
207.65 317.878 203.85 322.119 199.41 325.558 cv
199.12 325.798 198.83 326.018 198.53 326.228 cv
190.78 331.989 181.19 335.378 170.8 335.378 cv
164.57 335.378 158.62 334.159 153.19 331.938 cv
152.88 331.808 152.57 331.678 152.26 331.539 cv
145.82 328.749 140.14 324.548 135.61 319.329 cv
137.48 313.518 140.97 307.999 147.19 304.499 cv
163.07 295.568 186.85 295.568 197.43 300.588 cv
203.93 303.669 208.22 309.188 210.6 313.058 cv
cp
.639216 .482353 .564706 rgb
f
178.958 269.851 mo
178.958 269.851 183.847 261.967 182.86 258.602 cv
181.873 255.237 177.471 258.535 177.471 258.535 cv
177.471 258.535 176.47 251.285 171.07 252.693 cv
163.883 254.566 156.743 267.225 156.743 267.225 cv
156.743 267.225 153.083 266.306 151.845 269.515 cv
150.403 273.251 151.667 277.441 153.976 281.169 cv
156.285 284.898 162.537 281.823 162.537 281.823 cv
178.958 269.851 li
cp
0 0 0 rgb
f
163.785 292.674 mo
164.046 301.309 li
164.046 301.309 167.244 302.979 171.158 302.894 cv
176.442 302.78 178.143 300.454 178.143 300.454 cv
177.677 289.253 li
163.785 292.674 li
cp
.956863 .517647 .384314 rgb
f
163.781 292.472 mo
163.781 292.472 167.122 298.961 173.082 297.834 cv
177.888 296.923 177.691 290.119 177.691 290.119 cv
163.781 292.472 li
cp
0 0 0 rgb
f
178.958 269.851 mo
178.958 269.851 181.602 284.868 178.926 290.738 cv
175.924 297.323 168.238 296.442 165.482 294.488 cv
161.766 291.853 160.162 287.592 160.162 287.592 cv
160.162 287.592 155.239 288.773 153.428 284.791 cv
151.525 280.608 154.482 277.059 156.955 276.76 cv
159.43 276.461 159.736 276.902 159.736 276.902 cv
158.832 272.391 li
158.832 272.391 173.268 255.038 178.958 269.851 cv
cp
.956863 .517647 .384314 rgb
f
159.736 276.902 mo
159.736 276.902 162.953 277.016 166.584 274.128 cv
170.845 270.74 170.171 265.147 170.171 265.147 cv
170.171 265.147 177.926 269.592 179.853 275.453 cv
181.78 281.313 181.752 261.426 173.175 262.147 cv
164.598 262.868 153.154 268.468 159.736 276.902 cv
cp
0 0 0 rgb
f
159.159 283.53 mo
159.052 283.53 158.944 283.495 158.853 283.423 cv
154.897 280.288 li
154.684 280.119 154.649 279.809 154.817 279.596 cv
154.987 279.384 155.296 279.348 155.509 279.516 cv
159.465 282.652 li
159.678 282.821 159.713 283.13 159.545 283.343 cv
159.448 283.465 159.304 283.53 159.159 283.53 cv
cp
f
155.647 284.272 mo
155.504 284.272 155.362 284.211 155.265 284.09 cv
155.093 283.88 155.125 283.57 155.335 283.398 cv
157.529 281.61 li
157.742 281.439 158.051 281.469 158.222 281.681 cv
158.393 281.891 158.362 282.202 158.151 282.374 cv
155.957 284.162 li
155.866 284.236 155.756 284.272 155.647 284.272 cv
cp
f
167.363 279.129 mo
167.112 279.129 166.898 278.939 166.873 278.685 cv
166.637 276.259 li
166.611 275.989 166.809 275.749 167.079 275.722 cv
167.349 275.69 167.59 275.894 167.617 276.164 cv
167.853 278.589 li
167.879 278.86 167.682 279.1 167.411 279.127 cv
167.395 279.128 167.378 279.129 167.363 279.129 cv
cp
f
176.811 278.775 mo
176.56 278.775 176.347 278.585 176.322 278.331 cv
176.085 275.905 li
176.059 275.634 176.257 275.394 176.527 275.368 cv
176.796 275.333 177.038 275.54 177.065 275.809 cv
177.301 278.235 li
177.328 278.505 177.13 278.746 176.859 278.772 cv
176.843 278.774 176.827 278.775 176.811 278.775 cv
cp
f
173.349 284.785 mo
173.323 284.785 173.297 284.783 173.271 284.779 cv
173.003 284.736 172.82 284.485 172.862 284.216 cv
173.425 280.636 172.151 277.714 172.139 277.685 cv
172.028 277.437 172.14 277.146 172.388 277.036 cv
172.636 276.925 172.926 277.037 173.037 277.284 cv
173.095 277.413 174.445 280.49 173.834 284.369 cv
173.796 284.612 173.587 284.785 173.349 284.785 cv
cp
f
177.64 273.698 mo
177.532 273.698 177.423 273.663 177.332 273.589 cv
176.661 273.05 175.461 272.989 175.065 273.01 cv
174.8 273.051 174.562 272.818 174.547 272.545 cv
174.533 272.274 174.741 272.043 175.012 272.028 cv
175.087 272.022 176.85 271.939 177.949 272.822 cv
178.161 272.993 178.194 273.302 178.024 273.514 cv
177.927 273.634 177.784 273.698 177.64 273.698 cv
cp
f
166.562 274.067 mo
166.415 274.067 166.269 274.002 166.173 273.877 cv
166.006 273.662 166.045 273.352 166.26 273.186 cv
167.373 272.322 169.135 272.434 169.209 272.441 cv
169.48 272.461 169.684 272.696 169.665 272.966 cv
169.646 273.237 169.404 273.413 169.141 273.423 cv
169.125 273.419 167.676 273.332 166.863 273.963 cv
166.773 274.033 166.667 274.067 166.562 274.067 cv
cp
f
158.593 276.97 mo
158.593 276.97 160.325 281.367 160.895 281.163 cv
161.466 280.959 160.221 273.967 158.531 273.749 cv
156.841 273.53 158.593 276.97 158.593 276.97 cv
cp
f
171.56 288.571 mo
170.111 288.571 169.329 287.681 169.093 287.102 cv
168.991 286.85 169.112 286.563 169.364 286.461 cv
169.613 286.359 169.899 286.477 170.003 286.727 cv
170.062 286.861 170.607 287.971 172.455 287.453 cv
172.713 287.378 172.989 287.533 173.061 287.794 cv
173.135 288.055 172.982 288.327 172.72 288.4 cv
172.294 288.519 171.908 288.571 171.56 288.571 cv
cp
f
154.32 326.008 mo
153.19 331.938 li
152.88 331.808 152.57 331.678 152.26 331.539 cv
153.35 325.818 li
153.4 325.548 153.66 325.369 153.94 325.419 cv
154.21 325.478 154.38 325.728 154.32 326.008 cv
cp
.968627 .701961 .411765 rgb
f
178.05 298.775 mo
178.05 298.775 183.235 309.246 181.982 309.087 cv
180.729 308.929 173.039 303.283 173.039 303.283 cv
173.039 303.283 166.965 310.062 165.202 310.19 cv
163.439 310.318 163.909 298.367 163.909 298.367 cv
163.909 298.367 165.205 302.242 171.803 302.175 cv
178.563 302.107 178.05 298.775 178.05 298.775 cv
cp
f
174.29 289.883 mo
174.362 290.674 173.279 291.418 171.873 291.544 cv
170.467 291.671 169.269 291.133 169.198 290.342 cv
169.126 289.552 170.209 288.808 171.615 288.681 cv
173.021 288.555 174.219 289.093 174.29 289.883 cv
cp
.407843 .462745 .666667 rgb
f
161.075 281.313 mo
161.451 283.918 160.438 286.218 158.814 286.453 cv
157.191 286.686 155.57 284.765 155.195 282.161 cv
154.82 279.556 155.831 277.255 157.455 277.021 cv
159.08 276.788 160.7 278.709 161.075 281.313 cv
cp
.337255 .403922 .588235 rgb
f
160.25 281.432 mo
160.626 284.037 159.614 286.337 157.99 286.571 cv
156.366 286.805 154.746 284.883 154.37 282.28 cv
153.995 279.675 155.007 277.375 156.631 277.14 cv
158.255 276.906 159.875 278.828 160.25 281.432 cv
cp
.407843 .462745 .666667 rgb
f
157.216 279.994 mo
156.988 279.994 156.782 279.836 156.729 279.605 cv
154.7 270.727 156.77 266.228 156.859 266.041 cv
156.978 265.793 157.275 265.685 157.524 265.804 cv
157.773 265.921 157.88 266.219 157.763 266.469 cv
157.742 266.512 155.761 270.881 157.704 279.382 cv
157.765 279.652 157.597 279.919 157.328 279.981 cv
157.29 279.99 157.253 279.994 157.216 279.994 cv
cp
f
168.556 290.92 mo
165.629 290.92 159.849 290.205 157.502 284.859 cv
157.392 284.606 157.507 284.311 157.76 284.2 cv
158.013 284.091 158.308 284.205 158.418 284.457 cv
161.298 291.019 170.082 289.848 170.172 289.835 cv
170.437 289.8 170.698 289.985 170.737 290.258 cv
170.776 290.532 170.587 290.785 170.314 290.825 cv
170.288 290.828 169.605 290.92 168.556 290.92 cv
cp
f
465.78 288.758 mo
465.78 297.128 463.57 304.989 459.7 311.789 cv
456.98 316.568 453.43 320.829 449.25 324.358 cv
444.82 328.108 439.68 331.048 434.06 332.948 cv
429.38 334.518 424.37 335.378 419.16 335.378 cv
405.35 335.378 392.93 329.369 384.4 319.829 cv
383.89 319.268 383.4 318.688 382.92 318.098 cv
381.54 316.398 380.28 314.598 379.15 312.718 cv
374.95 305.709 372.53 297.518 372.53 288.758 cv
372.53 263.008 393.41 242.138 419.16 242.138 cv
444.9 242.138 465.78 263.008 465.78 288.758 cv
cp
.909804 .882353 .937255 rgb
f
407.09 279.417 mo
407.09 279.417 396.423 287.462 395.629 297.234 cv
394.427 312.023 411.25 305.553 413.099 296.125 cv
414.948 286.697 407.09 279.417 407.09 279.417 cv
cp
0 0 0 rgb
f
406.134 278.409 mo
406.134 278.409 402.284 274.155 403.393 267.563 cv
404.145 263.093 406.134 261.647 406.134 261.647 cv
406.134 261.647 403.105 255.546 412.122 255.917 cv
421.14 256.286 426.447 260.713 426.447 260.713 cv
426.447 260.713 430.569 258.689 432.417 263.496 cv
434.266 268.302 432.417 275.393 432.417 275.393 cv
406.134 278.409 li
cp
f
404.503 277.692 mo
404.274 280.313 405.413 282.554 407.047 282.697 cv
408.682 282.839 410.193 280.831 410.422 278.21 cv
410.651 275.588 409.512 273.347 407.877 273.205 cv
406.244 273.062 404.733 275.071 404.503 277.692 cv
cp
.168627 .215686 .317647 rgb
f
449.249 324.36 mo
444.82 328.11 439.68 331.05 434.06 332.95 cv
429.38 334.52 424.37 335.38 419.16 335.38 cv
409.86 335.38 401.19 332.65 393.91 327.95 cv
393.51 327.7 393.12 327.44 392.74 327.17 cv
389.67 325.07 386.87 322.6 384.4 319.83 cv
383.89 319.27 383.4 318.69 382.92 318.1 cv
412.43 296.72 li
412.45 296.71 413.57 295.89 413.57 295.89 cv
425.16 296.83 li
429.97 297.22 li
449.249 324.36 li
cp
.968627 .701961 .411765 rgb
f
413.57 296.638 mo
384.4 319.829 li
383.89 319.268 383.4 318.688 382.92 318.098 cv
381.54 316.398 380.28 314.598 379.15 312.718 cv
380.05 311.909 380.99 311.098 381.96 310.289 cv
395.329 299.138 408.55 297.088 412.43 296.718 cv
413.18 296.648 413.57 296.638 413.57 296.638 cv
cp
f
425.931 285.84 mo
425.709 297.604 li
425.709 297.604 423.66 300.923 417.206 301.278 cv
412.399 301.542 410.928 298.861 410.928 298.861 cv
412.285 288.603 li
423.97 286.239 li
425.931 285.84 li
cp
.956863 .517647 .384314 rgb
f
459.7 311.789 mo
456.98 316.568 453.43 320.829 449.25 324.358 cv
444.82 328.108 439.68 331.048 434.06 332.948 cv
441.6 323.758 li
425.16 296.829 li
425.04 296.638 li
425.04 296.638 426.93 296.709 429.97 297.218 cv
436.89 298.369 449.75 301.779 459.7 311.789 cv
cp
.968627 .701961 .411765 rgb
f
425.931 285.169 mo
425.896 285.468 425.773 285.82 425.584 286.222 cv
422.983 291.66 414.257 293.731 411.481 293.909 cv
412.277 288.489 li
425.931 285.169 li
cp
0 0 0 rgb
f
410.452 263.336 mo
410.452 263.336 404.328 276.993 406.413 284.718 cv
408.497 292.444 415.53 291.298 419.744 289.849 cv
423.958 288.4 425.932 285.842 425.932 285.842 cv
425.932 285.842 429.843 287.211 432.502 283.587 cv
435.162 279.964 433.586 275.758 431.355 274.777 cv
429.123 273.795 426.445 275.387 426.445 275.387 cv
428.571 271.421 li
428.571 271.421 419.98 251.083 410.452 263.336 cv
cp
.956863 .517647 .384314 rgb
f
426.445 275.387 mo
426.445 275.387 420.546 276.578 416.45 270.014 cv
412.353 263.452 412.729 260.756 412.729 260.756 cv
408.647 267.532 li
408.647 267.532 407.734 262.834 409.613 259.838 cv
411.492 256.843 413.443 257.464 413.443 257.464 cv
426.447 260.713 li
429.871 271.137 li
426.445 275.387 li
cp
0 0 0 rgb
f
410.918 280.823 mo
410.707 280.823 410.513 280.686 410.448 280.474 cv
409.541 277.513 411.631 274.515 411.721 274.389 cv
411.877 274.167 412.183 274.114 412.407 274.272 cv
412.628 274.428 412.681 274.736 412.524 274.958 cv
412.505 274.985 410.625 277.692 411.389 280.187 cv
411.468 280.447 411.322 280.721 411.062 280.801 cv
411.014 280.816 410.966 280.823 410.918 280.823 cv
cp
f
427.01 281.878 mo
426.888 281.878 426.767 281.833 426.671 281.742 cv
426.474 281.555 426.466 281.244 426.654 281.046 cv
430.391 277.109 li
430.579 276.913 430.889 276.904 431.086 277.091 cv
431.284 277.278 431.291 277.589 431.104 277.787 cv
427.367 281.724 li
427.27 281.826 427.14 281.878 427.01 281.878 cv
cp
f
430.957 280.831 mo
430.932 280.831 430.907 280.829 430.881 280.825 cv
428.306 280.427 li
428.038 280.385 427.854 280.134 427.895 279.866 cv
427.936 279.597 428.194 279.413 428.456 279.455 cv
431.032 279.852 li
431.3 279.894 431.484 280.145 431.443 280.414 cv
431.406 280.657 431.196 280.831 430.957 280.831 cv
cp
f
414.198 283.318 mo
414.995 283.671 415.996 283.956 416.456 283.604 cv
416.963 283.215 416.985 282.44 416.924 281.895 cv
414.198 283.318 li
cp
415.859 284.747 mo
414.562 284.747 413.088 283.869 412.875 283.738 cv
412.724 283.645 412.635 283.478 412.641 283.301 cv
412.648 283.125 412.748 282.964 412.906 282.882 cv
417.058 280.715 li
417.188 280.648 417.34 280.641 417.477 280.699 cv
417.612 280.755 417.714 280.87 417.756 281.01 cv
417.785 281.104 418.435 283.328 417.055 284.385 cv
416.712 284.647 416.295 284.747 415.859 284.747 cv
cp
f
408.277 269.59 mo
408.042 269.59 407.834 269.421 407.793 269.182 cv
407.746 268.915 407.925 268.66 408.194 268.614 cv
410.629 268.19 li
410.891 268.142 411.152 268.322 411.198 268.59 cv
411.245 268.858 411.066 269.113 410.797 269.159 cv
408.362 269.583 li
408.333 269.587 408.305 269.59 408.277 269.59 cv
cp
f
418.402 271.189 mo
418.327 271.189 418.25 271.171 418.179 271.136 cv
414.185 269.113 li
413.943 268.991 413.846 268.695 413.969 268.452 cv
414.091 268.209 414.39 268.114 414.63 268.236 cv
418.624 270.258 li
418.867 270.38 418.963 270.676 418.84 270.919 cv
418.754 271.09 418.58 271.189 418.402 271.189 cv
cp
f
433.895 279.417 mo
433.895 279.417 442.4 286.789 441.199 298.805 cv
439.996 310.822 428.081 309.279 425.579 304.894 cv
421.788 298.251 425.932 285.842 425.932 285.842 cv
425.932 285.842 433.239 287.066 433.895 279.417 cv
cp
f
408.278 275.22 mo
408.23 275.22 408.181 275.213 408.133 275.199 cv
407.873 275.119 407.728 274.843 407.807 274.584 cv
408.491 272.359 li
407.897 271.633 li
407.725 271.423 407.756 271.113 407.966 270.941 cv
408.177 270.768 408.485 270.799 408.659 271.01 cv
409.419 271.94 li
409.524 272.067 409.557 272.239 409.509 272.396 cv
408.748 274.873 li
408.683 275.085 408.489 275.22 408.278 275.22 cv
cp
f
415.732 275.885 mo
415.684 275.885 415.635 275.878 415.587 275.864 cv
415.328 275.784 415.182 275.508 415.261 275.249 cv
415.942 273.032 li
415.068 272.011 li
414.891 271.804 414.915 271.494 415.121 271.317 cv
415.328 271.141 415.638 271.164 415.816 271.371 cv
416.866 272.597 li
416.975 272.725 417.011 272.901 416.962 273.062 cv
416.203 275.538 li
416.137 275.75 415.943 275.885 415.732 275.885 cv
cp
f
417.132 301.515 mo
412.877 301.515 410.356 299.194 410.32 299.16 cv
410.12 298.97 410.111 298.655 410.3 298.454 cv
410.49 298.254 410.805 298.246 411.006 298.432 cv
411.205 298.621 415.984 302.964 423.739 298.613 cv
423.981 298.476 424.286 298.563 424.419 298.803 cv
424.555 299.044 424.469 299.349 424.229 299.484 cv
421.531 300.999 419.139 301.515 417.132 301.515 cv
cp
1 1 1 rgb
f
425.219 279.356 mo
425.1 281.985 426.332 284.175 427.971 284.25 cv
429.61 284.325 431.036 282.253 431.155 279.626 cv
431.274 276.997 430.041 274.805 428.403 274.731 cv
426.763 274.657 425.338 276.728 425.219 279.356 cv
cp
.168627 .215686 .317647 rgb
f
425.904 279.387 mo
425.785 282.016 427.016 284.207 428.656 284.281 cv
430.294 284.355 431.719 282.285 431.838 279.656 cv
431.957 277.028 430.725 274.836 429.086 274.762 cv
427.448 274.688 426.023 276.758 425.904 279.387 cv
cp
.223529 .278431 .419608 rgb
f
420.377 287.514 mo
419.862 287.514 419.325 287.483 418.765 287.417 cv
418.457 287.38 418.237 287.101 418.274 286.793 cv
418.31 286.484 418.595 286.262 418.898 286.301 cv
425.335 287.057 428.652 282.544 428.684 282.499 cv
428.867 282.246 429.219 282.188 429.468 282.369 cv
429.721 282.549 429.779 282.901 429.598 283.153 cv
429.46 283.345 426.399 287.514 420.377 287.514 cv
cp
f
414.243 286.686 mo
414.206 287.479 415.321 288.173 416.732 288.238 cv
418.142 288.301 419.315 287.711 419.351 286.918 cv
419.387 286.125 418.272 285.43 416.862 285.367 cv
415.452 285.302 414.279 285.893 414.243 286.686 cv
cp
f
428.187 277.79 mo
428.127 277.79 428.068 277.78 428.008 277.76 cv
427.714 277.661 427.555 277.342 427.654 277.048 cv
430.122 269.694 425.896 260.806 425.853 260.717 cv
425.718 260.438 425.834 260.101 426.114 259.966 cv
426.392 259.831 426.729 259.948 426.865 260.227 cv
427.048 260.607 431.336 269.611 428.72 277.406 cv
428.641 277.641 428.422 277.79 428.187 277.79 cv
cp
f
398.14 311.74 mo
397.84 311.99 391.53 317.62 393.91 327.95 cv
393.51 327.7 393.12 327.44 392.74 327.17 cv
390.87 316.83 397.41 311.04 397.49 310.98 cv
397.7 310.8 398.01 310.82 398.19 311.03 cv
398.37 311.24 398.35 311.56 398.14 311.74 cv
cp
1 1 1 rgb
f
465.78 167.718 mo
465.78 176.928 463.11 185.518 458.49 192.758 cv
455.16 197.978 450.82 202.489 445.74 206.018 cv
443.02 207.909 440.09 209.518 436.99 210.808 cv
431.5 213.079 425.48 214.338 419.16 214.338 cv
418.8 214.338 418.43 214.338 418.06 214.329 cv
406.84 214.068 396.6 209.848 388.69 203.008 cv
387.31 201.818 386.01 200.548 384.78 199.209 cv
377.17 190.919 372.53 179.858 372.53 167.718 cv
372.53 141.968 393.41 121.098 419.16 121.098 cv
444.9 121.098 465.78 141.968 465.78 167.718 cv
cp
.909804 .882353 .937255 rgb
f
406.394 158.42 mo
406.165 161.042 407.304 163.282 408.939 163.425 cv
410.573 163.568 412.083 161.559 412.313 158.938 cv
412.542 156.316 411.403 154.076 409.768 153.933 cv
408.134 153.79 406.623 155.799 406.394 158.42 cv
cp
.168627 .215686 .317647 rgb
f
445.74 206.018 mo
443.02 207.909 440.09 209.518 436.99 210.808 cv
431.5 213.079 425.48 214.338 419.16 214.338 cv
418.8 214.338 418.43 214.338 418.06 214.329 cv
406.84 214.068 396.6 209.848 388.69 203.008 cv
387.31 201.818 386.01 200.548 384.78 199.209 cv
388.06 192.098 395.67 178.688 407.57 175.468 cv
407.71 175.428 407.85 175.398 407.98 175.358 cv
421.75 171.878 440.43 175.128 444.15 177.919 cv
445.68 179.178 445.95 191.688 445.74 206.018 cv
cp
.572549 .705882 .917647 rgb
f
411.15 151.703 mo
411.15 151.703 403.646 142.423 406.795 138.741 cv
409.944 135.059 414.811 138.741 414.811 138.741 cv
414.811 138.741 415.079 134.384 419.934 134.834 cv
424.789 135.283 427.715 140.457 427.715 140.457 cv
427.715 140.457 431.986 136.183 434.911 140.457 cv
437.834 144.731 435.811 151.703 435.811 151.703 cv
435.811 151.703 439.184 151.204 438.285 155.165 cv
437.385 159.126 432.079 163.209 432.079 163.209 cv
411.15 151.703 li
cp
0 0 0 rgb
f
427.574 166.314 mo
427.715 176.78 li
427.715 176.78 425.868 179.814 419.752 180.394 cv
415.197 180.826 413.58 179.817 413.58 179.817 cv
414.145 174.507 li
414.702 169.331 li
425.724 166.75 li
427.574 166.314 li
cp
.956863 .517647 .384314 rgb
f
425.724 166.75 mo
425.702 167.036 425.598 167.374 425.434 167.763 cv
423.163 173.023 416.776 174.236 414.145 174.507 cv
414.702 169.331 li
425.724 166.75 li
cp
0 0 0 rgb
f
412.046 145.507 mo
412.046 145.507 406.731 158.703 408.995 165.964 cv
411.258 173.225 417.894 171.879 421.844 170.348 cv
425.793 168.818 427.575 166.316 427.575 166.316 cv
427.575 166.316 431.339 167.472 433.732 163.934 cv
436.125 160.395 434.474 156.459 432.32 155.608 cv
430.164 154.758 427.678 156.368 427.678 156.368 cv
429.552 152.523 li
429.552 152.523 420.648 133.521 412.046 145.507 cv
cp
.956863 .517647 .384314 rgb
f
428.135 162.081 mo
427.988 162.081 427.841 162.013 427.746 161.884 cv
427.587 161.669 427.632 161.366 427.847 161.207 cv
431.79 158.29 li
432.004 158.132 432.307 158.174 432.468 158.391 cv
432.626 158.606 432.581 158.909 432.367 159.068 cv
428.423 161.985 li
428.336 162.049 428.236 162.081 428.135 162.081 cv
cp
0 0 0 rgb
f
432.432 161.964 mo
432.395 161.964 432.356 161.96 432.318 161.95 cv
429.203 161.193 li
428.943 161.129 428.784 160.868 428.846 160.608 cv
428.909 160.349 429.17 160.186 429.431 160.252 cv
432.546 161.009 li
432.806 161.072 432.965 161.334 432.903 161.594 cv
432.849 161.815 432.651 161.964 432.432 161.964 cv
cp
f
420.537 151.644 mo
420.337 151.644 420.151 151.52 420.08 151.322 cv
419.368 149.322 417.583 149.607 417.507 149.618 cv
417.24 149.664 416.994 149.488 416.947 149.226 cv
416.901 148.963 417.073 148.713 417.335 148.665 cv
418.254 148.495 420.199 148.768 420.993 150.997 cv
421.082 151.249 420.951 151.525 420.699 151.615 cv
420.645 151.634 420.59 151.644 420.537 151.644 cv
cp
f
410.724 150.621 mo
410.587 150.621 410.451 150.563 410.355 150.45 cv
410.182 150.246 410.206 149.94 410.411 149.768 cv
410.876 149.373 412.108 148.327 412.668 148.958 cv
412.845 149.158 412.826 149.464 412.625 149.641 cv
412.496 149.756 412.323 149.788 412.165 149.742 cv
412.061 149.774 411.735 149.914 411.038 150.506 cv
410.947 150.583 410.835 150.621 410.724 150.621 cv
cp
f
412.621 160.554 mo
412.475 160.554 412.33 160.488 412.236 160.363 cv
410.536 158.135 413.802 154.611 413.943 154.462 cv
414.125 154.268 414.431 154.258 414.626 154.44 cv
414.822 154.624 414.831 154.93 414.649 155.125 cv
413.853 155.974 412.005 158.465 413.005 159.776 cv
413.167 159.988 413.126 160.292 412.914 160.454 cv
412.827 160.521 412.723 160.554 412.621 160.554 cv
cp
f
411.767 155.881 mo
411.744 155.881 411.721 155.879 411.698 155.877 cv
411.433 155.838 411.248 155.593 411.287 155.328 cv
411.639 152.865 li
411.678 152.6 411.928 152.423 412.187 152.455 cv
412.452 152.493 412.636 152.738 412.598 153.003 cv
412.246 155.466 li
412.21 155.707 412.003 155.881 411.767 155.881 cv
cp
f
418.98 155.892 mo
418.682 155.874 418.48 155.644 418.496 155.377 cv
418.654 152.893 li
418.671 152.628 418.913 152.428 419.167 152.44 cv
419.435 152.458 419.637 152.688 419.621 152.955 cv
419.463 155.438 li
419.447 155.694 419.234 155.892 418.98 155.892 cv
cp
f
410.985 148.479 mo
410.985 148.479 412.092 146.36 414.703 146.307 cv
417.313 146.253 418.863 148.072 418.863 148.072 cv
418.863 148.072 417.777 152.483 421.358 154.771 cv
424.94 157.058 427.678 156.368 427.678 156.368 cv
430.241 155.416 li
432.079 151.628 li
424.521 143.7 li
414.811 138.741 li
409.957 143.268 li
410.985 148.479 li
cp
f
415.942 163.564 mo
416.247 163.737 416.608 163.862 416.936 163.788 cv
417.31 163.705 417.606 163.379 417.833 162.982 cv
415.942 163.564 li
cp
416.735 164.778 mo
415.572 164.778 414.606 163.75 414.561 163.701 cv
414.448 163.579 414.406 163.407 414.449 163.246 cv
414.493 163.086 414.615 162.958 414.774 162.909 cv
418.547 161.749 li
418.72 161.696 418.908 161.743 419.036 161.873 cv
419.163 162.002 419.206 162.191 419.15 162.363 cv
418.698 163.744 418.021 164.543 417.14 164.735 cv
417.003 164.765 416.868 164.778 416.735 164.778 cv
cp
f
458.49 192.758 mo
455.16 197.978 450.82 202.489 445.74 206.018 cv
443.02 207.909 440.09 209.518 436.99 210.808 cv
444.15 177.919 li
444.64 178.258 452.28 183.648 458.49 192.758 cv
cp
.572549 .705882 .917647 rgb
f
426.864 159.985 mo
426.745 162.614 427.977 164.805 429.616 164.879 cv
431.254 164.954 432.68 162.883 432.799 160.254 cv
432.918 157.626 431.686 155.435 430.047 155.361 cv
428.408 155.286 426.983 157.357 426.864 159.985 cv
cp
.168627 .215686 .317647 rgb
f
427.547 160.017 mo
427.428 162.645 428.661 164.836 430.299 164.91 cv
431.939 164.985 433.364 162.914 433.483 160.286 cv
433.602 157.657 432.37 155.466 430.731 155.392 cv
429.092 155.317 427.666 157.388 427.547 160.017 cv
cp
.223529 .278431 .419608 rgb
f
422.021 168.143 mo
421.506 168.143 420.969 168.113 420.41 168.046 cv
420.102 168.01 419.881 167.731 419.918 167.422 cv
419.954 167.113 420.241 166.899 420.542 166.93 cv
426.968 167.692 430.296 163.173 430.329 163.128 cv
430.511 162.874 430.864 162.818 431.113 162.998 cv
431.366 163.179 431.423 163.53 431.243 163.782 cv
431.105 163.975 428.043 168.143 422.021 168.143 cv
cp
f
415.887 167.315 mo
415.851 168.108 416.965 168.803 418.376 168.867 cv
419.787 168.931 420.959 168.34 420.996 167.547 cv
421.031 166.754 419.916 166.06 418.506 165.996 cv
417.096 165.932 415.923 166.523 415.887 167.315 cv
cp
f
429.831 158.419 mo
429.772 158.419 429.712 158.409 429.653 158.389 cv
429.359 158.291 429.2 157.972 429.298 157.678 cv
431.768 150.322 427.254 140.796 427.208 140.701 cv
427.075 140.421 427.192 140.086 427.471 139.951 cv
427.751 139.817 428.086 139.934 428.221 140.213 cv
428.417 140.619 432.98 150.242 430.365 158.035 cv
430.286 158.27 430.067 158.419 429.831 158.419 cv
cp
f
418.076 180.694 mo
414.649 180.694 411.971 179.935 411.842 179.898 cv
411.578 179.822 411.424 179.544 411.5 179.28 cv
411.578 179.013 411.85 178.858 412.12 178.937 cv
412.155 178.947 415.646 179.933 419.634 179.636 cv
424.219 179.296 428.594 176.038 428.638 176.004 cv
428.857 175.839 429.17 175.88 429.338 176.103 cv
429.504 176.324 429.46 176.636 429.24 176.803 cv
429.052 176.945 424.592 180.272 419.708 180.634 cv
419.151 180.675 418.604 180.694 418.076 180.694 cv
cp
.968627 .701961 .411765 rgb
f
93.2402 288.758 mo
93.2402 293.628 92.4999 298.329 91.1098 302.739 cv
88.9902 309.478 85.3901 315.558 80.6801 320.588 cv
80.58 320.709 80.4799 320.818 80.37 320.928 cv
80.2299 321.079 80.08 321.228 79.9399 321.369 cv
71.4799 330.008 59.6801 335.378 46.62 335.378 cv
44.6 335.378 42.5898 335.249 40.6401 335.008 cv
40.62 334.999 40.6098 334.999 40.5898 334.999 cv
35.79 334.369 31.2099 333.018 26.9799 331.048 cv
26.6298 330.888 26.2802 330.718 25.9301 330.548 cv
19.04 327.138 13.12 322.058 8.68986 315.848 cv
8.30998 315.308 7.9301 314.768 7.57023 314.209 cv
6.66984 312.848 5.85002 311.438 5.10978 309.989 cv
1.83976 303.619 -8.04688e-05 296.409 -8.04688e-05 288.758 cv
-8.04688e-05 263.008 20.87 242.138 46.62 242.138 cv
72.37 242.138 93.2402 263.008 93.2402 288.758 cv
cp
.909804 .882353 .937255 rgb
f
58.6386 276.265 mo
59.1611 278.843 58.2812 281.198 56.6728 281.524 cv
55.0649 281.849 53.3383 280.023 52.8158 277.444 cv
52.2934 274.866 53.1737 272.51 54.7817 272.185 cv
56.3896 271.859 58.1166 273.686 58.6386 276.265 cv
cp
.168627 .215686 .317647 rgb
f
80.6801 320.588 mo
80.58 320.709 80.4799 320.818 80.37 320.928 cv
80.2299 321.079 80.08 321.228 79.9399 321.369 cv
71.4799 330.008 59.6801 335.378 46.62 335.378 cv
44.6 335.378 42.5898 335.249 40.6401 335.008 cv
40.62 334.999 40.6098 334.999 40.5898 334.999 cv
35.79 334.369 31.2099 333.018 26.9799 331.048 cv
27.3798 314.159 27.2099 299.378 27.2099 299.098 cv
27.37 298.749 35.1899 296.739 45.6 296.398 cv
61.9799 295.878 75.8202 305.119 80.6801 320.588 cv
cp
.407843 .713726 .847059 rgb
f
40.6401 335.008 mo
40.62 334.999 40.6098 334.999 40.5898 334.999 cv
35.79 334.369 31.2099 333.018 26.9799 331.048 cv
26.6298 330.888 26.2802 330.718 25.9301 330.548 cv
19.04 327.138 13.12 322.058 8.68986 315.848 cv
17.6698 303.539 25.0102 299.948 27.2099 299.098 cv
27.6601 298.919 27.8901 298.858 27.8901 298.858 cv
40.6401 335.008 li
cp
f
47.6874 269.264 mo
47.6874 269.264 58.2641 270.035 59.1176 259.895 cv
60.0263 249.099 50.0492 247.812 45.6918 252.078 cv
41.3349 256.342 42.0097 260.808 42.0097 260.808 cv
42.0097 260.808 39.1156 258.065 35.8041 261.262 cv
33.3735 263.608 34.498 267.572 34.498 267.572 cv
34.498 267.572 29.0419 267.225 29.4316 272.006 cv
29.8212 276.789 33.1713 279.295 33.1713 279.295 cv
47.6874 269.264 li
cp
0 0 0 rgb
f
37.5385 287.719 mo
38.3573 298.999 li
38.3573 298.999 40.6269 302.093 47.2641 302.15 cv
52.2089 302.193 53.8549 300.957 53.8549 300.957 cv
52.7548 295.294 li
51.6747 289.772 li
39.5693 288.016 li
37.5385 287.719 li
cp
.956863 .517647 .384314 rgb
f
39.5693 288.016 mo
39.6205 288.322 39.7636 288.677 39.976 289.081 cv
42.9091 294.532 49.8974 295.246 52.7548 295.294 cv
51.6747 289.772 li
39.5693 288.016 li
cp
0 0 0 rgb
f
52.3227 263.879 mo
52.3227 263.879 59.269 277.591 57.5063 285.619 cv
55.7431 293.645 48.4745 292.812 44.0805 291.531 cv
39.6864 290.25 37.537 287.722 37.537 287.722 cv
37.537 287.722 33.5917 289.316 30.6879 285.728 cv
27.7836 282.141 29.1952 277.751 31.436 276.634 cv
33.6767 275.519 36.5028 277.022 36.5028 277.022 cv
34.1288 273.057 li
34.1288 273.057 41.9511 251.775 52.3227 263.879 cv
cp
.956863 .517647 .384314 rgb
f
36.495 283.185 mo
36.4071 283.185 36.3183 283.162 36.2377 283.112 cv
31.8412 280.41 li
31.6098 280.268 31.5375 279.964 31.6801 279.733 cv
31.8217 279.502 32.1244 279.428 32.3569 279.572 cv
36.7533 282.274 li
36.9848 282.416 37.057 282.719 36.9145 282.951 cv
36.8217 283.102 36.6606 283.185 36.495 283.185 cv
cp
0 0 0 rgb
f
32.8437 283.483 mo
32.6615 283.483 32.4872 283.381 32.4013 283.208 cv
32.2817 282.963 32.3822 282.669 32.6264 282.549 cv
34.9267 281.42 li
35.1718 281.3 35.4657 281.402 35.5854 281.645 cv
35.705 281.889 35.6044 282.184 35.3603 282.303 cv
33.06 283.432 li
32.9902 283.466 32.9164 283.483 32.8437 283.483 cv
cp
f
54.1757 269.234 mo
54.0771 269.234 53.9775 269.205 53.891 269.143 cv
52.6571 268.265 51.4814 269.039 51.432 269.072 cv
51.2055 269.222 50.9008 269.166 50.7494 268.942 cv
50.5966 268.719 50.6518 268.415 50.8739 268.261 cv
50.9462 268.211 52.6557 267.056 54.4613 268.34 cv
54.683 268.499 54.7348 268.805 54.5771 269.027 cv
54.4814 269.162 54.3295 269.234 54.1757 269.234 cv
cp
f
52.3451 282.005 mo
52.31 282.005 52.2743 282.002 52.2387 281.994 cv
51.9736 281.935 51.8056 281.672 51.8642 281.408 cv
52.7807 277.251 50.4145 274.435 50.3905 274.407 cv
50.2138 274.201 50.2367 273.89 50.4418 273.713 cv
50.6474 273.537 50.9574 273.558 51.1347 273.763 cv
51.246 273.892 53.8515 276.963 52.8251 281.619 cv
52.7743 281.849 52.5712 282.005 52.3451 282.005 cv
cp
f
54.017 275.876 mo
53.7489 275.876 53.5297 275.661 53.5248 275.392 cv
53.4775 272.704 li
53.4731 272.432 53.6894 272.208 53.9609 272.203 cv
54.2192 272.151 54.457 272.415 54.4618 272.686 cv
54.5092 275.375 li
54.5136 275.646 54.2973 275.871 54.0258 275.876 cv
54.0229 275.876 54.0199 275.876 54.017 275.876 cv
cp
f
46.6137 276.396 mo
46.3456 276.396 46.1264 276.181 46.1215 275.913 cv
46.0741 273.224 li
46.0697 272.953 46.2861 272.728 46.5575 272.723 cv
46.8119 272.693 47.0536 272.935 47.0585 273.207 cv
47.1059 275.895 li
47.1103 276.167 46.894 276.391 46.6225 276.396 cv
46.6195 276.396 46.6166 276.396 46.6137 276.396 cv
cp
f
53.7416 266.981 mo
53.7416 266.981 52.352 264.802 49.537 264.987 cv
46.7216 265.172 45.2226 267.273 45.2226 267.273 cv
45.2226 267.273 46.8012 271.921 43.1581 274.716 cv
39.5146 277.511 36.5028 277.022 36.5028 277.022 cv
33.6562 276.235 li
31.3261 272.327 li
38.726 263.092 li
48.7187 256.853 li
54.3627 261.276 li
53.7416 266.981 li
cp
f
50.0483 284.832 mo
49.1073 284.832 47.3266 284.565 46.2914 282.719 cv
46.1586 282.483 46.2431 282.183 46.4799 282.05 cv
46.7182 281.918 47.017 282.002 47.1498 282.239 cv
48.2294 284.164 50.4135 283.833 50.5058 283.818 cv
50.7753 283.782 51.0263 283.956 51.0707 284.223 cv
51.1152 284.49 50.936 284.743 50.6689 284.789 cv
50.6362 284.794 50.4013 284.832 50.0483 284.832 cv
cp
f
56.9931 271.105 mo
56.0126 271.105 55.0844 271.489 54.3695 272.192 cv
53.6278 272.921 53.2045 273.908 53.1777 274.967 cv
53.123 277.148 54.788 278.965 56.8891 279.018 cv
57.9057 279.05 58.8686 278.659 59.6064 277.933 cv
60.3486 277.203 60.7719 276.217 60.7987 275.158 cv
60.8529 272.977 59.1884 271.16 57.0873 271.107 cv
57.0556 271.106 57.0243 271.105 56.9931 271.105 cv
cp
56.9843 280.003 mo
56.9443 280.003 56.9047 280.003 56.8647 280.003 cv
54.2211 279.936 52.1259 277.667 52.1943 274.942 cv
52.227 273.627 52.7548 272.4 53.6796 271.491 cv
54.6088 270.577 55.8212 270.086 57.1117 270.123 cv
59.7553 270.189 61.8505 272.46 61.7821 275.183 cv
61.7494 276.499 61.2216 277.725 60.2968 278.634 cv
59.3959 279.52 58.2236 280.003 56.9843 280.003 cv
cp
1 1 1 rgb
f
41.1249 275.766 mo
41.6166 275.779 li
41.5619 277.96 43.2924 279.779 45.4736 279.834 cv
46.5439 279.855 47.5341 279.474 48.2997 278.746 cv
49.0658 278.017 49.5019 277.034 49.5287 275.976 cv
49.5551 274.92 49.1684 273.917 48.4399 273.151 cv
47.7113 272.385 46.7284 271.949 45.6718 271.922 cv
43.4745 271.871 41.6718 273.598 41.6166 275.779 cv
41.1249 275.766 li
cp
45.5761 280.819 mo
45.5336 280.819 45.4916 280.819 45.4491 280.818 cv
42.7255 280.75 40.5649 278.478 40.6332 275.753 cv
40.7011 273.031 42.9804 270.865 45.6962 270.938 cv
47.0155 270.971 48.2436 271.516 49.1528 272.472 cv
50.0624 273.428 50.5453 274.682 50.5121 276.002 cv
50.4794 277.321 49.9345 278.548 48.9779 279.459 cv
48.0527 280.338 46.8486 280.819 45.5761 280.819 cv
cp
f
49.5551 275.954 mo
49.2963 275.954 49.079 275.752 49.0644 275.489 cv
49.0487 275.218 49.2563 274.986 49.5278 274.97 cv
53.0121 274.773 li
53.2778 274.742 53.516 274.964 53.5312 275.237 cv
53.5468 275.507 53.3393 275.74 53.0678 275.755 cv
49.5834 275.953 li
49.5741 275.954 49.5644 275.954 49.5551 275.954 cv
cp
f
41.1078 276.914 mo
41.0282 276.914 40.9482 276.894 40.8735 276.854 cv
40.8266 276.829 36.2026 274.358 34.0063 276.581 cv
33.8144 276.774 33.5033 276.776 33.3105 276.585 cv
33.1171 276.394 33.1152 276.083 33.3061 275.889 cv
36.0224 273.142 41.1274 275.872 41.3437 275.989 cv
41.582 276.119 41.6703 276.418 41.5404 276.656 cv
41.4511 276.821 41.2821 276.914 41.1078 276.914 cv
cp
f
47.6967 302.884 mo
44.808 302.884 41.205 302.086 37.2572 299.401 cv
37.0287 299.246 36.9696 298.935 37.1249 298.707 cv
37.2797 298.478 37.5917 298.42 37.8197 298.575 cv
46.9667 304.796 54.0204 300.373 54.0912 300.328 cv
54.3227 300.175 54.6327 300.244 54.7826 300.476 cv
54.9325 300.708 54.8661 301.017 54.6342 301.168 cv
54.5893 301.197 51.8979 302.884 47.6967 302.884 cv
cp
f
43.2738 270.558 mo
43.1806 270.558 43.0863 270.532 43.0028 270.476 cv
42.7763 270.327 42.7143 270.021 42.8642 269.794 cv
44.2631 267.68 46.3564 267.897 47.2665 268.307 cv
47.5141 268.419 47.6244 268.71 47.5131 268.958 cv
47.4023 269.204 47.1147 269.318 46.8637 269.205 cv
46.7763 269.168 44.9618 268.409 43.6845 270.337 cv
43.5903 270.481 43.4335 270.558 43.2738 270.558 cv
cp
0 0 0 rgb
f
37.5053 280.459 mo
38.0273 283.037 37.1474 285.392 35.5395 285.717 cv
33.9316 286.044 32.2045 284.216 31.682 281.637 cv
31.1596 279.059 32.04 276.705 33.6479 276.378 cv
35.2558 276.053 36.9828 277.879 37.5053 280.459 cv
cp
.168627 .215686 .317647 rgb
f
36.8339 280.594 mo
37.3564 283.173 36.4765 285.528 34.8681 285.853 cv
33.2602 286.179 31.5336 284.352 31.0112 281.774 cv
30.4887 279.195 31.3686 276.84 32.977 276.514 cv
34.5849 276.189 36.3119 278.015 36.8339 280.594 cv
cp
.223529 .278431 .419608 rgb
f
41.6264 287.923 mo
36.8144 287.923 33.9101 285.034 33.7631 284.883 cv
33.5458 284.663 33.5492 284.307 33.7699 284.09 cv
33.9911 283.872 34.3461 283.875 34.5644 284.095 cv
34.726 284.259 38.6054 288.085 44.8202 286.347 cv
45.12 286.262 45.4291 286.438 45.5131 286.737 cv
45.5966 287.036 45.4218 287.346 45.123 287.429 cv
43.8691 287.78 42.7001 287.923 41.6264 287.923 cv
cp
f
49.4794 286.011 mo
49.6366 286.79 48.6425 287.647 47.2587 287.927 cv
45.8749 288.208 44.6254 287.804 44.4677 287.026 cv
44.31 286.249 45.3041 285.39 46.6884 285.11 cv
48.0722 284.83 49.3217 285.233 49.4794 286.011 cv
cp
f
34.164 280.889 mo
33.9242 280.889 33.7026 280.735 33.6274 280.494 cv
30.0868 269.127 34.0912 267.14 34.2636 267.061 cv
34.5483 266.93 34.8798 267.056 35.0087 267.337 cv
35.1366 267.616 35.0175 267.945 34.7426 268.078 cv
34.663 268.122 31.5278 269.972 34.7006 280.16 cv
34.7929 280.456 34.6274 280.771 34.331 280.863 cv
34.2753 280.88 34.2192 280.889 34.164 280.889 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2201.w037.n003.156B.p1.156-temp_01.eps)
%%CreationDate: 1/25/2022 5:30 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj26BfC8\5^978B$-4G+H=&qb/-Jg.!PoeGUk)&pZfpV.kI83=WTnS<D&aRZ9Up[\e[:r/ql*MZKnW4&>qMABf9t@M)[Xtg
%XQc%70Jrt3d/Nn!_SYomZ/=oJPVP*b`L:tmEhTe11,N(M(+EP.7_)]r?1FttUIMBD2k/K(\^kG3,dKYIC1?)4L,WGuX^<^4^*b[I
%YAakdd_"X1^/Xgt[78,N-*3=tL&(s1IbfZXciO+tb'0n?EkCNW6$pAV>ClNCH=L=/_hm8c_2Mf%RaLY#-9R]UKL5\j^H_Fq9?gMT
%CR&YbO"4<i]kd/2-[sn3(XO&l"90sjb='Xjo%N1@cR.&="b3s]'%k0<iinFh9kn7U5Uu`1M#[6AFb0\jhjTH&GH1?8Kn!kE4^mh>
%7n5QZ6fSN>Ot]RSXbd6scN%(Q9U!CP4S:5tZIeXRYF;Mfbf#sIi(*Q.<X.ne`ALZE;Mo&fN>R\FdLs!_V-McZ')3_eG=]OL<q="D
%,bFm>d;K:aV]2b%dSIZWkpS"4Duh"K&atb7A\[cH>&(n==]FN=55&b\^WcHeIH8Qm@Q;"ipfl</obuG2$g>'#DBh2#&l(.'6+aGc
%rU:b#fqEb4=SJko[549=R]<8*h(]RTb#K/V<DTT?6?VgbAfDA,[KDS2@)B/3*rEgGj;9eLlNl_FYYhta<B&K.'<l>2l.?e6NDd#K
%ZF6'<p_WUoE^E!nr"68i2/'DqWWY]>0!bAFScF9;LLQ4kRs*o!lBQ;t2(&DElenj"^]DuUfCGTe1)(`_olhVOUIG*V^cu,Fhj/u2
%>o/!'Za*Q^nPe'0Xfg\g?0A]m4>l;6QA*j?$_JsXX'$3=Z`JO\G3ZY@a*"YI$id09lXDa'`G5/arl/^+/69r+Z"Z+SDmENIPL&:D
%I,;0-Gs79(np,,kPNF=cN-J$FMbW;[?&.S;J^k;ar/K5</dX,E6_Np-ej5tu2o.,5K,Z%?p`#h:./]'1nR?Li#Sd7bf^TJ'7_!D:
%?;mEr<^Y7'2qH+6YtSV`-I43eCWT5'^UYd\cN*J,H$2;69jXPd<oJO1%:R34fG,Wo+m4%NEVKc>6Pq,HH"jcC_MGts#m"Qt^u&Vl
%=G4Go)T%<F)4=/N]XU'+*)k8e9jU_\6lf'cf,h!_ilST:kSXAh4AUr,k.W.q\;L3>FV$f0UBhu"B?9m+_MGt3)UgaaaQp^&nMf#b
%!26s!ElgncHoqU3\g1o[1m79?nk:f4'Tu$5DL(o#I_>A:1+s\C?6VkUa4&(DEd[;H45fl2:J@>tPpr2BcO7ZsjQRbMEejP&%5aF,
%gYjs!=<0S58s_ZeTgWYPTdInW*Gip,mU-.[,aX^`GEtWl=&)nYbT1b'<E86)IL8rOMLV)7Y<&<RcS5.)o?%$*\S6(]kEGr!2EuCL
%q4H^:Zf;1`45sU.c*'1#r%F8mkKYITKBB]a(Nhq;htArmG<Yhp')WD`*c["N)8H)#TD0(.e;UJ;k&X-AT24Jco4LhCnDDnoGtuUQ
%lTfMBMH!HkZ\(Kq9_9"TS"4c%"+.*1<-rk2mXAPb--NWg+/^oa?ren(K?[\.L9B,jOrj![r[mGWo+!lgY@TXb3W_S92bb@n%)Jg`
%VJ/Q,m9D?V)ehq;K'&c`h/(*NB#."HX-/O(N86d@HTUV:9e*&#&S1%kS>g3\rb.>SFNSmj\S"d8fm+t6i95>ZgGUoN6l34*C8<jC
%;qdP^LjLqK$&9s*/0skE,m!#(WYL3s3eHe0e%B1*q0X!/3RM(aSZE0j3Q9o'@@U_Xn,Pk!G0\1]-9&/M]d%&D+j@GYV`]fj4BcrS
%#KI@7@0O`(VD&+@Q#56PRng"]$C!'5lP*i]:B*cf`ES-"H(AtaU4lH`;PqSGYmJ^SMf;$N8-D;$c/Rj%Z(NL=n$jDN>*k._Rp"!Y
%e#Gf@2oBfq$O2D+)k!d>A<8%IBO3U_N!<!-St2!`?/+Y1%<C^E7`,s"dTOp(@F@_/*?$(4=dM\e7S3c[Y[QM;&4tVWP]:@o,0tl'
%ESWLHHC/4]VJ4ai!`Y$!gcV`pJWiTGJQMoHYg$%?0ig+Gle3[CVs2n:`_c,0&iQ@_J_qK<>8C8'kLV5$Ef/$QV^#n$g9b_62rG+S
%`9N+;[s(e5Qdq0gE)`>_d=&L&A8)sIHDYRjX?98p#^JKsTI'mMUeQW9Tp%=U2&\91ruo+OS4:#-44;-2kTbtn'J$:n@tYT%+)9XU
%Z%-7sWF.Q<TgYWsVYb$CZ)h6U)=%PONhojd-&K"(]R#iS=uFZU6g/KD=hUFkNT,Ot2@t_BDHg8&)ka"MA;uPIGKIC%7`J5*XpWH4
%:sd,"PZ$/Ti%W7@[Ug(1P,K)U.]PsPS-_1@!h!4Oh/'ZXj+JK<XK+ub"DpKLA9#Mo,.17FCMY%KMfN#;Q8D7QPL]QDa**$D?tPXV
%K8YpoD$t<Wn1<qAVWnmsN*@DA"*c7Hc%@1_8V.toV57*a'MZ*7N7H>>9*=o5()ZL<VN!j5e3>A.%)dN3<@!H2Ti#AK;14$9kEot=
%M&On)2DSaWYl/f<Nhes&9?HHa0sEPYM4KY=d1Ok??=KI<\f*iT4D8Ipj4ba6b6Rl,"ClsE;[(<u7S#4`5T;0.[Np8.JAT/1+gU\>
%T]l^qd4tHb+<>t?o[gm9_d7K7;?9N-()4b`e)+>8ROJ,R5td!!)Z5rR[aQ/1lIoXX.@(0iEeFF:C_R[6Ute(+4U420/XF9_@VVIQ
%j<Xm>&ZBOL%%g'i!cIR6"HXT$'bm'lYS-^5nkA.@$o4bd9VNq3LOkGAs#Hqd;P$)B5C.Ja]R\mdeR:?H5Tlo6"BI/@$<c_-*C/Yn
%`4Iim*M+1$+[>(LI-rn#!epkIQmTa#I=@hoik@e6!'m+fQQP_WYk7<<QV`Aa"GT8`8&i;/(rF6'L2@dIMSr6i(60FflF%WL8c=)X
%_b:a'*2<TNiE.4:n.-_F_f9-26jZX2:h:6E*!qf'8P<9OEC#fW7[Ko'`uoDC",dp10o?X7Hk];X6d\:f]OJR"_S&0i\1U`XUMQT%
%#o!*OJcftfFNT\]peRU@TNSu68]XN$Hqr-(IZaf9!;/C-V0;X4qpR:d*3TRj$Yo9,Oc@_fA7TNNqp[rm5W0XeN5kG0`qVQ6;MUb2
%1JN0)%Dm4:]V&Lt]\r!fS&a1$#.Wq#(^GL0*BsQT>h^.A11AaB7obE8"g\WD9B6i9()b16p>A_QFV`kp5u^@7Xhq:P@Lu2?F$+<>
%klbNQQn;-i;]I+@7JYoa#K;7kPPV/#]p\jsHdGG$>5@#4eh+oJ.QW,)ktgn-8I[&(-D.)H3Ctt.o3umrW3W(m'C9EW'rtA!c]$Sk
%Gk*GbDI&EB)"2a'9gj]`!?HoEnhTif84*\S8r=O\[7K=%HLN5scC,3D#oqE9d7=6@6+$_8'[F[[^rD((T_1E:,9stZOJNVD5D7DO
%fQBJ6/``9%eH4JY,I*AlH5!$a*OT3?p([ZB%0O]8JSKB[eugKS[mCj;aMJL`;t#%28rlh!i`(62qn=ecm]QD8P2Fk/S].B/s#D5f
%gh=o,7$ntFm_Z7:O2r'gC()$h_;@Q&8h=7%Z4i'j772Gn3hc&,['7D2CtS!,lADQDi47PYhWeDdY0/=;"HiiH-tL*cl.SF](W-sJ
%8YI$YA''K-:T1Ls`6l#gYu2ki2TTUo1"8N$Wg]bQBeYnV!ll>l2^aWCL07)FG&[O6RW-R!6-ff0Hna@dc*9>Q]c4CuHR!_XWe4Um
%W%P`Jris'XP.2N+4rd<;'t]V=(j]QAVCP+f4P#U69'%$99?U.Ba!L)fhA)$J3"gJ=4?('._SOMO2^l4-bXr"f'Fk6(O,/jOrRN#+
%R(RJIGKMmZPii*N(CgW%(5?@mGp\Hs-O_)P")@dD3?43hL!,@92%fEEks#gUj5lIZ[Cg#2;4$3K`3@-U79IiH5a$mBn_d]FW"D]Y
%NR7eFN3Ot`k_d[jIRcq*CYS%j@h^5i5n==BWD"o)7s0*fJnSkf`g!icUNU)Mh4mCBF]osgS`4)!cV>>+;XS[!!t%W0BaZI%g3Wn)
%1!fE5R-TeqW$rQ2Pi8Sm:o0!&Qs+%nqZIlMkD3o2)IOsm&O,RN;>J\t7U4uJU+`\N6Secgc(f<M5#i3eF"'kl*EF=(2%bZ]YuoGq
%b/%XX-uH;sEtH>\&7?$0Qr[e2#l%Zn*\eY7k\?-f`.c%i7M_@^m04uM-3:kk!t:rUKr_%sQESVtC-l$r+MnkIn^=KKK)!T`R$!8<
%1pR]j*Dj6a$#^5<+i^rEgk:o)>=<VI<VfNO#2i`g80tB[(3<m5-lepI6&+raCj[Vo4qb%,F*nnibi4`rZ?2-qOJ)8)-]\Q?#+$]*
%9L88(O:fs_[P6KL@22N7FKDPr/-Pi*\Gr>W+@^oIOW>,J?51e]JJ^rL^'mb8&ng)uIm:gZRVG)3Io1Xua3hN!FPmYt95rMu4\4O#
%Jn]abjp9C+m"RH&0[N0&IN#m>dsrMKrRd9HF4":NJ3D?A5s]j"9XX&33,TDh-uoVj9V?2nX29>ne28g\0?9bHb.F:e&2o9/F-I>G
%;&f];FbSW+2#B%?RcBLr$isUI%W%PIbo)C&QfPeu]QKAj(k#2(Lo"2!'&C)R`^[cL>k]:H0i/Ma0p=1\^uPLB0#ZH6'3:OG@9uRq
%SkOc%6F<T:P9TM[LKn6*UqPRjZ\YJra+m#u&4UI:C-!HhF`(m)9UM=Q7%a5\Iu;3%_XTZ]TI]r(lh\!;R[bPR6R)#/_:8(4)MTY.
%]FIBmZqd:70eg%er\__t$$#2PcQR,R%#^Ur:\J3#,g]*JE79o@J4jS;M=,EDF.5uNrXO>pVXWJq:]t_&n=S-)\!0_a-SR_%Q+]08
%?t4D*bE1K!!BrR2'DW>ALOW4#.>tVqL/>,h4#(k[V@X[Mm$,OV&96BBQr/<A+Hs\cO][@_/ht`Qp<[2W39\Ea0]n6@LQIP^@2]^X
%,@8H6ej%A0r'TI1A)CfYasQlsMOW7lEp;,dI94/[e)^"u9`RTVJV20PXFZSU=I&+`I1`q%=#bksD%ZJ>GW.<a#\4-GD&M8So2uZ"
%F,YQfXC1U>Q.$pc"Y%&Jc!rc^#Y%XHCudWd7q#S6p(d,!cD%mDgpj":\fp+[16a\5+Tq>+$m`i>QY\rralu0ocVQli?H_pN==P0$
%@UXsVVs^D1XgFX"ZD%tcfXaD"*H@2XSiNi#>TaI8;R@2a73$bdBe8lsQ(u!g#e:AAVb(-mErSYJ7B'P1l6pZs,crQEFn.h[KjVCh
%iauAm0n*l.h#UZS"sJNbkgZ940tAe[?M=RgL,>/rV;ND/^S".2A6B'Z\;ktN;Ia2,AfoJIPjopSGJ=N(AYqh\K:&0&k(j#3L&hU>
%',+'V:-sVic=t]X#j`J8l+2gOmPB+TF?o*\kJMk%NXs<B+]!*f?ths<DW0N,OX1r#"M5>-_I5JD-`!GS6NF[q]<lVnntN.p-rSJK
%Oqa=5RNi)#;nFu"V(3!KX?X`7U;TFK&dggYOHq'=PL:[3bY4"q%]srg-UqZ9M'U0R;(uQ*OrtQWTus<b+A\Ge'oaGmCPFcGo,PB8
%BMf=OlAc^8M-EBlN$+<0C0g"LP/K=HM1I,J3=0]QJ<'s]7\VgaMDX#1b(l/h6AXr0PnBY-61:,G]eI027NCL(qBq,.C^O7<'*O6i
%DpktK\q,lP;9Ee)V<'`tJj[cpUP^8ejtJt3C!u&!b"m&namh<$J2<#3Kgpt)@"BgK$r$n3A43.#N#,nj%i,YnES@8iJ.o5eLW><t
%q(SWOj$oR^;7&>@NT<s"VKZ;S2.;(RPDbrH3+8\6Ib?WUM.*EGM'5]jM_7EhDF'5l-(%)O*Yub8HA/g@%6eaH#Ct:P$KD1T)sL\;
%$!`cko/pX[;]ZU`Ss6J+PoSE_3(27&2cjMu0!/fID0KsS+j]@m_EspAc\<=?WHA/q,8#n>!78NL@XONtJ(p!<:IC7s0"$sf-u$_r
%\Z0ZT]Q\:g*tlD3U53h.@s==+VqE*'LT%:)&4:.nL^/ssol+/#Ne4E55b]`<KkWF@^8%KMEqZFl8'r:goLihD]'fcm,'JnHE]gD7
%BbR8*(5K:bH-DDl;1rMd'LY<9;P^>ERd#[hFBi3K9sA#JZ"X`cqF?TKd\]#+)p4io)*K`dY`Y+I-pKRB'%EY\UMb]4cQ!#]-Vpah
%.jZ`BUJ-lr\3r)T9pU!H!seC^#k``!UMND?c$D;^,>Ee"*MN?uZ>M$eg^T_H`l`8r.$.&!T\oWCYd)qX,rC3'%)iZ#A/.RBclBB-
%aOtOfFG:D]jc2R:!J.97@cK^Fj_8@`j(&dV(sD.tCkQJ-n>&&$-LH\H<>lmZ+A&Yq9$E0S$d)e9gZ.?P&Ifj=4IBZV1F=K,0d,*_
%;&@?d5cD56"S:DR'k.4EaoWmm?nua8<!sIpK0/F]+ZQ#`!bWQsfEd*?h4195LQFn_B%A@Rmog1IQO^)hJjlPK^u)d??k>ct?D)\X
%#OaKeO<u.+EEA;O7B@[>@sRWcfa[q=e+5UbSYWK3K`=)[PT@f7@[6N1LnChAjCL--d7I'lC`)EWpIeM,-k)8uJ/$**6,=c>CPZf4
%6-KbTXi%K),kCNBR1WIbFsn8olPl\+Jln]snaT[.AHf1_DVC:Ojq9r3d,ruSM!2ut*uU:-8d5o4M)ZR)?Z-QO&)r2b2H&5aiMc0?
%)/u?q"c(j,#tkQ65Z;TM?P%1?q-u/pF7;tU,@mafHIDD2P*RXF/Q9a?mMO,S+u-AbDIlJe`RHV&[Y#TO<3$sX\;_tiDA]@iBQQ4p
%YNlE,B#2M#AmpcOfdAd5^kbOOi9`@-rIAI*_HJs&4ga)#*H!)Cfa_O5#-98G$k8A;<pBGp0f=_!V$=73-@SRRRo[5/]QRrLAH4G4
%X-tXo-$$G)T7@G#<KG!0l-@jL1c_c2R28/OHmc6YpeaGdOJ2eE8Y%`(TDUV\%bH4K\7k2`<Z\#T65<CphK6D$%NaeA.UDjmPZR")
%30>+&:lZa]</:)"3fD(8bDTmnRfn>t7:DF-VHC^k?eDLsn[\_jB=:jWHQM[^!5;(`W)5(sY/T/@"2-ed>OD8oHpn)O>TD7d6)fan
%(&[a>"+KE<*0o:JEi2cMf6=8s[D2^MS1`AFrPY+2B[n#tT7/M7GkhLa<YESth+-J3i>&!rGRj#7]Ma/h7#1TDfC0IO(>@33r/B)g
%k?laXPthQh\m>9sQYZ7ja':8mO%3cbl894H,3X!LoF9Z%YYL`AZ(g-%'<=pDdB(6k:bPeGX8a=X6Eai-Ksso9Wep+P$*Z*k[%VV;
%^3d!!c!KY?)/$U`="]iB)d`K?<(LO<mH..&ZrS[^A+b*hXC1fD]u$)Q#DK/7>a;<X^QCKiQWeiNS6DbL\)\f0DS/"GGA<`)@GMEo
%fWH;=Em_I+82j`--7/`e0j;r(ham6WP"%G\d)tu",Pil,7hh$C.(iYn^KPFXh=G-S?^*ZX(2Mbk.[RP`WEJIZ2cOhY2-QhCfg#;[
%D##</+\V@DDO#kc8r6"hO_m$][0e*6ORkhTllKG[;]OmC]rN"eIp9pHVCJ%o-9`u51erQO#u?EHV5e*S=QrN"]E#nc<_R:E,?:&0
%nB7$%SU@El_MaH*K>/'=nFU=Bn"<_Rl0hlVJG0Y$N?9BOD'kSKY*?!VEXgCM-sa8c52b]<<(o4h??_sW9rVB6pf4>f-.[9+?N`%P
%=6g+6VFQHGh2?BcIcF_4.uEp4kdl'\Xnp9m[mf+NEBp(p=5bV_#H[R]Sq'ZR7K`1)$lJuX57hR?c@dfR)\(10&Js8f'a(m8mJDK5
%<T9\:H`>Z/M#id<2pPCs,6euL`Z6-[Id-^+'a#(OnPQqZO./gZ[2YHLcufMAoU9a"OXh&dIW#4G#,U9;gZ:EYPni`qS8.Ge<<D&c
%1e:?@LGp!g&WMq,pEiU4ME)TZ9<[UC)ueGI:h^p&dT-=]JC?tT<c(nJ$SCgO/<#95`tUFa-E[iJph1]7T8jO&Tm7/Urd2K*8Zges
%pcIgFa"R[tED446rDD:a$&3u/ebt4-*^^?43`X4)L6nom==f=HmG@Ym![UPJS]"p&5;WbRKh"pH4m-/u2CHM01M3fFb`s,#f4!ga
%N>FeX/$@Z-_ZTe?Hr)=NB?jah?tR^>+*H^TKN0DLQ]#9`b^?sh0/rLaIT;'II(B9a0:24Dq;meZY?:Zc'q98[g(a=(W\Hs!:-=Jo
%]>#!e,QAL.kH`ka,QfFA3FGL7U0:K'a2G3LS#p/Fs&Pl_&W>c3KWF":'sQ`+S'@*tbm^Jcn[=p&='&,22.ZQIa?hV;Xr'[n(@P,d
%`do:nRO[0hSr+n`mio[;PLg>%<@3mP<@*A:Y5<orfkYF(?*@9,C)fG+D/sP1;1//E[;*&0h$LejPP]qBB6)WG2!7Gpd:K[F0u:4^
%?V:1nB!<d+Yn__Pj+OI%^&%j`7Q*oGh73"_r^jqa#>h5mInQGqRl&+Q/r_#Na5!e(U[R@b%E?^2@/RZ-0[t>T`-:J7e&FAIQ)^t"
%G^fOb5<"Q8U%n>7OIf"<BDQ^^Cl$(p/225$)g@7p9]n%K\4M3kWC7%^Vaps/E--!j(iWlZqgouG[_<arreS?tN&M/tE#!pi]l0;r
%4aZ<tUXZlSpoQNk9U'S.KAOA$@MrAN('fZM.8l1ikQKdSj'Yb/]_d0<g;fJKEbf;KnaT+^1!B.`I9Abe>-4</q#8SV!T3ECnM(h,
%4r!c63OPPU;]\l='VJSMdf`fQE<8Yj/e)=+0KGhm</dU,%BilK`t<m.ir(q8duma4/=!n.qo->8k235i>AM`,nERe+dX)DYO>pDB
%j"A?Kl*/i_M6WK<RL-/^anX>(l6HiN'-k6BVBQUqH=Cn.S-;!.#NIIIkk=P5=)eY58Wd(QI^VHFW[@@SIk9,7m\XQS`8fMS"o#@l
%&L1JK^%&+&^O5%-kuQt,_:tP.pI0AJ0m5kN%UX.<HP6pBZDo6De&DAs@PmIO#jbXth"YOT`1X/CgljA,&XWCE2Ru_l?M4^iI_X(?
%=.`$K;t6Nm(jifWiTX%R%?GLZQlPo@7jF&+r)FC#^I6D?C?3^g^s\ipXD1o.Sn2.B:L<H"','=Wh_&D`46%t,@K8,C+sDu.*d<_X
%k:HGDE+R/$ELSsZZ@rDNEGe)$>5*a,(oRfC'F]FUo,e9B=8i!tZ<XF+?Aug=0XV;c[5duiTrRhj<5U)A49j5k`=dW4?Q=Fs<U\04
%M8<5ZrcKck.I,_*.+MKY%X&25G,7?4#<[U1;!%QUb:A):I`0#7.,U?BLoI8^k'_f&'f5a`W`1Uk9CFIi+##DXW)bL1Ip3k-S)^MG
%X2MgX<P)>Y_Q/tPZ.Ss$T:3S1>g-69L.mgk5YR,XZf]Ie;7[dT=XM9ElJJSa6n(es-;#7#-:V<9Gp^ZJIq<"=h*:UAZksDH=Y@iJ
%(Zc1C2sn.(Kk\UsM$(]7kh<"tfWe,[n]sX\iMOk?;>tF.9N<];@2a/`iW(\nnolR);:J`$b,!+f_DL>J_uX=f7)CJkV6<HHX^@\V
%M)dGuUrJ(@j!X`p]ND^t1JCL!%1eYTLd*qYqjbL0h-ZPEq`?EZEtE4%oiIXphPApX1MsU0cYf/=agGK=CXu1^`E7_[>arjCR9Z3e
%\[L=EP*rj=1Y9WLXSGD_1T<9rC3PkV1Lk96XNdQp9WCgF<"&.#?2WhAMb+V#0p^`^[/i6sUV!jp4_(6(9/'kN)&m_)d8B.H^O0#S
%IU#RaC!?Usf0#Hn_MjU"a)aD(Pp7*F4/)4@NH<@_"Phih$>YiTF\B'$Qa_nXDg$9Hm-9nieLgg7X'6KkV)FE"-LL)a;RP^qQ)]JO
%690Xm]'m%IZ#isDmX9Y`-Ibaa8Z4!6<YFo.$%KkU-G2lC>Q4V-DL<<\e*&RD='1NqE?>^MM94VHY-0@GKce<="r(g;HE@Kgkcc)f
%ldI59M.2@NET`pE'Dr;$8<^=%GF(,;pF-BRP)gqr$;ApfAMIT'*L%HVL'&s^S$*h7L-^/t&K$JsL1(Xr+u#ti#K,@Sjk-ULY>K&j
%<;]c:0g(":-FWk8p6U*DO^W6[\=Ffi3Je[eGLWn(PCBj%IUfY_3t8Z'cLua#qnKK9ha)4@ao:bqX#jqj^]-JGZi/e7rpO\'pU?V8
%\-&f]Rk[X#fq.Z"D2aFc5sO,q*TPN+CsR=<AO*MBFk)NDoc%Bo#(H@/Ep`a;5g#qhRhet*/)Y!.0nAP,E*iUb7b,G5\eqp$2;=*@
%n<m&2?<&#F52I2llt(C"aL%V^Con$S5rB.sos>QGka4TodU&_m9YE9#l9Lo'n$e9&jC_o,=dX"@-C]_2AmquJR-]:>AF-pE?8m8H
%\d?r_^Bq]AY%sNa9!tt^g2-Q'c!&#c%c#[-`R!u4b+0Bs9YV!30d@X2](]eN4#(.6I[2JNet?q\N/2UZo:EiV\IpnAHY=/NCMlb)
%]q7GrSk^QaX)Zqg\mGG[hUqh>%`Ugda0<%p]eMe]*g!_AKBM"DjSmAT6,C3JLm,r'Suu!CZ++Ze/=QfLAq?:Oi+3[KR0?o/JX9Nt
%AJTM.%2st(3:J,d0GK#)"^]4$""b&Rj!Q9e@2;+s"d&.3OV?^/:36VQ3^**s5rJAX+&dLA`#guII%QR9Z7h[qQWcmcBjg^X'#d,+
%q[I039T2Dhf@\t:0l:9N0sqfl`)!-Ls%=]u0`QXiP)4NcNjDrWB%h6J$e%<p*bU@M6Cd&?=,sU+R!rn[-Wmk'DI8jg^3!^mRbk_;
%\abQbn$B4Sq3A"I-;cPCNjFeOSJL5e[+THmHXr`%eQ((:iUe(<0db:B$nK<l(<kb\OW$e&r-Q(bM"+KN<9_,)\=\`15K35L`%q?]
%+5g4R`M?o7DU-&-@HJ*gHV=oIAffZ:H"bZG3UW>N/rTuZNfe=B2TC7,L0rJ-@\E"5W>I/5:=L5$\r1&8hP4ATl>\Luj2Xe:$nBQ^
%(usP%9ii=PR`.#$g&R`03/03mEJuk2bi0JG36&H8Mb1bM/<2IT8=@FO-7+]"nmWmfNI;LN[a,q'OffU/U#hOMC8En8bM7!r_?A]P
%$V5tc#f4I\@U`%0C@.fsC)$qATH`eNeiPIK@i_8'e@mToPZ3T'GqQe-T5XL3gO?OAa!'ZHIrA<]RhOi%p*-\T]5e0tn67HL$Wior
%Ys0Q/%)lYUfel-F+IcXmoVXP%lu&EJh)tF>K>dP>SQ7>&l!Ctd.&QcoTiaeD<MNTO6Y]RPVW%&XJf]-H2X!p?ISSXWbB=a;s'u<;
%@sP'6DHbAh#Dn)*8NYuj$^?YuPk=B47fZg'3ibA7&Z7Tk/$kJDECfn'VC:OV%OgA/n.c<Qs-88@egRk@d^Bf#TNNgp;I]1=oEO>c
%,TH^H0_W_WqZe<Sk0<kZ!6r0eR5ajJhHUI(1@sX?hV?>ERsB)(m`eI7HJ$H6Rj<J9`_@$YlH[A!D!'$&Z%SLTF8n-`1O!a!cGaqh
%c>0iIFi0-T"(UfCXf4*pDGn,-F,IW@G]Yn4r`h"5r)`g,R"p+1>p<&*XV0+S"WoI(S(YIfpO6(h$KT!%?]["Sk]:o5`pX^M^ZU3-
%qam39pLWo*0=>9+0en:FWXR2H)F:cN=nW33RgC^Ie\+;Koj]4I(q82p;3%u0+R7c=)s%[IM<(BXh,B`4&mh#A$QuUf)g?d>l6=Wj
%G1Y/a#,K:6^;^*b`c7>^heusEKe/-8!FHcm0#B;b2n1O9@Uj.^"EoaJZ"CUfjV@]WJeubeM,^)g([-<W_(iT"VTEYVg2)$:^JloH
%RWc.WA*B:EimM//G"eG`DVBVOh)&@BA];0u`\55.b_U#4m_'46*^a7[5>.8bXPL1Tjuo20\Io4#]m)V2O8e3.82BQ=F[)#>>b'!,
%jL:%bs';g.rE)Cu\&fI[D)p92.&GcI1F)T(Ki@F1e[@8$G3TLhM)C0&2UT_qqX<**-UM'6Zr&ZN3p2N1&jPN`L8g)Vca'ap:_Li&
%Yb**o&4<AQ%_?R-$jTfOB,ChiM+:r-`nE/\*E4BfK6lE1CO-UD]geuD;t4@G5Jol<Qh[%nG>]u%bPZ@1\=G(hR<&3/Tfc86irR'-
%/'%GO1"2$oiY.BdDN#gTrbK)b&gPK(0,pF/ULuXXnOI4HOVBO(GPI-0?t9meql.<OB::JcSZXW"+,@$mqboh/_Cm79GgK`TM_c\H
%L@7Cnk)eYd8JL--d7`LQ#SN$iYMW\Qa_460cT%(S<kNY&Y$>c/&*((f()'Vm)K*.9m-KaknReN5Bg,Y12@Xk'XMsZW`r:"8kmX7[
%n0J_bejZC):=hA>GHeNr??K"KC>H)WRTYC$^Fp+,S0OO@JT*P.2tf!mNUm=c1P>Oq)<oD2hoM-&dhMBK6]-"!2hbJmAXm>!M!1Y#
%L_0h=JC!4E[j&6K=dnF+e\^iEMNMTsZBUnV'%9Tf4#8Y(D_b7h?^PEm2*$=p*5"f"[,G#S=)krG@16ikU#7'jPhB_o1Hie8f9s5F
%a.8:UbX*EO#$NG:/R:"/)+cN=*mS%;jJ9`[-S<=.&'a$m?\5YHhGoi!m:nBN1*e>*Z0:2?<]u%@k_bfd;4d<]9@`O$^]&FRVfrWc
%4"@_upE=rb%SS9VXBk[Z9V^FV8aLe(n(M\*%N@j(j/A:NI[g#QjjH$0<DiFr<\(AkmrmZecg17h6qU,YJ;?t`%tHQGIL*c_)6QeJ
%MQ5)(MF'P$s*k"G?%/,XZqg,QkpGo[bA-EkQ(F'dQeqm.GTbR$!pL[)R1R]9PUc@3+&l,NL\OMSdGTLm4=iLI?Ra`KD%3T=P\%J,
%CX=.1PeeHEU)Km\)SSdQ':FOFjp+)`JA8f`flpPU`.$_E7jV%1$XOl!42<75QjdPZ,KY[Sf>Y]7JMhb%NkD[TCAA:ZdH+YG^ARsI
%H>'`*'MX:H6879o`79d[q!3E""o-2]jqE]"2am%!V\/"^!mO_oOY21Wl/g$Jb%7]6?2_OB8E_ND1kM*:Y#]4;^jjFN/YIuTMfi0Q
%["FDO"U>2SmFUOo?sNi!")[UIFn;(l)'nhj/qtkCKo>'3C@gGSf4]&^eC[S8?]=W-K@r)VNt]9-<H)I.XAZT0\FiAK%n/::<?I2(
%J=!)^IKA9gZpgo$1iqZc%LAL?J;1-):87OHM_`d7>.BBt'I=1``8Z_8R(dc25bV"f2d<]4*u#)m!Ti-*ho</#:h&6B;>M@\d>b#Y
%2AbXTi5>>SqJYlJalmiFIsXB.`QHH+n)LV.a+6sRj\fN5`40NZ9ML(<3VL/W0XSkfq3ZtT__T&VE^t`sl^MF!,+\1c]moP&FN[E^
%mRZP2-L]A&IZ+S4\o+BeB-^=D^1rtr&c/fdqZdXf0iP+^KC#np!c)Ps^M4cI9%ThJT/;tm7Uoq)OJLrV07@d3GZYZQkf.'Q'u/iF
%_:8;jPB$WmAEJdo?4r1Y6FFE08FNQn,)Ep_OjpN]nn"IZ^Zm`j7h*5t[h9hp:Qb"8hK9M/Ie+n+lnr!rU\'be=c$Y'=Y$t6"N%;G
%L[A-Uh29U5<i=j1p:T[5gUm.m8%!ZThSmPq6jkrLlWsZh811PZV.-0%qC-&qRAOkV.XR0+A^,!)'6L-u6A5WX+.<E*5Luo_F]a]:
%WR<DGTrG$o4-Qc#/[g7;.phhUHR,e"P!!Z=StRsnQYspQXF!AR?dKOu>fD"<eLeA$oieC`#3jr3]%s@ilQ=anR\;`oQUOPPFsq9>
%h=)&;>jkM0,O77>Qq@W?5Tu<!'.':rYN8-L5(u,Yc?Nm?\(+[@[K_D3h5CKFVafqaV_l-`M,XHC<ar[CC3c/BEiC@-[;+rd*_\m5
%Fk3UBo9q$I9Ea.6.JnQ+Q,Hg]l_AAoC\@0i;nh$9f.Oc-Z!VF9Rsk'ng)d#\%CZg7@jb%*of<*&9Ut.0)'f^,q2K]q'Sqf`?PuaT
%?1SIc;\E/_3.WA,Q`>M/"`)UVk(jitG>Kp*C4!I8M*:m.?g\X:g;O@02BQ/*(#oeYCc,t:JPls/[R.C8C9*SLd61X[F96]Jr!$J(
%eLH"=G<iN?cn]M=h<IP^+dEY/Oh/`)Oj[.d9VpM9DSBC/9Cb&p*WUi^G*"QFZ4'M+noLu<c1brVYDcr&8JV*V&OC89<kko/Mpr3N
%5=GeqLE88]W#Ps4iRKu<b=I7@VUA18+O-8PO$7Y$`_g%4:JK8@5<OX('[!75YV68HrWX.PLA<ZQ.4*cD6"4d")rLko*dGVuF6`m4
%^fmG_./LnH0IG?]C9?]HeI6.M<D.jYh._,Q'$:Tc=qnQQ>IBU#NjdY/dS)U0'hOIX<me2%`:hU#h$;tP0h/d]q@2JL5ft9cZ2uo(
%&_'4F-I1gOE9BfG4)Hc9$`qB@C]03sQ\f*'b0-aGOGVH-`#UuPWh_'a^lD$:qdn^9.mK]qjnJY$Z.,q0f&l!b`+C2ILY576fQa@G
%3b4d0<JbHZQ:rC.'4-pPNhhWNLm@f;).#7jjKN2o]@Zh^S,#OW"?.</1.KB\%raZWe=S5?0&V'<gIkj?BQ5;UMp^*;%b^]Fg1?.2
%oZC`Z89Bc\meU=(TO#uUH[")*rIG-!m>pJ;H!@:U!\SC]p0,L)M,98.TGfP("#P%nl.7?R,%Oi>%>=BPU3=(O]rE@_l&._54_Uq?
%;QJfNAf0H(K^76n/%;KNZq"k4="/<uV.DZkI`6*X2LF``>G5a)mA:EbK<1^-:]rUZAR8KR&b=#/F8cmcG;4+5,EZblI1X]?M2YVV
%UdFGg>u)>dJUr-D$6VA:Lbl&SX&^=NV?O's]dD#_O/R79WFn7mar*Bf,8BIkL(WODLd_`K'rkEK.[<MD:=4!GY,bkNL"?D>q3#aL
%Z4,mO&->0j-urpS+G`;$L9bOi&HRb"TD5=V+5Vp2E"$Rh>!q7Gdkt(X+R$ZWqf2nj&V(<n:TVO)O)dAmFYJA7?l7*jggRm&N4J@B
%`?EH/035l`.#5<MY\:..nBjlrj[Q6_EDLn]<)V08XgN$JRcqd%:_h*Lj+[/Y2Ul*-nj=m^j\k>u=7HnnH^a>:Y7fnUJ[d%MH'GX/
%72\L?fO(#HqH!cieVp5H^uRi*0r-2#>-3LOm%k;o,n9b60[[ZngXX0&Q2S=dC'o`_^:Z*1MBf3pY!,<O"3ncfU/N>Z:p^&I7&--L
%2:/cR.AVL0$FMAINtqqGL91PY%;\ip*"%iebQ0LB"*OD.!&H[Z?B:N18)t4Tf;V#s-j-Ntg!ZPQJ8kbBTg6K9*kr/Z9WD*k2J$fM
%^L_t90>$&#^0S-=jZ)Q,&<skS!34ltJpK6']^`eknqZ1jm#ri?N?%`JYl90F6*qh3$mu)p\;A=]6i!1NZ%NrC9rK\cf2em$dH2n&
%*,*?CHq.fmXJlD![Etl&LJYif[?W5-7nE$-0fZ12,F%I2h\lrl&qf..)1Lg-R_u?M[9?(&HdU!`3K0sY[cLru(n!sFps<k,JKGK=
%dmhjTl&48-qm&5^:9e&B>h(l!V;@h-b+[0m?b<6CrX6;"_mul6?[EV6*6!hDgf?pE!p^eJiWtO";cf*j]qHpac3cJZ=_FY+9.2^p
%H"[:jCqX'Z6@n9LriUVElaOSK/\lA^39k.D%`&(dV."HP2/;eND$5e?MX!..`m7L&22>V(C)#EBHlfK5DK9)s4=qM*h/Q$5HX=%D
%(,:U#S:%:SSX@'iL#QWZ#:;dL($h9No]agPg"frSb^j,.V"4Qoa^fG(m2is^>U83ED<\V(_rpH"hHOYUadcW'cgU+f#K^N:>Y-Od
%c]=]8*'S/KV>U=JT?cEMp.^!UB<V=+kKd[Zj`<&BI(2#"9J4)IK5M]NDu9$:k8t+re=JO(mAfZrK*FN2VX9GrAb]co(&XMAFu%DA
%*M1[<%9>0TSULFI!e2aQdGsr`_X7eZgn_uLmVG)+a$["WqQ@&RNs0i'40S9;r38A>SNfk27piFWYE^L1GRD@T/>^dUi8Gj1RQKA/
%\383tY=AiMHokPIT!%)u:"@IaNn9`ha-oV=o3&iu'd$fCj4a4iXfoqCLBkS!1S`c22X$9sEFEaN=m8o,B<OK_q.[OKl8RIaVoi9D
%ENYj-l$H2JlC%=QU\*g&k!FMYo2()4?N.H_q-`62mV;"^6LJDhs$WnWl`!8GKRq\GI.BbMmHXRPm_Sc0jn"mdr:B)\rB]J3A\BKt
%>Gl7TheCie[ESJAASY<*"Ie?U+W=5QqF[FMiU&]Z%)%)9JCU'[_mNgaTL*H)jY$V`V3dgIr3dk$cYXe^%PQbbmVumV2A&[Ge]C`[
%s)=&tG;=*o*N+sV:DYhAlgk>*BK:56p![Ynlh8Ho@dVFXS]h?)F67Y@pupD_\"ucSU,q*O,/%F2Td;*>hL81#C=hkNj8A>=A\BXb
%AP5gjDldjFn#=XI4tYEfgO&_u97P;@r;=*Sqr21-FfX&s`@=kpCnsiJ4f`0ff0qfZ@95X/V/h%VWP/8u.\D!pEU`(5rT2S0@9;<d
%YIir'^U`*HI^jg*4DLd$^7E"?I"#5CXLYOkkB;cq9@-tAr2cu4b3$R;D6Gn%oQ6k4X01<j+-BF_?G1lopM/rVG4K6&Z`RO#Ut*K=
%lEfj*A_L9[c/l+Z53TQ$rr,qW@Kf5N&i'D[cEF0^aa%jhP&nV*?]rOd\H0Y'a<m*H?aOdLEroc#%mS>c<t=)79g7?O*tkh7G+jfO
%hW9gn1nS-X3Qb.`I'('XXLWB=i2\^\o&O8#DXlaVErJr(+Se9,]hC'2^r;4-%Sc#9V%$u`\bri45.RtI;G03$\X?'m^7*4j+.[g@
%9<N]qrfTr\Y,ru$Y=hZS9',8:;Jk-:;P.kj8F#To<mk6#r$#i<RfAVZeVcoFH+'n(h7W8?\a_`V.CiTSP>oXOMs#8(C[8rJo'+hk
%lf>CP\sgiZ4No+Xn)l?egP_$rao'Q<B?B<Eoaf1#_tncOj]Xa:h"):6Op=ca=-?(3eo('/A\+*gg"eTMYE_&MP@s89F3-AK8)).0
%(JepfQk++AgW<6parce=:X)DObHp5mAFWCm61V%c[?nP*H*-/pU@LELfm*BO=Z]=E,ek,?^F!0G[-)MP?*?CM?dJ)b/S=,]kE^&C
%]Ui?P5#parRL>bNP^RIk:070?0[-'_A`Lb"F0N#6\%,B70XnIN4e@#OGl)V9HZOQiQiH^+R+qSL>FsUHnGI7nYdeVq*LC,5k?bXC
%:?UI`d*[VjH#E'0,^D+g=b39M2KuR>dVJ'>111&@=$L_KEL>>*CMSCeV"%iAd<Ksn^J_X*T3j[bT$OJ6>A)ete5th(MV"AJr-@mK
%rn6h.GOr@t(PhV.:R(eThYHQ&q4eJ(N;:pU:Y+[ccEAeDIrt!toA5V]R.md[.e@#SQX=-fq<DtnB"kgC^4%b[q"3jfd\H1%K@NaZ
%2\2.tQX:f$ak)d_mY?_(&%5fqP7OrZFm6_`4h^PsJ+_TEE;Z[1jM?+VA*:[`os:CuhT#Kj#?UdUD][\_DRLY:><Ag<jC\8q%(!25
%k$W+9[Cu3@5s=_;$W\dk](#K&EGH_m>b*G4gq:4$fRN^-A`:R&4^3.mf6XdmWI4ScU%kHp/UY,(I'c_b.T@1I7F,(@\h1X"9J'<1
%MhXC(\[ZXT^0c7g8h\(9M`]MCbJjE=\(/IH`CE]>hn@aS>kF8DZ$>Z*mh`%8o@.5rD<6.ZZ$F'l[-"R,=Ye8dVNs,ID15U0]W;uD
%]8%cQV5"Q*:RB@"bOq]-m@4'N/*lTf;Ise@@]=MIlmYQEV6),ejj]RmB%_4,NTDNpSC[7SIe1hT501h,e*>'7nqR`^@Cc0-^:.@m
%.+WDho5\_[.H;4Ff!DDI/,%iVf#lH;c.'n]f3ECY.!8a!H1N5,^@Jh#I(<//3lPN.^6Tf2iBltulGM-2qtZ#ua5#:%:S/T8&"i.u
%r.hHkCYlt<2?2.CbHgm$iGIi>qhM<-`V\2NQ0XL3RT$h#h0_D1\XNDs>cf&0b*?&SpYRf.]t*:BlBcoH[G%'2[UGOnb89c<7p:B9
%i6gSmgA=Cpc$\d'@A,^]kj?D8rDDO[^AY!NH$d7`=$=6&>?f``?*cK@dVJ*"YNK[Sb?)*Z1\675pA)W%rn;5Sph$XVrD#qdB&<!S
%XMrA'lIelPLIo0A><YiRm6,o[nm9%ZSgqLRQIk;+k`=?INfPjFS`7;mSo$^l[!oO4db!BiIdq+maO+8mHM$H"=^Fif<qP#8\&qXu
%b:>5L8+XmVFm`MFI&3<)'a@\TG*hr2(f`_$=]_5cXPBbdT!GQ6Y1]7iWFfp\p%d"'[d^\hf!HetX4gTk]<&]iIX8'.H'm=5MZ/I7
%IGLB"dT:H:<S]E253lACo5"<GcFhLg\dtCs?hUWCA+'7kJRON1<d*#<o%78*?G'R71Yt6AcnbO.&"5sdJ'^#RD]cD]pY;>rGI#m*
%oC_t=MHO&n<m7b.*no2_LRG'+UOIZ0jYQ3Mf'2_HKlpO)/mD]=[u9st%u+Z-/&aVc\=HDKhq2RGg9"Xse/m>g+tB)\_fP#2oB18Z
%AN"$Xn$Y+bSC5Sn?ekIpB:>ms09=o4i`Y)c[=.Z!rTl`Kc?C<og3?_GqeBUc5F2NColOj,Xaa:,.%NQD_(_>h?C#Ar7Wp/oREI0>
%2c"K:pGRrm0:"M#SoXg4=e7Po5KeL)4[-G+lot-5%kE^U?G676AF8X9m$"Q,`K_eUhG)tN`S#m1:[0T,II#;+bJr+sguZSYK9m*m
%[k?P),7/2:9D-9%CMVVXVcsCcO&$;PHUglFr1i&r7br-XXWQu45>0c-d^,/!L#fRLjgLaUIen;Yf"LgSoQKclFo)%4r$qYVah,YG
%4hglXEF6+(R?r&mOnk6pREsA%KiJs:RlYemB@GSk<q`?>HBGnPgc<P@Gge;-m)+Hfm_rTaQ2>fTPKq]Cn"4F"05d&`1X<n'mFNGC
%l0Zp:b1ljBq3P]BF8a,'+8E=Ko9Y67k"]r,jiNOnk'Yn9>rf]/G!7Mmp346RXu)_#m`Xtggem,*q4!l@Xlkt)jm1_mV_>N&djlqU
%G$i!;A9Yeu4,k%,D=-9#Q9W.\ioKaoj,9B_J*Z4eiVVc\-gs6i]`cs1"lWU!m4CDZ[sLn'1d'C$GI!H^\9E#frlb:uRQT?^.V5p_
%VlrbIrg1i@nmL"^^,\_gg[>Zuc2!!Eb2X#C_pj-ao.]o1d15'[[3$E<h7d/UdVc_nUYVgig.)s]:T[^?O&t^M:;/X\lHigCJ72bi
%X]d6qbNh[@nPfCEI=11Y5<Z.h]RFk+mOu:<fi^PR4Sa*/;Emn$I98XT:7j^64ka"%4M>W<?+tbi31GDgH2hpFot-E#Y?j._2fI$d
%:J]KHrL9qfZ`D(40BXjR'*EtL:L@JB5(D`Hbag\q[^P'qcTcl(F1Afoq<%Ns^[QF>o)nl,mc3WV[iaLCcF]lR\pCi*ZhO+Jl(a6l
%]?9iihL"pqq=+>UrVG"?ihsu%%kCE_aUd'Yd^p#30'c^`P93_]0[.S^K8n'8Y@!jeIB9!*m8&ILc$qcJ^:X5@Z6-fp8A0JcIBgDc
%g)#H%2liQPN8=3jCfS1Ir98X1i'#`+r89_dG'<;eHZjMj[<I[<?#C]**F56Oc]0Us%kitOc9^b)L+/WLeb=dOb?_;b4hCVjHrWu]
%`QHm2(#O80R/YKsG8\/ch)rF"T78Ft*M1#[?eo$Oe$!mghn;39=hM8YD:Xk/qQ&oDc-^k!m&#0bBU"Gd/"<A:Y;b=)WX!laR!u<#
%$G0Y?5-.f!e?=(ggq&F*ipBl$D;R7de@kG5m8m'YD-QZ`F)NO4Q"Q.R.[<e5r^CsDfj1Uq0<$%nKluKKm?*rSeQtAicYGJ+>EA*=
%E]@Dj3k>#jYH9-Y^bB,dcWfP`o3H:;Ojm<Yj&t[-=l\M8^!g4h\8qUfX5bAtnSE92g`+K_32q5so,DqDCO"_u6/CJtXoIF7P<s]A
%ge-2a^=S1<=EJ\m?i('+>VuCp*5!Y=Tt=XeCYcp'=BL$e>;!B6hH4P=IUu`g?XO#S#tMQ(`P=%?I[)utL-oDeZLY8M]oQ%'(fg06
%ZZY\CSsB6BZ)=icHtO4O!UH>a]P>i0%,4I/WWlLhS,[N$kk)l5q?a@a-X&HX6>SS-RXPVT^,H__Du=@Ekoi5(?8[:)>+p*P<CD:B
%'4:;n&MQb;I[WmADGnOE]?0Fa*WN(G'D4+;X]6$`Z%R%/)VjSb=/mT><Gn-/dDr!b$lj@c"_\ON)Ko*L'.$7Lne,Mpg\nqK=0Gp`
%QO97hh8HoT@)BP+*,VTt3oc@AG^u)<bdquJR8BlNBNK-B5)Ibh_NahGSdUNUI7+oK@QH#_/(0Ch'M!SD2?92>iVQBbj]WlBM6d_o
%HeKlJ\d3QaBkG6H)T0-MnuhrI:,mXR8heMVWjf6GEB8276rr-[r%=(PV`4"cA^r;r-((-8%;XPaIc,FTL#Rj)nLgubp^n97I7)>$
%KTl*UYZebAD&jjD%U[Hmq8f<Ra`]S]?C%T9#\[mTnOVXE7eV/74pI0,#RQCaSp"s7%Mkm'\'r]TM-*^:6QFc_[5_oR3$;O&GX9n?
%%A!;6_9Dt-,_^\,R1Z'7dFk0e_esod&#Ym*(G[[8%V-@t]FIfS0Z=[Aj\ZITW!);oklk?PKD1mK)<MNP!2IRrVpg,S-;=7V\9f.g
%h44r?#0I=s2ej(hc/3;rgZ-\^*Ac)i,XM'8f:c(pb2hP)6N#O15AW$44G<O@>:kACm\Z+T;r+WWCP<^0=2-sk%`N)t.JKLb(tom`
%mPNe>"M")8/_J%T)a/l@ZN3&tn^!6OD</p>ZqlN'5tnfEfRon[8^#p6=ELC?;CC!fl^)A7TC7*WGo1\F'1qFTUNYn0p:MJrU\f#`
%E2r3L4Ek#gNbL3fcn9@O';XHS*p)'7keR?TeWsU]R-mcb25(3=Rlb_IUF=%DE56Q?o[nYcI[JLG<<b2A.ca3<Ze(?4l?qft'Z`H,
%[@n&qWbgU4%eP$B$=:euq3A=,0RM!f<iSu3#C`].&`9_I-LcJin5aetCr2&'c//c8XTT#pm`Ol,+7nh[&QAG(iA;,6Xo%;u!n]T/
%C(<C\U5kUF\m.GhECBsoB!]f-Ks&/U\oV]hDf%iYrX.KZ7Ugs&dSn,uHhc?='<:1?1t.*_'2/'Ps8(V.e])OGgoD()?uGr2bBU^i
%!sEZ3$`M;e;(eO<lQG]t-[L>&mEq2KDnc8E^Gc&:(C?rQbB:T#<)T`j4,sf#.#P%Z3_g9jNc5]FMpHB"h8GY_DW>:'b/)a)#AU]8
%;XD>jmA*uG;<\cSHHNK*RVejB*M/dcM,.<t2%j[WI+X8W<`W-aB5=Z6K([PC-`'..<A@CO#*7-^_FJiD[4OOQdsF#bkQuV>JlkrO
%!"g<\Pc=5KUF!3J?V;92"GXlcSK?=G@a_$k:Z-DPlAEJ*J@Rfo;,aVGd;aVMb-CciUaKA/=ZehNVZd5(*WTue.><L4d&>Ob)A7?Q
%;hdm:TgUcJ`.mNEQKZXe.69W/R.LZjVYZVBcq7a@B$/QsaWW]<Bf*>ZMaGsRPTre>[G]FdpsGrd76J+CHW*^C<8s]1=F>ASrg]4(
%h.sO!oEZ.!osL#qEJ^Gh"iKFlQQL?bmNO?Z^8c10MUR?WjX8<L-d1I=6N@L0/1MKASQF.V:OFueB;R!@o4#9[)lKk^q9bsIe"_cu
%CVU&kf2i7T:]Om<##nOs&JbZp%Ir$/fg?'g%jc`Oc#C1>G]Zr31_FjK;&7^&dgoE.U^9i(R.,oI$]g/o*aKsQ"-DM]M1HBEXhZ0c
%,X0B5(6ba!8/M4d3+!&-$6D(#&:@HqUWT*:QqU^\JjKbb`I!4Y1l\-Gg^QRZ4Bjc]K+S-F8>YgSM4P]Nk@-+a6A\A('jWq1FWD9S
%+!'cT(U3/BjRB+*7h+s(^aT*``)"p7OA%8m`#C2K)1&+#WJD[CZrN\,Yc>Mc%bFcMEsH=_kd1%]80B<(b/4jp5jo.g80AjW4R05`
%ic5>*Xm'`G1AMMp&!*1%O#iK$DPLa;&g/.L&sG+jGYL,YFlC`4Gg_;eK+\Vo:Y2"gi=TT#50>8#]-bm>'%t'q-7U.ak\<`&AA%17
%9+3A%d5Bi&K-)]/>]U#Wd3I5o5gJ#U$A'g&63O#Y][U*<,)YLS')3_YCGn<nFo[l-/Vhfb\m[uK[G[24/&BXX?)a!@$l$Z'6!]%Q
%QfkO:.(5METKa.dJqsF.)JBgTn<_-o#pk<P(fmC=WfRJ4Z)60*C_UDYWc&+4#hDOF!&HN+599Ml;&P?9RpDa-eTDc$./gt;E,?bW
%M(DZY']MnU.7<b;L.EVAJ<--qF\kqXFV\V_#T6q`<%>]l'=Y25Q.Hs%%e<SAJW=_1'all=eQ5kE+WNs<F^,+^eeJ-B=:#p/(KB6n
%TOVK^Z$EJP,=&Cm(9)CU;,E-HFe-SXk3-2k.ZlDaZ]*h!XTb`K"fQ8L017W^`k!0%,X2ThV?LmlR3<J<X:V=Wp"04Mo,Ybo\ZqE%
%?:hdi-f[`lV!ESgjOh8pBEd(T@\T\'RaSL_<mkh((*BY+bHWn:X;IlErkqm<D8GM3V8SN52!>k3/db/4$5]-h=pd1[XHV9<ShP+`
%ciVWHQ@$&lb\P,%.Z,C'SRS9`^d?e[=WSGO94027/Kp<7>Sn;T[nTeY,sst9[a:>EKj_9m(6All?8.s_UOot:1Se1S.T9&=W7WGr
%%c'CqJrU8o;%pVSo(!9p>t5Yi$J7d$]c`$_.rB*=Qcl4Oe)/g!qAApRgDu'1e2]#S-S;OL8lr3K_[aK^L8spKINCY3-a&Gc%#WZ_
%IP3Rjh8r3ah.d6,mXV3oVi?%HoX\[k=%J,/#?o"F:"$69EK*aGKr[9b@)d0_"2o!I7T9O7XuU+OMU01+g.d%,#7f>,NE=/'H4@%j
%**Wr]$q4.-RQU>E`NnBWhHq5$,J,1N2(*cD/sAjC^n$YX7\,nIge-EsLgafNJr[K8_AK,JM*dY6;aEj*"q!,CKsi&F0b]NqOBY!>
%:?!3n"+G8!+^uIOPUk7)8SBVV&_-dj[L74^AO1'FMF!OcGQKLC3Mlm<`;X-KWeo#T%JV]8XaoG.,M:YNl;D8.2V9F5:#nsS0=jIE
%2MCgjf?i\Z<(Hg5M`ssRjoQfqQJr`0/3t@]T^H2i5ROG'F=]_:3!K^d>=F;[4\SssYTO5u&XTZ;4qmc!TF].,A$[)<!q_NXMN)l.
%Udp%UJI;H")E9bf4m;ZOU.'c3Cm<qccHduRL$n2^lN5+_V^s?Je6riT@AoZ4P;SfcX_P2DRNoDR92kSbnh+2iYloAIKcXHmbL236
%,%C6X>G]B'$(3hV^WRDX[Zl)4WJIP(AV]q5e9W^W/j$8W&<%Nb@3\Z??SQ##7ZGbI$anT>NS:mJ(3%nkcE]GNZ(JY0l`g%Ve[qpS
%0&&Nugf+/(lTaYQ6sKts*q_+r4HHFVOqjQ^`-(>8CI4&BE0MQ<;30ValW?S<Y:dR@m'gQZc&;@>4^ML:/JMN%`,G!c.XR`30!@+u
%ZA(Nr/A&Y/IlH?p8"A\B[-833D`ZlnpH%=thKm,,mre>NU&iY<5q%s?W^gM-?'0q6W$9D7.3-Ne#!/K0O=UW',*A%k3(bICOqiP9
%BI'H*:(muqM#-'q:KJ5Y&gkbAR&DNqe.lO%KqYdl[Yi#&\tW;h0NXR2LhIVV&gN;;dAV@mPV!f*MhL<"*28A0n@BfkOUtodm=K;9
%YUb;BM(iPRe`YdC2b3[,qASn!\H62s#4u82G1$gL7IF3<.mTK$[OYmh77F#S,=OAd@!,HP,e1/$j<><9Z:J&f5ZP=_/Ce!\ooBip
%eLXR."Dp$0e$_%O9p6<7WGO[bC8@/S4XaPBEX$k9V.dpoK;O6h1KYAn_Md^0%b?LA5m?Vb69seb*GT<-PsW;&D,HRf>S6#WU7s-7
%JjF6'6@2-:fg/hI8r5Qd('Y3U?5PLNCkn!WS_Kn;+lS,Q9iM7!0h"Nj(Ig,Ecp5u_2@Wmm%c\"#%tj#5/PtHB@QBuG##H(EM5uB3
%+i,Rq/9/X6FQ@Zr";d]]):YTp],XaG#RZ2B40T49AlC5\.S*bXdbICRa_I+b8k`NT3/25TGiWTf!i_V5(='m4Kn.uY,XJ-g:WVe^
%QEt!^)VV2g<#_&`bh.(-:/@,9RL4Y-[V@M_J/i<Eg]>Vsi)jAoi_X/'$`/^iZZ'bn:pPO-LDJ,;ee]1-D,a39(PA"tfInk7'*i*L
%E)^q(WM*c+i"\Tr&upfc-EotJDDCWgRi(KI!NTDR5I@dsRtEC?B#L>H7Te5X'SnH_?G@rX%J+<glD,>uq?NOZp94:WiVBOWA]lC/
%'[<:;_]_qpKYE3;!D4?^1>,5rd,ou2:dm@6Cf[q@*+VKtK>b3N!>bu,#Ar;1g=_%Xh*&%??eBinfu2DH2_&e\Pe.4'!Or-=AOG@l
%oRk*dMT)\e=-,/(URGc[[&SXR[*FdI-k_As'2/_7IoAdYDr^CL_I3Fr[4MkcJt?R2RPZ3c/!'mZl6$@+Zr_)`o`4W=p'm/rL@-V>
%oJ@"6'3l^^e0)W%<t1[e"XIKNrJA\9dQ)EIW<rmm:bgVdLOmGMnRHS2h%\CU*LrQ?>g;5B?t>rZ/9@39d;e'm^mM@q'r!3=1lUo/
%l/GdS%:c-BF;P'6FCmH'7;NCELb^G62+nY)N?SfLKM'b0V:$rR$PcTOY(8pd9KEuika_]p\I(C:-J2HdUKiBO4=gL_iiOX\7/Fkh
%^mrSC**Et&W\Tc29GMqV.KR+g$XL[6/f,F\`YoI1.YB(,6_LOi-)PRZ4:U)U`tAKA7SHg"8YLq,n,e17F/U!jZ1.=+X^QC_l$.Ct
%l""'C>:MbQMK#If,Wf.b,okg^YRfk<+;9@tk7SLS?*piO>o8F9l+4HF`<-)k6feq7c<Vn#^(;>D)/U^1`.=c>j$HpF/6!X)M]SP1
%-"'2'<8oku,L/,ghBI\@f2WY^NoI8SEGU?\?WDb]YuL?,E:FZ5ROfGb8%:i-o.2R6LpfJ_&pgfN26?$46s&pQis?J8<=0'Y0_/5`
%P:I%_=\'j7Pc2M4-+YNu/@#/0QDGcDC6$Y?#SC06%Yj*7fg2A89#.`VA2D7p22HSfQHAIsZHVHZ#[O^G6pXGc&ll1^_^QMsL2Md`
%S>qt+&1!s%iYib>kl!jTTZWK.%9qq/+=:?nAg;k'#tAN`Rk8/sChUDr<#($D820V-ZRdDZ%W_k6N$BiH?3$^r\:O0AR)_P66:]a+
%KP6/mEWd1GZ2O/n0oe/IlB6HME(?kDKf3fq"bjl?R-K8,\D5"p%Yj7FXdTT48$Eg^?.DNg3O[0oe-64K)];cn-+^ttMW2d%L*d7E
%>QlT#^5!?Z$]@V.ba?6[_\QAq:^As,([AHGHf-HEYsbKQGYi,jap+l`;#tW+?%Zmc+pBe0$Pbo_W6im*V?2ah#:dO62(W^G0D$b8
%>>e8$H0:QHHGCsEqfKD!kZ,%$7.!ekW-FZO5_#iq-,Xhakdj:3_aHcKG(bhP'Ug)K@>,(0r8&NaN@Xi*4&LrHP%XlcL%al+7!BUo
%cHl\a<<S#QL9YA>!Fpn%(7:E-^(kMe',[`?U["6OS!=Lka,3(9c*YL;..-))1^qC-LdGDm;+M9$?(bHQ3.q8IUrM/bW6?^;%Dp0)
%c7I`b#=Z>HL!5<KBOY<cM*b8Q$T(PEUFM#<m1eC7eUp2Zj:OlU$uQ<Y[Qu2Tg:18%Ue,\[<Gk2)?*K8e@FES#2`-j[Lc+gTaNC<,
%<uXkFN;HNoMZnh;/csd](jQ]e!kpFZVlGH5f'qZefC67b&N!X-SI%VQL8]'bC)CQ\&5,9$>?moT]X"]_litV\PRD8B3nI8/NE=]^
%9M=`3ThrdQR\0XZ&YV4Dh\m8G)bgoN."urf9ErUu$A\<k9L:_l9Oa(!e7D!Oln.I8R'RVg'LDec#\BmTG-%8I%)\75+Z/Kj,ZU4P
%)K*rtO\^M&XN+GEU);:sM6>eZZH:J9_/Q128BGe3_Lt8(V<%/.AAJiGoDU+>caJ]4"RR?V7l4#()JR)!<59"S_WrW0YqoUj`?p:1
%FqdEd6#hA60c^FMg'2L'L`hTR=Cf'QW#Z=m`X+94M>L8@.sIRAeAO=(^njKfPA/Z=F;d<F;-A]H")U0)'jO+)'><`%mC2ZjfW?Vm
%Y>#Rmd#qELA%uP1@e^6\N!*f8OJaM.0[bVqU`F+'+<g=u"soD),)@k@`[3&%U-!(&BS:rKVdlqs\;I/`Y_f*QfRM4(ILL;lJ.Bu:
%FoUDqrBH?#pVqS2',^>c%LS,'8<=3f+Z(&PPn=tU#2hLN6YQN;]tl\,%fb1+_76^"&sbP&gUgj5_i6,Q6mOEn=T$&<rGJVTPEG*)
%?u<Fi;SJj)[Uf[?!KJWsaL9k7^eG_GQ9(H?Kc5t&Ejbnod/pdW<EZ>"S/+MCfFL5Am"ck/Q:6O5B+q@C&V>.9-l?<4&K6t08Ar$C
%8<m%Y(sS>BR]NIP>_K@2fpsRMCo>b5EeoOEPXE2^jLRVhdA2VM;q]`A-+li`2Ccu)1aG4o\t1M)Wb\.1X,#XBq<PQAOiVOkfPt%*
%<B+7JBGgN-KcKlp3.1i>D2X2f(P(o;"GVhonf8&<P?^b)EHg<V%<Y$+g0?uYM&:DDn^suh2@`uNc=dti$lpet'rGAF5*UR=iY"u^
%Hr+LVkjq*6To4;#PG1N!DMG3\aJD6c*nV#$858qu@'F@P^Yg$/,#NAZ6`anQ]NYls0ph*mJC,K+i^2*@FbjZ<Cu/L&753Ot$#"9S
%CltMY0mC!:*HXRrggm60GqW:\*aB,](*Yc!@!I7K7]/IE>8R-n$u3YhLr$)X#$W3]9XcOZ*>D]@^0#3@iZAm6`)dtI,tincV43is
%e#A)E$6e_W'pOLd".a%F9NT1S6=&iCIqaX-'IA?7`5I7B_;p6O\mbN7$&oeE`I<8K66l9=."K;rU%&W'N5XsJfB:ClW:)I/EKoGR
%X8.Tms33;ZG#]+d(6a+S;[0T_T#.ld9=5rI3n=kA86i$5-t"]5L8M@%)KIMApJ`.c&OB!-P'"U,mQMKDCh84F@[dK-D3rF>`S_;[
%8pa]?U/?KE@$\?W?CU&t&1YE41<1,<,u^N4)7k>V2cI[0aR9a?OPjfT.OPdY\uSLUNPS@lAG%-^r7en9&FkLUg/0Dq-G[m$c9+qm
%bA'/kE(PT#:14EjSO/0)<(I5]dKZ(,9r"2$'U&`5:1Dj-N(M`9Yd=rk%Eu*)eIF(&^p+S$MFmt_A>0D<E(M@Ye\NQ>'9`]@8U4eI
%,`0`?=U:MU6Erp4D2Tes=N9dZNir]fH*0ALhdRkO_V?G+Qb&;;![tA=:qQfK:Q#r&3!$+l1gT'JX($tHD3uj9Wa)L.)hPtk>1.A`
%H"Tr./.S6jBK:ui$1DY\eo;B29;lN:3j_t%.4tiTCtIVY'-6'6HPM91%H.hV(f;?U7?M@>Q,%l?oKYB01]FNkDi#Oa-8uOHO8LV4
%HL)ZWU&i`B\;(JcM;_0_11YL8='[(NM&snV&KK>$Fh')BW#Q1d<0u"-3c%qIZtG0&#$D?=Eh'oTEk3j,A(#WIgrN:qFpQD2&@=9F
%*D6^CUD^YY%L%SAnme-j4,+"c!MkY['<H1f.bU[OYiBJW*H2N/`f?lMG+o!9)sHP;E5)EL5b3oep9p*O.rm"AAQDkA:)%kWRgUd)
%rP0$p(e(>VO5o_i*u8>R[Y5;;=0tmXhI+qUQP"&U&jmqN,1:VM7><BMA8k1=/@aac7A7C?kR1N1H-Ol^0qPAMR)MB$,<T),3m<bq
%Ts37e5TghE2Jn0-Aqf58)$%%\)h?k;$.>IUAI<9pNWP/pJMIH4h6,O?6jgacd^WgE.$t'eaeK]eVpo82J&2i=%=iVDg32$q'I/dI
%<Sis^%$cGg;<7Xp)Z.um!Ri2KK09n+869[X3.tF;a='u4G=4;.0!Q*#iju"/.PVrE@kdsAJOQsT8!.4u3jsQc>XDDg[N=A\F``XO
%K<NV2#"mm0TS@UJ$<aA7)`)sWp!P`#DH]'/,7ZM;XonGq%OrhO#[O,<(">^M4;pi(Od(-&dfq2f(TH1b,E<s7ZFLtmSXOBY;R-QB
%\dI+eQt&k&Km;ZFCr_2(@8[D^V?OU*\0jh$%L.&u<CANn<UN/m*VB(jVZ[C&3p_54Y/7Fo/>Qc=1i!Lp;_EU;i4:hk)DrjYVdT^)
%Fl_+!mFkI8O<T\u3-[%])k*cM8kar**)&sP==;g)YUNu>$9U<7OhtKeT-_iii>(,,F<L#*MBWILd*sqt'U_P$.#C4aDfDmA6sKTc
%*>GNQ@,ACfC#G97)'^SV6KO__f>9@]4=`qr2COds%NpB*iO!Vf_eMI@9cSX?kn'kgnu35?_?1WS?fa+a`Ps0L'b#!&lW35^OfH#B
%EU/;A*d<si71q;5Wq0@<4Q$<XWM8b@,]>RJYWu`IK6a@=ZT=UqMj)1kAVS8SkG,R)knPM[4"@(JEDAQN%=I4u/aO1DrDYWjO8MnO
%&B#;#PF+F,O![$;YnE=^3+]A+6Ut]:#ReFV)Qo%5C@l1t[i1ki`k<9f6)XI33%^f8oI//^%A#Zh-]s:F9;BU])g(4uc=aZbBTm2)
%I`/c2(_>6>&HR&[8j5X3O.8:`95]Yt0.p:%):9?S2I5quio/me1EPFpjL.;T0cD%b!T4\SI):[(gO.k.!_HA-'ISbHXtS*Z)8)D/
%6`MO8!#:\6+%)G74_it.q^P.!o)',.8!0]OJk+&l*bd[pi&6o%]fT[]C;SN?!?>8mW/QMEGpU:_ETAi/%4N1tWoAto5pVDgV;b/T
%R(SI%:F_n]Z!D@O$BPbK[@PU"#r;Ufbr,WD`5%td[)rYCh'.Xk,dM:X8K&k&-NV4DT+*Nn;)_1SYQa&PAL/Yj=om$-S$ak)*Nb"V
%n2eHC9GNUP)pFs?S!M=.Zm^sE7KEj0=V7&S^*Y,@'@[bPGn=mneIne5;.(`l&`P0tSojL_W<mE?PJmlB>>(J<;/hjRJI]:O2/&+K
%Yr"MUj^K]>_P4A+p].@HadP7rH=IL`?o"-;k=&ed-5.N@cK,-960M60RlWHX;Ojg`\(XC,i?o6_$6?&XY??0l_h_tXr-Jo1;[MFb
%0kTZ\MUBNa=4K_$"/n#O(<[C00".Nb#qWJRM.W-+@gc.aJlLhu<u9XfB`iUS$0[pt!n(cn)"W-";],s[b1&_t69uq'MK<KAQu^GJ
%CoPKC%[ZCjBSW(01AM=l`CONt+HMOhFt\7CNrL*9OTCc0CXW%ukZW#2hZU&r\?sRl@Q"d86?KFEeNfC,dm0dl(b0;D9,q?IgqG7,
%WWA+#Om`l:=98%bE)dJt&PZ/"\191"Y\MR\+s.[uW3h7P71BFElUha_!a1T,j+rBFqm-phEHkd:Ba(33MdqLO&_AOUKa^mOHD+b#
%UoO,AajDZ];7;)kOuETI,i:G1Eo*U_1d35Pi7:,N/Ho5_.Tq-Y)uOAQ7#0&@n1cpaW9!N##*T;q;_2oqS5-R=L#JW5X-5DqgNG,i
%?+o!!MA+;6"eMqqcCt^)?uiMHM0Gc\jP`>Xk%H6D4'AMV^J$+QOnKi&ZpEnR1l3ne;1p^-VR*%WBN#UF@SRZJ;ZsO&7HcWtTG!n/
%X!&+d"OW#OLe([Cg**;kW)>3f2,0>^)YQt\O\76c(eYUCBMqEB2,fjl1f9u/Z:#;VMibO26<'>P:mkR?8lHI>P=lU]("+,bDP>=+
%BBsOB\Ha3prs[bZVLE+C9RU4*K?Yn%_*]\Y4G"Z6@TYN)[go*>QEGd3'm(m79R9ZlDnq.:,Egeik<YtaR!f.K'q@_4RhIVu[MGun
%XkVRUZE@i.7ZnNm%n"L$^$aDmHG$ZagQ!01I1<@)REpn1;G[A8NcpO*OPH9tR>!8")'F+j'as,d68s,XJNCaOUAW%1J7bOo`C"bt
%XtlU!e`lc64Lt[!hQi<M/=!O[.&*pn1`%0AYq\8pV$nO!`e8IuI:Q_R@'@n@LE?'(E/kFBnaDLch<d2S0;#]==b$jGku;-P[Ko!!
%A407m$[`Z"_1P'u('j$L42U;>d)^:TqURL/$n,`kD*=56_^J9cGJM<gXoGSG$Q@j0JK?[T;1n`aAAY,<^q_]P>&+W$lNV9Q@Ar%[
%1O4)"SSSF&UW#2$fNsH3o6i9lmP7G7Nm$&8kd[g!T[hUn9*Ee\r[-p.cn/-[34V8HNgauF9o]GuiOE]mdpAJ1BrH7bQm/c50/7_l
%mlA:f#24+6"2un8B8sBkD2V21i%8QN<jX#c\n'c6]Z4_oCl`H7EX`ZJ(dnV@V(@Qr8m03j<h+=$_@8Y\2[2\A$bVAJ\7o0[h.C'q
%[NZ&Y,uf[HL10SF&PH3X;krql<5KT8FKMTUEK\)q)T(-.*,_\5hC$jI$nE8m_coEcL_',$3F\"5fhZi*P.$?IQ!o5TM*qBfemtl'
%co&)iK^'RnWK'M1_!iqALh(P1D&a/);Wpuom5kB&=i&&;HS.%kJK`i]U>dKH\<_ulifQ>[g2V<r#EF>]/P^m&(GoggRNaQEe>OB/
%q,bf(i^RqW]2Kc$!J0:a@<Y^@129M:Xcm<K18i#;?QIof`<&KednY"^1.uG!kpGlC=h'*m7qIqD:HNWP79iFIqpmaOM@+kY\V@uQ
%ZQfFunN@7IlHhQd+0$q$E0&bM"2QJ]U>'c<_F=!sEPR*FnV*DZ_Q].l=koBlC'O'(0$rjs0SE,$aUiL_Y`pG#%mWom#n6+G)YGZ8
%DoW3^)Y;Vb;rqMp/m=T``_D].F9)G]=jpMP.T!X0WcJF^b7&AU#*2*]o&^181/Y$dclKiNcrM1XUKpKuiA(eSQp%/Mn3(#Be"Bg:
%J.Jhk6f]FB0Z?R@*s]V+96\;q2t/HnieddXY@PPECiM'0PqUUK@>g<lFP<&FaKSo2!k_ruP9E4XGf>+j7Spk!HpS+`A;a+te-lgY
%3a"uiC7$pB[(&.8c;^ODF<U`4,0-R]EVp,3O,-f'NlAR//k4ctHc=nW*"+Q%8]s.E-WjN[ag)ZA+K"7X6F(4N>;`t0!PQW%_13<Y
%4$[!u_:4QUp10kM!)F,7$!BaADD%9SS7Eo'0$"cJ[I@X5M%BueP40t#G!)b2$SJm`<C;Ec0fEUCSO*Ys=urS)cpaq6.Se*['#C%l
%ZE/En:9W+AXSJG9UqL*A,$]iH!JR[$TS')L5pa*SnA/*0B..5Z]Sjsi?7JqW8LM*d"%uU&QsrHX(S2C[>-"`5^pYtC)B&uNQCL;/
%huODk;F-ogf>?)@YY@+c3i<p#$[Lks=qY/[hp5&BO@NifR4@B,@A1SD/.1Wb7QqTB47a9n<e?i6gq=N5ngV-]rYAg`K;tF/h;`;[
%67WhUk_Bd3OB,bTU\o6qJr^^-THE-#4<.!6b]'>E,@0kj-'mi;SL)EQVaKj=EJ,XLU$r()9rC7ENOM'<#sJ@WR^/W%>'qgT`q0-c
%U+OZRZT2Nh#K3OH*/1T>`PVZ$hO>b1FY-h8,IhgQ"Jj[uA)fL^^PH[S'jO4ApA\GnSuMi7;BeD!HJao+<oS55cXu:]hOIb6iKB>?
%Sb74oT]qj&\"aa_gX3sf3B+:c'M-<;8q63ha2*$#<=-#^pZp&QjCcT7phD+-^md]Gl[DZnqTL#4:aKgrW'tDT`o'fsFN$6@'l-LY
%5VV"$>3;_bc!A3;8*6Q7/$cGf^&D0V2sf]ilV.U9*g%o-Ffo7@Tok#P_5mspNC0VP3/SC)!/Qf@3-6#=#CKK$iZ)(T7*6o]:mX-T
%HJ8dBS2X&\0)$-FWbsraUU=[CZG`MWXQe"O>g;l"><F/mR?rFl'YLV@jlLfVgcL=:oOM,s2bq3JYk$N@_D-p;W6M1ola,)r@=9!i
%+0jp':qk!h;cZ$TF's;*-C[QQqksNuK8GH*9'l-3FFn"B.u*#h%^KSC%qS(BJO&\kc8L=W6amRC!c\]l5g2KS%0E^"?H`[YIF_su
%.'k]DQt)d#-(bjqPthgd@u.#,KB@R%dIX"[mBM@"X8<l5)c8D/EEKq1E]18j.j)He*5+Y2m82DhL5Ot1;QjO*>//)$Fu&.rkC?o1
%FZ.#Ei#@'jJjE(NP(<pZ4t,)^#H&\&Qd=1MT]mU7Pg(LmplM01Xdt0LC@D_1(->F6l4XRY.AX280+AItOa`FKD?;WtUDWi]77@]A
%bQK-rlKS!AC-$7N#*FgIiW"K'[P!4dOK[q;;2-N(d_4_1k2bAd,Fg5005&ha:Pf%!,;FkG!(EP*EWeKtGW,J>'Cm\Y9tXLa::E"_
%S3Jf6NPe5u!LSO5qP9-[KKk@d\5)0t?traq0gK:eFa&.5pPh"(2R'Y)fYPdJ8<S2!F>6n5a$,0a=@b2[-FWBt!i_:lB>f"kaOe_,
%BC:<A.c6E;+fSjgU-tF&nfZ<EX$XRNPjl%e?[jtQq$0riE_b`?YCHsVeSJ,V"=f,N8?b8dL+0TQUsWJ5*C8CC$:oa,qaSu>OH2lg
%nhpQn_tA%LT5K#hN8KF+_lOm)+\ZWRLNQ-ZG7rG^5*Ad'f&tF5rISk95Ye5S=R0L\3*IusI0@S^P@e<YL*SG3]V),ZTdT*E-9DFA
%V5bT2>5\$Dp\uN`MR.kGVS)"KPFS39I%HO`W.kQdD7Db#jj:RH00fL0n?T):+N#j+-(ODq4i[;<pP,kjHN*#Z4p%=AK<GqMJ8LbZ
%Zgnq#``o=afSo6=[8q-i8T@nr$W(E3$YM'U12qZY.DVHGGWa:.GE/]1/Z;1]jJEHZ+3W@m:2fY;S8X[WC;BE1S4+b]c)Xg^AjX)K
%0mtmqGrlaJ3BBn3n@F<\b]Z4+b;nVGps)V.I=X*lJQV3=lZ0#Cm9N5e8+c/RkTK7k3-RDHC1iN?pK9lFCc9MUi>i5B7lWMldSn_u
%FIj600nB.q>ooW>9SO]GX7MReBbiT<%aYNG#X][Z"5<HoNEMLu:uH<RaP07=p%,1`56hYh5%*?/&@Y4uP$g!`E1`<\[6A@/Zah?@
%aQ`@%?#%g<K&09IXb%p`au]-F:8_!VP'_@n>bV*XX5g:JBmm$Nm`3+g!hX+#*g)I+!b7:TId.R<L!aq=rD_8^3FCRI4Vi/mcCp"o
%I;)+K<9>\he,4ApMuP<hU"YfZ,L*.$?)$BZj]W__^IDSa2[VsC1YGe@4B/91:p3\g@q;=Tk=GNC+otEL/KL4OE5H,%ku^baLXh>M
%YiLMVEhD2IbI5m3_V2?rN*@Ypks>(N/TenE=cPr0=OWISmnRXdM@M-^>*'MgnWm/ZhefXc#hoKO!],$^GSWr!D+m*@UG8T/U<eqC
%8HhW+d1/_f"?upWa`#k%s6AA_W$'CUR#39U(e?4R&i,K4drreTLdS]+@"D>r@mq1oN0obfTJJYtc"K3\1JDr#Q]Lb'fF*^X&4rQ6
%aY7Sg)Ob!=leRLQ3Fog>^+_/&*5oB9.E!A13&XiKTVTaS]#[)C]&L\:-W3m.]E3[.rZ2i^>V:N)GZ:'iP2o-pGrG>6R%WdsL,8e*
%/E5J7\"_5WXk`dFFjGQb"n]Nc6:B)7B9"lMn.Ssp04cZG-Z-G'TrE3`p"WOWL7+RgF?ZI+maUXrWJtF;G!IdZTdo'>FDkf$Kng+(
%nr3\#cruBYD"0n`)3*on]6j2kL=p2&!^\)::4&A>4]+++:m]3,I^^LTiE78kX9dlO:bD[+HGE/BRiiF=FZf`8YjEN&KCP`/JA5X@
%53=Xas5uo71D(4%<AQTHZ2@I^1*f/C:T5hs5sH]G:B/bs=Dp\@lDAqW?Oa(@IMuVM=!03cg@rYUJ3TN]pRPH3F`69PYO]s^!0,J,
%:cHknJ-eGM:uMN/.d"\jXMV_KRJ([0<rC+fq"(Pt6mZ+9]"5I"jZ1N0hi#W%YpL`FWLF36kLJ78#HH\aIM0lIaS,FtIW_)Toqs&Y
%pQarpT@l5T6^KS2$B[3)!sRM4U;-SNX6QS`dAf]9Qd_[*-L=*2XbmXjj)WGXWX<@T$.J+<=2kuuQ5sPQY[Y9T=MnR70.1VUdGY4d
%o6?cj_$tQOIZCJ+:78[uoo;:7HG5\13W2'Q#(ETM&6r\W*6cArq%uVUW*h*rb$1h-qS&N<f3Qe*pA&K7_4?/B0!5?<bkY8,#f*'S
%SO-4l<OpDcX+I%ST98!h[\DX+Xf,;i0rHPZUGeJ*C@U\63'dY/oa_eZ[2/nT,.#(0B<!!f";eQ6[0j^Te(9Vs;jE[mSA$><SjU.L
%AlXj:%:G@E:T";lW'Xbjm<4%%9IgOTi:Z<c9Ga>*otJ*)KlEmJEgI3PXOYY]^UiG;galV4(jLEt0ZfloB2.nj%jcNc#q(WtK]hWr
%g-pp*&APB*W?G)(eRJdP;cIQj#3dVVMA]T9J+fJl>9C;4:Oet6/2N.jcUS-r5N?CL$@2iO*\D6gO'q67'7u_'RBX$0,V")\T-[aK
%$Bm>tYc%h623U,.g.NG3GYlUl(G?gt?AAi$2Zc+L0/5^)]EM&:86.W>Wb`uW5r_fKAI2hc9)a-,gDX1E/&LC($`qa=;T/'5-)X"I
%?ph^BXKLa?5]-8,NBbIQG-=t+oKDj33]d:\:5MXJqj8_7[1fh6Mp>$1HlajSXlM0E)\cR&k5?!>,e(Xnh%*UN$k'M]&ljchVJ&D\
%,A`5iY(VcgQm0B6cO8(UG[jM0-t@b>-mm%Pb'UHEd\m^^j`J#_[;*:7S);2iRHqFB^j7_sP)ch'bT"Kp]i0U4]9d2f`0&e_$gH$O
%876fk)Wa7!>N95`/8UCCq@rL5@ZLqHe0\iqCm6HK8e_(/oac8rQV-UWkX0(hP=0dOlNurL9ju'rf-A:k4I4bd4_ub8'O.M_+$N>&
%Li'L&QYA)ec/</->MU+MBb,gATmM+p3Hiqh;)THX&:kht3F>4E[THi*af84H&H65G!;#1/;KG>U_d>oB<i)ih,4-d)[8m7+Y%4uf
%UNp[)a6WR"76];s>#qi)p[eDZn"2AKd9_q(RW,]K%cL`"\6W8TVs050[pu"pW:#E8(,'0Df,!tVRf@,S5,kMUQW6oKU.[>%aJe/Y
%[.sX^hI-?nNu1eLGhM^a$VAQY0MluNRl+G&DQI$Fs+AKK7_VRRhkRV%9.<d@o.*#4q>4=DaL0sWoE&5u_mPKa$"ciUf66%W95h^(
%iiV%+$c;]7mG7cTd6g%7<?4W8]#lQ7L3Ss:7Q&\WgN.O>&dSIR1RKIh/'D#2PI^t=.Z*s`%1W\q7*06i=;@ok6OU325%ma'=I"fd
%5-1T]FC[-@TC1<d2PpLqBJZc#0HDgL690H1"2=MZh7@mt;-c*s>/&o_etU`jTfI<HUr:9SfESp#X/H9F"DE<9nCB&GZ7;/LH;.n$
%Ug()u%1S#K2MfW"f$6h66;R:Ln2M%f9F?3/m&*Imqs>SG9b*!5i8ZZME?Z_1]2g4?(0Q/9(PC!Yd34DTK'<3?<mW&gFu*@1F1l\,
%ciF]FCT?9ifd%A]Xb1KlXL4Ud?ie#tJCmu^B@[G$69r]6[m'Y(l"USoj8YKeH`nC]CggI=nLKF<6D@d1R2$,B!4q5YVF0uZ9cb4g
%KQcJ>2HYJ2BEZ*q?[):o?g7'p\So5mH6\NhgbtPlCY4XKYA6uR#6orVEb:Uo+^H@E)7VV,pL43^$&a7o>n#iMcg![)a'&C0J=V2N
%jtd>:`f'%O;MH(4q)S[fC&k%-Nm"Z1NJK`fm/q]K"ZDOp*-,m[lY&CaJKikefcjF]J=OM7`Yi%r[,gDfa=>*VU*u.pnMS8Zn/9,(
%%3:9R^MBerZ.C0)l'T3"Bj7)uaS5q?;]1>eX+'tMY2>;/(#QCRi3@C`)$62^ig-5aP!LcZC<-lO5IVQ=^oT(c;qXou)H<6=c:/cd
%N/14p]-q)UP!pB-7Le5//`ac*/fhf$N#_Tt:brHA5m.B;aS:I"R@eI7<M7?&(0B@mR.T5LHQ#LHlZHj#GHWMYA$'GLOI2WYG/A(6
%_a[T!Y[AIs8&<C[Sb(3\n#h-_:VKL;$ee^)cP!\R6o>>)ql<:Da0^N9kXje2)Vpi`f@((Y<pXMZ$rQ5#pT0CXcGJ:0Fj.+&B!4P(
%e.tOr[,e=2B.Uk(8QeeUCL@pZUh=`i)?GJ_FJJ+%TH%.PBAgeb1e)&\X.d"'3F\A;kt/<U1`VGRUUt2$*t_UB$HSBWh`[%6q!R1l
%Zg(:o]?#g-5"jO\8t/.<g;quJ(rW8Z0URc[Y6n5?3`ue'ZufW?`F=]r$r8Zs/C$#,"DVaL>]6]\88Sh*;0[Ik7M75U8(o1C!uqlJ
%HBOd`0L0e2Ka$uQ34;;>>r[bK'2F%Y\C"#EZ;_qqZRGF@o4P);T\=OG;X@/n.=LFXBIs"5quqc-d#^)T<3b%Wd4Li:54fmo%j>)`
%5BcPV3;a&??kVkQ%#L]T$.uSlBIp5WQ>pXC?lbMX.kNgh6q(c>]?R`VO(rAN]UiGk@D^pHWC`rJ')kC"jsFqMOGl?Q@HXF:Paj&&
%)imR\j2OQWG3"0Ic7IIJE`P`#o^XXeW/e:"YPT(o8-f5NW%:rEqO=R98.Y$0;q@>eiJYir.]!;]nmJ.B;rJpE!#"\!Gi\K0^se1=
%&[S^gIr"l"X,e?Xir,3$9@.@i@AUhR$&tIa:h-B9QJ$<n<*+2%KT8?fhM#'EOhIb%MM_/RG!EU+UpIZ_Q\feZ=F=.Z-FJSeiZ-NX
%4CDoUSl_4?c-gZJekeH+W[cDP%k:;:UHc00\Qpf2I8)UI7>7kVOsG`C.W4%`P6>r:kf/?V(XDhUS=GRT&6uPD*G,qTh;cL$<njZf
%[Zae\qtP.ZI`0BHadM4#r:S3UC9rU2%O[%+OIqlV2W[1-h#,8%3u9m](-%gK>+"$/$G&GmOsB9+bP#8Zio%(9KWkR9_<!U\(Z;Am
%8`nm0q,!9MO#U/!1):4OUfp#`*PZe2[6LP8PO;UO97a=<NtUmAI,KCtX:LIN;^>&j$[7bsHB)pRK[$hi=`&td1i847MC@-MqK,eZ
%7F,U8<*2-ODCf*(g&(4<=?P@6=A)?)[!0r52^(sN<rKpk+B'<om1P%?M/?BN*9HH+A(eSO2c88DF5(K9Q%WA+Q:e?<C@W*>dJIIp
%99dmj46W-$=_#WQIf+M$p+a6M]6l<.3#?0%Oqn5[)E*2/9+"847>%mZlu^h1$RuT]c-C';)U-/F(pLsqIIl*F5K$2R=kI[b*I65)
%3WE-C=tACJ-;Mf[8V(&VcV2M7MO:9KO`MV)[L)6g7=,TK"!Za/O@kg27LOqfCi"HC>!l>U.4nA(r,(2O$0Oq<6T)d=D"Y)qpE99b
%A:S2+79]eur6:]l]tNp>JKOJB*L;UU(8g%m>Jc_to%T3`9tth-%Fo$%8l/1/W;=m2E!\NU8??3j:u-.cOpZk1lNRZ'1"@h$)&aL-
%W_Z43=fbVsZ=4q]Bq]TLPoZ_Na).j6fsu7,ErQH6R;Q&;]/'Okk*XDU2P@'4'Mt--/lUK_@kpU_Qq2dPkbt#ZoV@&8;mKX7CDWaM
%qQu\K%EIP)=@8WN<]lq.Wru63raIk1eqbB4'43VJDLMG'./q._oh]9"Y5rK@_NF=AlrTRS#A]GQ9%IK./Is,.)c"1G<H\N$mE$oi
%XY!gZ=I'n"a,%5m_X)d'N@Xn;E=A"\25MnPU?&>,,TI\Id6VFU-QAu-%\n!iTpr^A!B`tS"/Dsq[BB^'X@s[n'[!jg<a"!SQ8Bnp
%@)-[4etj220**4pm\m'YEGd,iV0k0Omib0KbDH>VE>`IoBVK?jRG#b:8)hi^CVKtHTg536fRu:6ch<Qd?jTI2i,Zh(`1[^.;t<2^
%WGFt7NIB6pGe,MJ&+)*Oo_`+QUZsS)*Q,V,RQL]1lqg#5,#()H*I)C6dss_u`>_a!%`)#3=3Q3B]7dR(M?Gc&R9UZ_S6i\pk?p-\
%YKe@5?SVVsBTYG5!2)1=8kf@`)DcIu18+4^(5loQdpMu01:]e9*?=S<m[Z5uOWc91-&5D.a,rjreqsc%-Br%%S]'R=:`qLaNE+(?
%fSSqp^_0]4QtG*XYr&+o/fMspf5:F',P)O5o2er9>=@j]B@qXJm3*6h+/sU5*QWRFjsu;rY$\*3>uSMp$I(_'mTrBU*eJiJcWpGB
%3LU9'*IQnR"X;n=.'Ukp0LX9U1C!dY0]3'VrRq*bfGpAgUTd/Je'(5@nb5OJBA42+HUZ7]kP<;P"maMHki/If7<<\JQ_Fki`]@i-
%hb8G4B`i;q4@F^lrppR2i(Ch5,67($23!H;/X]9r4SJ:ej7[rO&>MCN!jYma>ps:I>Yp5ogKb.a!eUeTK&SOK/"@>+$#7e&)]\=2
%Yd>9gqJ4]B.c!dYa>RP.P[s0AB.PACo.7.ld?TPoYI\[7CV]e\2>h]5KfBJ$Wu+CaODgGQ573nQ(>d57MTAKe3EUk94>?/7n,N]r
%W4T(Q%.=JYmV4q,FZk5,?^;!JUFGChR.&-bRlo\iBfeg2%r.>Ar;.=T^&2n%recI"c/Xir^T5RZ'J-Q,?ZP$&=R+do<mT_=)r&kP
%9rHU-9AqPQV0Fnn&FbrH&ZP1N+1hS>:lENY@SbN:U+>Wr^3@^oVLD(gPNa_u[mpUT*s;Tu%qeFIcFU.(l/*#rqtK&.+#*B6&eou^
%iC'CYC/"SP$'Ie3I03#h"tilRclSQN+[SnbDkK+\LLsLmg:\m*kG1KfX$A;<LLtog_rAA9.6<V\LiWVWH3pQp';Be1:eeV;KAO\_
%#RR1$N;Xk*h4_n"KO^#Dj$[;J4H*5RjZ5hL#[MsPQX0(<i#%#F,T*g19;;Yq/cuO5f"M]JodXD,:p@Q=<>mVGbQ3,#jBb2rZLedh
%f4H`9h-C:[=bqkdCY3HELh_utdiCQ44k7P1E/^F+D[*c5"V9CC#<'APH:S>]D.Km^&^.=9SD5DY3SFj8,%"6][mdiOJGloFF2_.Y
%`k=VG6kB"-$aUM.J^!1+BSa6Z&Cp!FIY0Ih\b$i/WHO9V%Z59,&4$E5ia1[IKTrFi#$l3QUiE]RD$?/e)%aNK333M.at[Wo\dtl4
%HuFp*C=8!!\2OS54)KIg?,eQR2hug8&o5M[AcWZeD_6O=D49OfVEjKCGt)_8=@'SSK_1)3;ZnSRrjLR'XLGD#a?+g[m'[bk;6SU<
%+0.lgk3?\l(P[Ltaf@a0=$r(9Abb2l/J[j];56Z@7l%nn?'^A)AlCjmh.t.$Qjuh-[HYPmQq3((Lo45VWki=B)JLpa$sr-fY[1'"
%*0;944$!i@I-,\tMVIB3lsM$#-_g6CE++56bU,O.H3a0%1G48(WU#cO2c44Rmo9-=3)fHsHb9M#3R@0<QHRg]D`&N!BIsTlaWmg:
%.%&!I3]+!2YNkGfrM%%?!1o<Bs$s?31e*rOA#I4WBRX?D4)P=:bSbZTR+d\HE\&8J5.`?`kUE?D2sXsWGl!79+\P]Gk5pMDm$?hP
%`7/"hMGHK>C3%[ZpN9ku71]jd[mkP./O=Fi&:E%[Al(_#Ib+e6D5&mI2da&`MolVe]uJGrhGZH2B"dksoC_qZcI`*HkN`fLKqT@D
%X$[?KRi0abptl&16D,Y7AESO7&OIaJqHW'bJ+QdU%"`D4112`c$nK('W!FE"%Be]6Xfu@[F#Y)ebm_3ke\.kE#$?B33kfM?3=@O"
%2(mA"59`I*(#=\s&+\=$OariAQof0\ZF2m9S2=0o6(DE7dhCG!B?BN.[?]8WNQ$?k9tkWhg5NuQ+^;<OW6JJg%Z=lZO@1&X4k7lN
%>'/<+!Nn)AN9M9_BJQVK#mLQ#FBS?3J7Mli,(1Y@D]I&>5oViO(V),U0uoM0:S1'"A_i/02MCp+j>^Ll*IJR,VQ2L-G)709([gRs
%!ttC'[Y#!q+NQY4gkh1\s&mq(p<n_=&DiF$+OY_nJG:q75*U]"N!>g$L.>G#\aghTY<CGgJ]Wi]@-ZBHl3#gh3qc)S7iQcT/dID"
%."^sc0<f+1$PbgmBNLsIXW&qodtL4;"_8:G>ZU,+.Lfdk'LI)-^'.b#V^I(.gRNKdW">?#KiH?lrKfDG+<sNn_;YW`/N6+!#fcT>
%HU-BqeUhL`Jm.9C\?UcR<IGOT(Ogk7SNfJ1q%c+./4l^'k?)P#c!>k_S@5C:,r0MLG!9?cE;X7=#',J7U^pnc![tF^oGi?<!i?-f
%VEe+nUJ"%TiHT6=.HJVfn[8M,ZD%3dq/`;YTcoaE5>\`Wr"pL8a^54$,7>`Q?aY6B.7m0)hMB2BZ&LVRj=!/ikIr%PBFMO\h&Xe2
%60BE,OBD\TC-(;j6"po,%rju;@R;7'@5&V2W4^'6Rqah2O<L/]FPn:CK_P&DG#52eB51KJ8K(Zq6`\-GrE$<bW@SR)[`FMe0!24Z
%_no)il)cUCo#6h"P#EIOmiPLlkqB0,=$uWXLI23G%B22jQ-#PfKNI3D!AbFt^gbW,(7(-\=;t+H]P2#ZU*YDhnSF2J$l@"=`@!/-
%fqNk[JK$iQ_2S4l%F0/K0pja`ehCjk_p$hK$ECfO`M=QdPJ$GHCAVi?(\F0?HotU:7Pj!F<%3@jKNb\fB8.LL.5Za@l!l.=jf"^H
%K@c5jcn#4e]2XYV@Q.gZD*/8aUbt0L!B&uF'SnmXmY0)7rkZbd8^"/"J7ubsYd?>DGs^'GgGB'AKYNM(8g*=u*)goQ1&as.hLF"o
%>KIJ3$k]F7YC#et\M'W:!o!"u<Tf5e]?i\0)_">_F$PPi&BZDYTG*."+YhAI;=t3pi?fUYJcm%p\4j.Vr!>V4^/7l1#*<Fc2_G>i
%#c+$&N.;b=lHY'9A8DnqVHd`g\-%kZ)rJ0],)+6Pk8DqZGQ-rKit<JR#VLa*AP@t'O&tol`#,)bH06-+1Wm"YFP0P6Q:1J`$@Hqm
%(.5HkO<"URG$!m)=$OG>Nq^O+@e(H>7E'RF(Tm,l&408tN<Dr\Lo@SsX]bV<aS<kIV+O?7nY:*7mHCha2L\mu#&PZoL`?b[2n,eY
%YeY;T;8TrH-nXu*TEeK"-HW!c$q%Q/BV?b9]#Jr:RjhJDnYR]@EMG&>+DRcp"/gY;K#Fp3dRWW-!N./<"1O3LbHB-9m)/Q>-(s2-
%&E?I4\h&SZP@:p>FnmKu^Alg9SnQig-"UDK>LUOI.#C;_:BHXuAUh\UR6+>i[Yi8l;3inp_`+UT`RZ!#oNdkQpU%/Qr^+Y/7E5l,
%Bb7L2$*.%qBAY=F`=sASUoK]tisYc%+#@/=b`.))2=KGuO%73rbc.UO:@QMubM.,)$`8P!CZ2VLTs?*e8-d8DP;]J7!"jc5LYnqt
%W$hrL]5Vk4;aK@G?ucPqqlJV\:H<fRfR)udV?I3Pk1kN+ml\hP,>"rjkh&8>N>r5a/HAG\G9h2]!csLcg8==t\o`!O)Z186Bk[jl
%lnp6F/3*ib"bZTL!ApZQZ"Qb-;kXi(!.5lGfi\DJ+rg[N[*Xm4ZHL!l2h&NEp<M5PoJ9U1A_FSK?9>,&,JjJ^&NEl1,hV4e9g`G#
%64\f)m-<#q3Yrq'J%t_i*j)@JkUamgK?7SACITsX6>RHO14,,p54Q9[N0,t6?@MKA1t9:T_kF5r6Cc"mI>#GTfLtXld6):;@"j5$
%34#J@gauOBIF9c[lEc2e%HpW'c0f]oI+tL<;l2%gH<ME/h1pmC?8'Ig"C'R=Z3'ZWo`f@tZlF_>oJUXqP4orK5P".JHLDGE!i^+g
%FF`-mW&W;dHI<+m*\[H50kBZ6-lMY7F,kf"-s<0t)kAB\Uk@:liRN&HrN.^N)&)#4hTIiW3,^VS\HGb'GUV3(Rh7n/`+TFJ/uk1/
%8RWqXq2PWGTodABA1qgpQSj"f+R)T&>>PBfOt\o;='S-g\)9o3,U(H)#lm!X:U&7laHMsc:aFrm&j?uRq_?8Y_jO7m/%a"C*9eo]
%\;t4X+O#NmUj?4gXjct1<Uil'VgEfiCK5Jm_.iN1N*Z^%6)*tAY2AI[!`"^,k!FZVmSf,tbd=a!)B-C#PgP^uNp8Sk4kc"s`t;fB
%*Z-V/EL??8WaF'"pZoW%dreXkh@'n)ZFYG!)8%&N#Uu(^Qq0mXIosM;iD*%*2^XilL#**X"@uW'OHQ-h1WtUVCWIWO"<\r.O3>t2
%b4<Ee[kQIeFMsu63[0)\e%;7.,1^\o;*a=`*8[IBb<8K.4A8]3cQP;LDn2LM0B`)YXT/j/@]K:cKh>)5`ispF-);fKs'pjC]b(b<
%&LMdSVpr!<eT2^5?A8q7I1&rqnO=9Xqh:kIZ\B;q4q$gDdV/>0-c^k48+RX"1IB,B,8.kuj1A.2Pfjaj5/2Ml)ca=0,[KoX(A=Yp
%\Fj-]U#B4N?hVanf8Am--i3kWD`\$)G/\I-ZhG\Ta,/3g;?f#cb%D;DPZYh$Ohj`nbRk3uraosOH`P4C?,4[Y_IfCMd$onP6,FU1
%03G((Ep'1jd7'R#.b`ih(%"(R<pYB#2UA+$b`L%a=2Y:GM9+6;_X'fUS2mu*g5qGi`Kc3NJGf,0-`=:QiRu4WY(^g!g[)I6<P*-=
%N\4O??+)cfY$Ub`mS`b:^>04F5DgN&j^B0P<T7K<+(Vp.d.2d2\k+!ALSTeJBLCN-l5A9PUcbg2J^Ih==NXfS'VPkt7#O_&p6FmF
%3<O([2efnY!ecJ)'$6XZeT)RJYJ+VDS6aNKb>+qK0t4mlZ)M)9(ACJ]RpcJ=KZ]qeoC!'Ps'8GXCpT5KOI!D\$8[g(ZDP]]^c;tp
%*KHFp^9hS//.S=R8\-2[AGr=&QQR<i:"t]]T3XqnAMe?)X74]1(7)JS&UIt.rGf&+8$KaT`'?,PYjp.L6__*i:',h<`ZBMp$GDK.
%(kR?IIfRi?G<Z+g/C=[G?`t]Aa?OsA=t#BNW6nUe$Jn?n"NR*><!8W+3,m&u'VT70cFi?eRLV?,Kds6u%d)9#XKYC,"EWV]0M-&Y
%mS`==3a5JL&uJaqNtPKHoo71iV@\D"Hk`t<O<!6Ts7PuO!/G0hR=4S2.'U;G<I_^ZJC$U!bdN?`2E`r:edf6Dgj3#(rm[Jb&_q.o
%k:ibY.:<5SY\H+#.Vt(_+D]b*#"_6IaY:?K5kZFZ;tVIm!$te=CpG2TP>*ps"Cj\j^dfQo,)fa#kInLO+^uGE%@Tjr2<mU/qQ1_S
%i3sSJ[`>eT3q.ct2FiZIK[cA<E@i0]@;JdI?!2l\`5aBTA[mQ'5CTaaYA6V(9`fH*Huh4bO+[/FC%70?6Fjb7$\pEYcV\?>_BG^B
%L-S#f8$KcOB`;;;qe/VELQLf9?kg.2PG7>.h5SHEUZ4NZ^seRXklPf=9KJj>rp%F6V81JNCQ9%3hXX2&L._:j^P75PX=['63JJf[
%.R:n7P[;QQj<?umK%>\84U&*acV^CU#!iK0^$9uCa:d9QETLb>95)KBRBVQ_+Z-*Sm!;gTZF/B)]I*A\g`(u54H@X<H3RU*fs*'E
%;fL?,B5o`;6o.=:m@ZemO=dI6mVCrrFen:@1GIsu7lfhJ(V:&uG!XSu<83Xcq&+[]>j#JK_jYZ$M)KLDSb\r=-A+Rg,iFK6>X(p)
%-9Fi-<lhE"pH^=+?b!V?r']5.``1n?%PK/]4_YRs`C*Z/<&l$H1ac4&Z!>.Z7oE(J$D&>kmRid`GN9#:+qfu*$Kf$83YuOmB6jq#
%,O,a%%f-I/Z*VhllPmo'0dQpM'I>?GkaKO%I/e9&$(lam[3/8gN[M!o91Xn1Z]MdTAENPB"X)sdmCAKa9mG<,20r]9r"@,HVI56J
%+e+GeD=SIe(sK_j%JcHu@bZi(lM3Q&Z6<Q'_o:SOl6.(/_oQp,5M?YuqMHa5k]M!1Ju))VkSQ=0en(9FbQ'DFBiFO%hf[7T0E)7U
%b_>?.Y$Cf5"`6qC^F>s^_B"a38(*]Fd7o0ae&+!V6u+:ECtoW%=*U[H/\fET_4>r\7U5@^UPVUCpGKhHUADabQYJsYVi/o'(b9c>
%N2]<51\=h3a>8D??JBT<<-hYK/TYTDp':brQ?=%3kG_b/V0n^[e<'<hjb9D[lCiDC47PgSD'N#?eH1=&J9UE?+nYs]5aq=;Bm/p'
%R8]#\@jpu-K5J'L2d3BH$CgN\5a"_BoSRfYSLPJ,&Ldo9>*&6,8Y;^G,:(O"7bM+u7rdF[%Z-/I>5=$b<;o^3hFgtd]S!Fs2=6#4
%l-@)`Tus@57f,').5Qc$Y0M=Z__7%u4(i]/\j-e+=tj5E9A$;%<[W]5&=o6sjg(uEAi.''`$JEDQ326!RVTXZ5)52C3\`[H'1d-&
%h&NHO-%a1$5u1qsdU^_>OWBTt![IH0r>L;pqh8M#HV)<Td#G8FPHX\K"^$+fj/8N4fC;%9!#ZWTb?ke"Me<?7,oKJ`&D,:?MjL>8
%fE>f5nd)@HNKCdV$pni_^iOG:,Yo?FFhXXi9S8&:)cpj9!1^kS#bQ)&]q]SkmM7uld2o!hCkK)h9EWZ(dj'O/c`c*u1IgS.B(G[,
%Q0gKr?5b.k?6Y^RHY:K]`*S+(qI(L9s4(?t311A,(K(J2!?hF?iTL\>[Y00]N>@SX>+.q1,lJWnMpV1+a9<_N49!nQ?q--#0pNb^
%5ZnehYdK$5RKNrXQN1]kE.82pmB==\l/4eaC+jsmdMZr9prCJ<+2.(Z<m=7n5P':.QK/mBq^/+s=H'udSIB:6>^,cDP,#4qR,).-
%BiTe`3h5N89?!\WJCO,\\kc0*]Ql)_!t6t)c:3M9>:#*((cFZLXO2n+omSb?C9n39`h?DkE;68GA7FPTql9jW#G03R<+\Qt=5btO
%NNF]hQJ>b;[N[iR0kK0ZW$.#eT+R/@>HiS:Z$gK-$?]CfSpfqbQUC9Z:<;mr#>frJL8Aal/5k-E#Z6Cs`)53C7X`U^88B86afPlb
%2ihUD4@kTE82(Zc%%]^)nQ/>W%-oHa,CD=.Wo^DNkqZhg+%rf[#IoNtp,pe=EaEPFZCHYg.Pk.+F<,]h,NPPX5CEKZMq?lN&b;FE
%%193P9^B"jiSrpKh+Ie#3mn(F@Si;oc(;BY^f22*/uZ:jjF2fiQ]Mh]#Z2Tcg<$(P,bg=OF>)R^+_<MLLmgLRl5CE6,UK/tl1\ZS
%L9u&O+SO+mojgoq+^tTP$25VsNRHNh&=o/<i*2qA<T:*AI7Br8(+#c_>ghjEQ"s@72c_L[o+F'kY+R8+^)9?gfXQh!5"+\MJuT+f
%,2A(V8UcaBbm'gY2Ie1_1F$/\YJ0S@)'r$IoJ8;u+Nj?q2W0KKZr(11oJk\8;GBjgd#%<[nr7q+E%p`LSl`Q`U_s=ffiK^L9bEdp
%+52'ucsFKp?X.hMe(`nhcf[MV'>HOpU^S"J3q!(E+'/k&,'5s6d5-Z[c<1Ju98FK#<2j>.-EA:-KiX\0f`$D6Z*rqP?%ZsoP#sF0
%1_/HD%i>FMl,<4d]V$YRMiu'fYZLC.iQoJMlon5ii"oG9#Hkt@T+cE@#Js7_Eb!P(Ft7:*ch&fhEX@Ge"`D[p<`_`"lGJMiq>==E
%OEVm"`1!XA+>BtL#\iBmRA@7D#j.^u.a3ra79(Is@.%D\B.<qMJ/5[KYh;_PAhlVOi/fOh6:RaW*k+FP#>lf&#OedlqhC?g'M!J0
%NnJCqrIMTml1W./`-XR[p*iUC"N(I"2F_Bah`dL&$m[rqf&Re;rR+R8-]3KtFTLp][nC7]HVs9lNr<-]nFUp)"kO(ZkGs1Zg0Fa(
%q0H'1NEC)ua&N<C5rR]cUj<8<U_>H`Kd9Mu4A.&C1Mt4D`\e4(4$m?Fht4q2j14r0*[8%?EBJj\o#:,mOcJVaK=H`[il1H#I,WoO
%gap#WcU#2:ickYml,E2J+aQ8B]AHhIkk+<sCtF#hTL.GMMnXIe0?*[;-fjg2Gt5n3^lg)I9j2r9\Qnm'VOkQ"kea*c_tDsURhS#c
%"^R_W]]jn*d1.'2]ED5mXnH<l2R1<cla3;Sc$9Z#H_aq!_;X"B;C#f!Yb1N006#iq0;\?)JnppOq+>1O-P8<!nHCYMhE*#8D-9fQ
%#Hm%Mia0_5fPo[$="'6aK\>2_k]lYa^%opVkN!^(<+!gnI#k'nb_;=-2Jc8(A=[aF5WMFU]T+'gQ&o<M4U)o@5aJ!MEi8T,qE'ck
%KZ\OuB/m@-$]!m(Y!a]51Y)_>C/`PM<P&;O1U;a"V]qt8<nVN.?trD+FE'CIXhS7UVBq,/2d5m>4P"$A*om.db!Q$t,Q3rcbL`Na
%r5YR7`H+gh!S/'6;;]eO?0%\YODV9[rLPFa[C!>M)%b<,T`Q9@!i(?4-7'BXllN)K;,4.7_G;G+Q(OG.$N9\jqqj)Thm6-fcEal@
%h>X1(3dN\OF?NO9OMGkUmYm,$*[./t":=:`"XWnlJW[lK9H8*H1<,ZNR\_]>Ne<!Z^%pjno!C$Q-Fe]8(o_1X1$6<"#b5n8<DSZt
%js?!'5^o[&1*#geHSi9+I_j^B_<R%JPEA#lUC/28R%9YH<#H1Q2D-L=OY7HtK_R78V7#Z:4'Y,M()Yr!=lb@[ba?8M]0!chKo*%g
%]^FFUA1XX$3paJa3.B(^qo14>d*:$a`ZSl0rrpF;03$o@-US%d2"R(eFc=>dg65lcr>WYod?q\o$Kl#m//U9&)WYeX1,I\\:JsU4
%+N+2r2"NXio8B"p=D4V[o,goK'M$lSl2q^$!s%t0.=kf-^%>S-VC?t;K'XqHB)hSe'E7t`GR#8fQ0[l6s"W-]PO@6cD)A6e%]/KS
%dS'G8nlGX2*`ZOXq&WPm&Da=u4^O+aM3(Jc*D2C**iNu;HX[N>4.A\6AIkgViPH;Oat]<N_mVCKG$b[J?WMHeBkJBfC71t;fXS6g
%@"@IW-&%/J/rCu[OU:B_W6]G!+<6Sm0<7n6hCJtQ.!R<G1mu19Su(NO#6Uc)/is>_lb<"mebqf2DHqrr#>2FR2kqlGX!G?4FQT>S
%nM4_Jn?p=]k2WA"2140PQXCb>ro18F(4F>%,nfrEhJ@sf;sl^3<KFjQW!2A+A9Fl1,Z$1U5"jV?q1k'p:8\1-,((c/V94;@a:NH#
%<>9L'^(@:N-+j&c%&=bZ("aU'\F)Y`J6PqY7C[aTR2aUKELB4%'*mBQ.CJ4e`<eNPOFV=1I`YK9,"bu<L*@Uk'G65?HRk@?A:cE+
%EN(o&L0Hr5OcO83DG9NP/=iYe=_3R/?1jpbhga-@5?HX:KSD_gaCf8X-']6B4d#uu7-`.[cT<(8=+e*sQPbj[12'%VE4RaRB/<;:
%c:?://k(qjBjHrLl)hSh]4(W!ejL1JRj%m-e&4l++@j)I8idYO?eja;#I_YgAd)W"Yg]&/6B%,(@:(X(H]BeO_q(Y`Y,P6^]nInk
%jCc3&NV9*Q?M*Np%ikO!c!K>WFM#&<np>:QMWt]?1KZ.U8t*C(V9?j&n<"DOUb+jM8p:uS8/%bIQ2+aE).Gs[':'/M\3VtYoY1&H
%VT;)`mrNaBm)o:'Zqc&\r(UG\UlFisMoB.p_7Yj4XQ:4bV+;c/SX6=U,R'a.Ve[dG:6=T7"*[B:5UN=T[$3NuC;tdoA+*,lP7W1d
%DoYJ.@,m\@l?&#jRN_RjHCcl]l'h)5f&NE_rpklX)S1-b*@.7W-OaRcd!^H;`AJW5ME71%.I('1llaWNRN:?0k;9nu_n)'OZW]2L
%4e$)p7;/D%>g8<Q0J8P3/)/7#3*s(V7g:"21:@6>0`@(79i7SjMdl>RIVL*I;)NY%6:%k"ASl"-Fn#S[G:Ag*Xkb8[1o\=uQt(gJ
%.;40t9bYOC@],*i'GX3881+\A8R%&72:?;^K^gK5/QF2(("-K/JZG+p^$c0de]>H(f!1/[jM;0dk#kS.csK\,nq[[AWBsHj:GF<0
%[rD1Ij'\&G#jj!^=[HVY71m]]:deEq<?e,jZWLG.&h+Rm-A(E][hAH#[3ZY:+9Z2D,V^YQ1?Y2d^6%qC=#dBcKppGIqPfG:c/nQo
%X9<s-dKskDS3n^F(OL)S=]feqKYn`mZ2[cCf*^oAk6M6_4pu)J^5`biLOO_-5[U#`hj>Pic2W`a]s><Yeuqo'7bCTU%P$9E&Z_Y#
%=':3JcCoskHd[GKGVu=M>mM$Jbk*)&?E1'7*D:Z->02:S7h/tZb)PV4I:;+gZEr;ML`Rn#`[i]BITc!bYn3GE3j55<D/eBP?R$S-
%-:+T<bei.W^UF2Q$rN#MqAP?VN$'^e\3rjo&(GL3O^V9?pSoN6&Nr"0_XDh%SkKK0[h^RsocJJt`r\XWm<IOYY=@a?Q7>:L/ku'u
%pD]0#OUGV#%+,Ih:hY+V8C\Gog-l\+,(ftqVYU;WJ<C..O1^^M:0ek:MI[V!#'9=j)enL^TR@[BEGl3jRd[EXfB15!gRc(D:HDEF
%.8hs/P"5*h8Vt(JX7e`*/Lfqt;S!IbQrJG-XY>d-,osLfp2QgEQ'*PPM>89_)_Tj0HPINu,!(cC,Q"*n<#Q7;QPJ'fVHEt"+<Le&
%RG)k`1'unW9F<9-g`7PI&d(S$TErqUFtH+1$9nl3L+W60r-&SR+Fl)t>p,E4]L4SL$#9)8\BH4o/65M[l?k7Yb9;F7J:<(Z`&k"t
%?6Rfb+o2=ZEJ_-]H>N!JiJfI=qN@33QUFlnrU()kho3tFI3?0]TXo1)qK72[j*/FcTCg(P,*LVl4RptVs0tVJ?"d`.5m6@JGMt8J
%"q5eu34P+,5ST(!%e01nS7AMe("<YF"eGo,=UH#n+'!coF*s:R0M&9>T+&$jW25X(&g+gGc[ji]CdnC!`!42@+Y;2&j0MrLZGBBK
%V2X!@TG`gH/TlJO6AEYO%Td8]24&>fZ*C?CXl>d`kSmC4^:>%_T_sdMs8KFJM;lA/Ml_.V5SRZkHeUY8=J;&l4%rmL$!ALc?>!H:
%Bt\i$LtLKYG-UDpUS<8W$N&J!kRS5;-sq*!NmttBcOMu[1/Y16*daR$'>l($WcCXjK.jpZs$Q.de]!Dq=2u^K>LBsU13G`t[&1@]
%Mt[.gm$2KRA`3'_JHdbs?/\-ieuDOg[qM.p>o5DP)S<'%*lGAJ%"AFZ=02pBL%RJWh,<9)=i3'fA\__pG<rf2f>V059l@.s]#S@T
%WaXUk`%]GYH#7;a*i>(dc.]/80YoL97XKX10YL!H(n@7q98/fae'4F)Fn03BLD6JGRR=,VT.s1pJQFFb6C#R^"u!dAA]f");"g9X
%&ilTm)W/%\056GW:#!=^NUG!NVa@bDE-6uXl?7GU\Tmh0f9pTURZ)cmHUr.Y=P>>WE=GeZrF!J%#f/PKf7HC55_,dO4[=Is&c9VR
%b'\+H:s^^AQ`Z.KN"3WU1RFA!\da(+D97ZCOgbh,>E-8+rRL]@q#lNBQk`/!/foq5DG#1XSeMp^)tfu%>nt:T8R@Bb]9:iY2$VZ0
%F%5Z`Er[AQS>d0tF]EKV6/#%JF&+7GX38#(k9>7FojS<*d`Vl"M.mh=YrnCjJ]^RcP]BN]ahZKK&eb"/>CXZ`ID6MEk#([:(2e&G
%#J@6_r;r^j%UlI3o1?:'QA5j2irRqH!GSi,AAr<BBgtk:401<VDD+lCf'n+kWr#@l(P>!ZdqaL=L-eE#eLQ,$OmK4BPj_:>WF.h<
%..YE1U<iQHCn2Xt$L"!/=:kj#^C]VHYN8BtO>KQfWaXp8()).k7PKQ6jb-(J<cJP=Sms?hQ79f#=U,=X=!U*kr'VZjQ]kPVP/1c5
%rEf+0-%*i-TV&5k;Scn*-(0!c`c_39b.XT$n5#CJ>q"$>,k*=jIW"c'ERb9fY>6Xc]^GcZ'&pkp1J:Z-m"`.$o&-$j"?d(__UkPV
%H#*C?QWL=\=M2?g<Kl7gWH-_lWRO'@JGSPi8+g>#(S8f#l[/Y`r_nX?lniT/baK%Z>MboQk.IX+$bA\NpbdC.FJ`<7D$n[@?eFAe
%d]Anspgg?<BCfaF)LMdi-DsV+8qi+Ns-%M_f1T#G8"P_gd,=g)8PP8+pFfb]]$@q&H\TPrO&Ph3Gpr-Wn"ZF&E?UE/G8$HsDP%%5
%TnaDN2`NK>8+I&aY^fXQ,=_rTMSNN!iMS]k-1)`=T`Mq5(IQGTb/?iU6obr#]Q[=N1GEIG#>e/4HSk&RKDP(nRf!_!OFtc\&/D^q
%3A2`#Be2td/#]f_i-rQ'$4(G(B^U*,5?*lLKV.]ro,e88f`115LK<:2^,PX*J9#'Nqq(E]19UP-gkrj,!M[DQr6?e6G;F^6X@_*C
%bnR[fNc5hDO!Y"/ZH?s=``fBh/qDFti[R@HJ]A-;*YK[V\$bHJT2BsU^""MWmf'd/4%P0`\'cE2U24c`%tYKI@=VLY6&60/i&VGq
%C<@]Jd_/6[`;,M+^f>(=+AdplZ:cn2nF[$O-&Cj,2uE-+*FeIE)oQ0m\a'>)`mO+Vb9b9s/aQSP5K4l:?aR9@8q.Wg&t*$W6`m!k
%:ki<aRj$Tu^m>c'Quo`fYaB"VE.S`DNY5`e)s>0/'3&9+*$_QG#"ap]!=aTE-\'Qc]rlFb2`?8N_9#0U0PN+&<9?p=Vj/iH!u=3f
%5&b8HM2NH8QCCF3G@c%0m+T5[n,oTRd[^K-l4aq?S==;AGgW479f%3982i_eQGkl]co#r]K[8nhW<a6K?^p4/Q5N.!,FlQTJs!#O
%8iK-O6mA6\Ho,VS-0#V;\>fNe/j$XneL6UeZWdS;0BG\qk8`&/?in;N=dAi'`ZV6[aW"Ue7?Dt-ag1L*JCM=ma5W)mH+"F>oO"8%
%C3.8!-T;o2A>4aUF%@1L?9)%Z,#(?l!FNL*>:bnM(b>+D]eOh/Ir4iW2iQ40XLr/&CoZ*8MD#O1--7N0:U.i2UE8/lRKf=LZ>*=t
%FtPL75(K`9%9k"#]L#Ut#H1HfPt(M27FM:5d_-N0g-96g[2-qVGkoM3Z)t"Qi@M+4e_Bn>^fu(C+%4k-C#]l.F-S&hparF1%0in+
%2Q\-6\!^a3P&-4`4/*=.H?WmoeB7\Je]NFD[>VIq*9!/2FdrM)_)K0$i)P-!=20ninP>]ihm*j,4f'&[Xd#"%DK2hT^3nneW&18-
%#lQ2?klb*g3*44%NS.FL`W!mPI$/g(4hR_.`&W?gT0/p3L:J4<TAXB2RlOe+44sT(M#@DI3oY!@1ogUe]SZWrdkq'!oUa/IF/F@m
%%&T1#(5-FAo0<=G&8HP?Rc3lr_#;Tb+I.A95p=)<)p7=CS-tIEU>+Wt!-kUii$c:C2_2H2&*S"5i-0"R)=SatRo$&&@0n>G:MrA!
%&8t8T**$%$CH#(]RsMLirLtV<rC6/O2h[m(m5$1!?V][FVt;N&pHshaXE3-I`qV_cR@L&%3aB,o?+%d&-nV;4C+#3eW"j$=?j)-r
%+l5gg#Aqk2Dp+<,ifPl;Xr\dQPG.BkLTf\Z5A<Tk:p'.;E$'4D"]J:P3%LYIWE^[F^bS.`dNoFCOUa'>@n4bs@NiU(7rnDbhO:`U
%HV*#M1+0k?:6?;B@adRS6Ia)I$PDW[5=sgL//QI3![5Kbd*?dIlhOULoYpUD4"dg#Vs!Y9bN\i`6/uuS/c\C"q/kJh*'"*nf-A(p
%lbS5N5<g;O"lBDa`nB(>\^)"J5N1!K.7D[*,QdcpRmP1H7''^'-h#IjbZ/X4M4,\-fC@EXXYCX.@@s?1L`Nu\;`dXaa4<3E)UsT+
%nfTRn!(%A#ndZ7/DS1,Y*VLGQ92J6*/4F*uV+V=8o%$5c-Z-Q>j2M]]C0_Ga.2O?,`7YT9SAG/bIJ)6jmu;Uh=+QVpd=82GZ<kXh
%96Xr<.FJt<&X73ifXDKe[,[?u1%JBiOk7Q/l*2S+3Y!%5KgR\#)A8#9?RN#!&s/s?)\+Zk.-4dO=0uh@Q997#W>Yi@iqo@tN[?Uo
%NnrC].:>Q:nTapF&/?P$U`d(@P4+ZE!]Y29PjUC]5&<ap(gAL@,Y6V%l`1hmqX3Bue3'$BWsKqK;&[o-69bBA$B`tB.I+l<$%d3V
%?Qd5@NbgIu;n@K0Jg`94R/tH_mf>Gn9o<(S,COK9diODKjUc0o;!2d8Vom&233-1]N>gpsLuOJ[15Ug"TFM,@]9sGrGT;QsI0PS;
%)"5_r"*Msg]gthlTVRcIR?H^R8'<r].?suU$&0RN<=]M0jNaZdaL#K`Pt#kEoS]_&4nSZ1+aWlc!4N]Rq!e^NDkA=%39qoF8>R%D
%,%DldV(0tk<4195:i:pN(9A`/pUqC;T>MO#+cH62[:W-H>u*jKX"e;MmucDKjAL_GXZ`E=`?Rfc?64-%9"]@GMaDh:GuF0em&S3.
%n+YD7#RP!-K79U?U`.Au!Ha7nY0fAtadBq4L,H#I9Q>@`d2g=N\136=B9QbF-rHGtPPTQim/c@niS!Q4F4^(<`p!@["/NcUR[qmV
%]GWC<K2QT\S<?GWG62q7$*u0+.B$,7jBJ%m8b6_9SY(uRo`A#`W2jJG=G$lnRuCa[Xop%f?Ro`s&_G:'%:V8E?Airu?-<a&Ep,a`
%h@p0'Mf3SiC._WJ:2_cZ^$nM3]RShFnrT,o>c'GhBZssgMSKEa,;ju@)Vii8C&@3u!r9sI[d$U14SY\Jem4a>Vtjr%Og,!-3tRf*
%+dm2cOqqCfV0bbP5't)0M!9g3'r`up4;Uf-2sH/tBCn\c<VAiNA&^Y$B'l/WL,XG@rB%bDTo$V;N6eh1]R),P;B!^/_+Y%DO_7Jp
%Vf]P2"mRX</b4%5k^ZH-YVVk]+9SP9M-16Nac:(PT@@*jqq.>InWMRlL8?tXW!m<@F#D^iPnC"/1[sW#g9NtDVN\pV=9KVA4-hmo
%bgA8t"@47^MU\mC)R<V5]BCmh/B^]jPJMsb$NYUr&lj9_Ro4N[D]pntV'm]W&M$-%Fo89PHN-PjKQTA[5agtI03*4BaX)X3,n-g[
%lC(/`,+d2SF>(fpd4`$c="hc[H*6(oJsM2dp:We'q\V;9koV)16+1E^Xtt4pka!.]+s`O=*41,:g,`q&6DJ=qWN[5C)RI@3([`,<
%f)F1Y>ok0?BAq!u[gd#)CfCZ5+mE4p/*VlP;n2;1=8i%uE.d$Vg#s\uh:DU7r]SGi0XZebgm-uD<jEp)(R2rs1&BEQql<T2ABW7:
%R.QRLH`GQs12Fm_%e$m0>]QeCI<EFe;RRHFp[hK?1=^k">O_md9fI'#_j9&f>$@!h-es^r2$=Di/DM&Dr>KeI4lZ+kM\sBFcSGIP
%V&NLb_1%]`&Z8rHYE-7X8.B^bBt>lh7SP0;DFGK7:gGE:?@Bj2!RjX_9XW-S<m0G_Y.<3Y-\.G9C2#ClMo,p7d,NI:fr,gXUdi]N
%F[m3l9$ITd)dPi'U9-XmLu&6f8Um3>oW3p[cVf@q!D=&'BsggM<='Ejoq648Z+^pWT6)(_>=pb@,(aHt&3;-`Ej?fkQ[R:K7@1E4
%$sW3C6$*OC/5`:mSm9@)Oeaa%p^pLY;r<2Re?F57ftgjr&9T)V:ibn\7<L-X0ruU"dUiZeX&Y(&5\RI21h,WE72\X!qj*s?HnH,C
%"s@YT?e93d/_l)d2jrP:DD*%"=1>paSY(GV`mM6GEmX]*s+p8fV=$Moc!"[)L16rJb#?>ZlNSGAfBAk:WF_-L<fFMHc/qS`+#tn#
%XN$HLV1qRl@^m)K)lH9Z1kC3Uq9I[$og9g:QN7D2YBGjfW-eX!U'"gJ._S'ZdFOqpG2I66%RF<]PU/[!PAP*=K*J3IC&HZF;dOW;
%[N=;9DDu1VZ73L1gP]YahP#;+XVJZVR6]L`"_3+onVErcqTiNdd6)+h1[tnLgmNq3+YX,U0cqH@qo;@gVa@O.\C7&lV!qOh8QBuH
%85`0d<EU,.1gGjS4$9rRk`XA1gtE[`QMuIe['V7H_%XhmM4IHNoFI+rP\pYY`t#7*^DF$dM5I5h4t0B;8h2U$n@daTlG8HU6ErSL
%l.MH,[_rIQl+3[YY&J><>p<;YL<'M/&C%`Z7f&V0?5+Mb+^013D36AuZL1W:OPX*_8AJS8W%pcT[flRl:q.t.$ccUF-Q>!f[(!U>
%0n9M:L1g`SE!3WWWH>!.+b)R/:XrdC+X%b*S8H55BI6$_&t5.XYeLR4G[J49@"]=46D;.+,VOM_l;cr=`V?0"cFi"<Q9adq@cgo9
%M2a>r&9"Yn-G7a:OXc>Uj`G(f%`99!$W5E^5_-@OKQ2A`Y^(AG.'LECm]5ZK^#WIX0iC6f*0UZ3j*St0=c_e[j'/\^$kN.,L&DX`
%Y>B&.L8^NJ%:RJ.buBD:!D1Gc`9/s/(\KS)eT8C4>q>![GIEjgaX%j3K-a?g9Q_fS?EE7MZ@6%)q*9`=YsLKE^6Z-A9Ha>k>HE8$
%p$nt4Yt5N)a^fo6>KI0+krJN47#8?-3sN>93OU)CQrDg5+W;ftSMAl6nsmo?#C+oFl;7llU#bOQ/`pSp[u2'2fK)<-W-b^J?;+GA
%["B),!K&$RA0sWRF:7qa-b@j:\4NkJ(]kaT'W!R&C[f'8L@Q-%0>+ajgZ)V4$X_+hpr5#D18./poV;ENN508"@gPHTiND9dDRcYp
%@FFHH;S0^NJbdSb/hE(aJVh($<Q2I\0EDM5HU02_V#qN5WTU)+"'V*P'Bj@5I05f:!+X2XQ&/9Z'cH9KgBd#XFpY)\ZM#)aQ5d%c
%Zh0CR@]&?C<GX'Q(MnU+qLSg5%g9],!u#oQK9KJhbF3]l(r_!gf09J6][XC9n0%YQ8urrMds#X?a?Bt_,%B?heu7QYBVZ.-Ln_#o
%o)s2nj0$IUS^&flW5Qs@-`opg'Prg'Y6h)LS6(M-@Fe9/H7FX`7/AFt'rgZLqB8:!04FP18:%6/n2P4-U]ei/YX+qB759G[32t]7
%D<:B*QOWsAX*t;_gd'*OF^)VZF@.qO7s"N>(sK/u\**c-'fYp`@fr;t(T=FqWQi##07;S]IgeNOm=cQ.%+$tH+%:T<Xs-nMqf'Ta
%3s2g19^gJjfm0\N5(BK9LcUff)E=ZETqqWUO1Q6$q`ff'HPF1AGo3Vo+\K!`M$7+qQq)*$+i/^D`mmRB=cbg_k=Mhh!M^IV720BA
%Tm0+hGs+=i9`3j2%!6`2UJ]N?N%\urCdbE5B-ut<rFpa86N?Yj,;bDE`,Mqs1,SBI:&EJB)ZQF5rO8`U:V+$;:jS%m\8\?<Pf/>G
%cu"V&G_HNV.*S&^Sd<s.&ui=(*Rb,Z$VDLQYSi1]g7oSbH4'\?/c7\*fN0HVo66^HTB'U';sW#u_Te/qc\'7-TAsO.P%#>0P,`A)
%?:]P_%O(r(8A=DjH>""F(#qO*h3:d7qi*2Vg+f?VS1BMRI+1FSc@chkD!o"ccp9L5dlb&dA206oV5nF/Q%Cs7njd)Z7])ab[3*rJ
%,N^YJET1FhbaS[YFbn=O-h2"],8lGLP.)Dc#4@SM@TqN;ifpB$UZsE$Et&k!UBR!&V/uL`[sX>:MK.#7:#GD7I^c,H!@gLcG@<_)
%23+`BR'-c$B<$MJ;2&FXA(d:L?R08!1RXB0o!>chas7siT+)h!VpC9m[o`6W"<t0@g+d9Zqg(s@U-o`B=u#$teTZJ=HHoZ@\UKn&
%rk4K,^)>@l1,`N$Zunp)P*rF?=V;)B$92%S64j=^^L6XP(@C(Z.)7g-jG4,dr.E"49-_`7"B`hi;KHX*8AH')rUDk\qS[m<Lj[7K
%_1YS*^6>Y@-hKQh=pcOP"p0k!e40\8a3WJA=,i)R,BkG3k,Cq5*:BM"WQa:clG]"rWKF).M,n09<P^Gt#e;e;N;EK;k*?j3,1'.d
%&Cj`KHF3@AcCJh]cB8`S14P_n\aV4'nsFsm4fHrS%0<81'$c`0ATNeO"UjJ?2YAZO2dQA<!SH@A]>e53[c`2eJ_/`S`QYH6i0=(R
%Mu6Rf)8'0Y>me\Z6Pa4^LB<fJOo<`81!Jo6EdSI;Oi]$\_]E$co.HG4-T;lUjaNE*..cj56q3HNW/@c#(",ChleT2el6[Dpk3RUf
%L]/[2q;O9=2nSBu/APG<dla_&I(lNa!I!M\hJE$)$ib`7nu,jmDbI//<j+)uNSpTWNr@X/(]CZSU9aM>E`,p%YqEkL&["0V]1UeF
%To-3"YR=@IHM3"12,TZlHu"`MgesJeItRiD%[CXDErdmIX*W98BOuj$6Wms$-DEnH@+@Yg*#O+$E^o"pk#iSrPZ="c[3c#t5[r9P
%)j^.C1sK&`0!-/gMPhNG-d#7RHW4uX6NMA5fubS4ho+AWXe!o3p(4noo@.$Gpo`XaN6qI>'>$"584p@A+>USR9srSN\c]<7+j.f^
%Y$$/&/3E@Jig+A[JR^Z]cG:iFjBu#GP^7(GGmK'h+]1(p5n/*VWi?0i/3$&^8f2]*aLkQc#30(n&Ap[Ok(SVI&^']805oI;RAbrd
%TV]g8*Ds;/h/b=Fhq>)35VHCl!hFk*7cYT[%X6I(55c(\qUV\pb:_PJd]=W12^seW\]R3#M*]R()/H^*!rrY"&*h9*I&uHK>="]Q
%6E/RW:;o72Tu@opPf<t?4Mi!mR*iau9/*TmYG$cG#1Ht.MJch`AiC`50C)kT?t^=\L'No`H7Ye,O9a"kZEI"O4/S[DV39,57/k0!
%)85^;>Mjkic?Vo.ZR\I(CE6:pQ^/8rAKkEG[&A_#XV.?\rsX&W16CC[X^K.bC+^XH"B]QS[9HT86X]CKFPiQ4[upQ41HFe']+HuL
%ObSHSQ95MYicbc-F8%JC40<a:>!_c?\H$>b3b$34/Vd?oo,ZMIip7(E>I8<kB!38XZ0h+V]3b-qqqLfe>odOD*8Pl=%[UL=G>]WA
%>R:Meaco_pF\tOh);0X]-]d@]<m7,sKtZ0Nhg(*hc@s5&9*tGl)Eu'\IN0U5,gAJmbYhO.+<rZV,4`b=_?B'8J5&np5*^96J*tui
%L^L0Qn@I"!lChPGWu_VQLJR2g]!&8.:*Qf`,uFpo!?r<N\F6M#^%ru)ge-+3"$anCc;fZe9"\>E/kJp'Ogt"_S-#82342U_%12\o
%]])23Us9%('B^f\T'E7"PA_o(b?'r@%m2M2"bWh\doj1GR$#in"joHWQ%).u/0sV@\.qEt?8OhQ0].VNgB_QDGm7Hq%G5-I2TW\+
%ih^+L?HUmt(shNAlsN2h<4Qkq]MLn_%pd;*c#bqIf&FOp2;PK`92c&C;PS5Y]GQbI6hgT'\mKUHMDBCJ,up8R,pf\E0%NNO;[pjU
%[:bj6h7<#G-D<%"P-:Yo>*S;3"hT%eH6NZ_.3\jM\M9ou1:B=LN9n$:6V%ru-A*u//%-Lnqg2Bf05Wk1KVPX;)[!j,'do!NPBhBe
%mH,5Jm>#O1#>X/Ri`hX-7J^r$2u],R]pMP"pCNK3J^Ug8SiLR#W?Vs5?l%th1,%]WlT4A?b<&UbJtguZnS7"=Ir6C@Zq^?e''S"C
%2Pj9cV!Jeb02'8.3B'hn"Z5gm5A:nWdS1q"488Jr&Sq"&hG?aGYKOV";p/t=\^FuCVPm.`RS1:NcPZ.V"+R$7-7_hjT!$W."@E0M
%I?fY`LM]mIfn`iN)t&[l(Zm1.@]3>hhV*:'YEI0RjbT(=^u].9Zb#Y9*(@*rm>CY<EX@:i?"VnZlHF[s^D`df)a\rn'7Beg`WYJt
%P,u/P;iYbj#_l45(G<aQi\n1i.X$X%#MjT^o,re\h`&1D:R"<<lHT5kp3.-NY]L1.C+`q^f%>p7.37';3=[`I;,UQb[7W9]&P57U
%=!GmT^<fM2EhCYG$mMXPa!JJZru0&lmSHE`82`^gk<]qnLg$.'SEI6<@%`MKSTF&]Z5G8U5UQ[Z+:X!@5[-a35q!'[)dU&Lf5Z/&
%,[5jg[@>6QE.d7Z;C7nh>S8XE<R)^)e-sDLHUm;ZkTdriXdBtNRQm<IL%Hfd\/0Ou,/qHVd_2G68\=.9ONKjXC02+-7J+?*IiPLl
%M;"`En<^6ZZ%GrjA"R\1"Ch>!oWI*J?2m+4V(Z^EmgR?+L<Fa3Z94%^IcR%N3ud<k)TdNp&mJhOX%!RMqYH-/E<o2a\`*)$VDRs%
%kZaO)bMb+98cb\-?538EQHs&CD-Pe-;>1L+<\QPm>^(<!S@h$#i#n08"'=8Wo$1556r\*j?3ZImrAh*pG@CVS_'j_[!RHKfA:;_G
%0pL`_C/"G3Ofr5t`e(Bi@hf[]aAqIGW]#Uq'#olmU2<3)n)BJ@pas=GihCFs^9U5.Pc3o[2`%M\q9l%Nm`Okd_mJM;*Na*t-(@H(
%N\r[lO)=j[!6XaPYDWVfTdph.M?-B(SO:OWj2-<c's+jTY(`$[qXn#sUPJ]d!j34de?iXf-/GW.KVRa_PKZ[lfjf@cPi=h*l?c[U
%R3:f.p\'!HGE'Dq%W9X1MDP[f2K:g#OBYEaCZgtnL_u"%`9'+ZLJk+IA5V:ocQ"!l_1LW->>YC0W/*AA)1m,WROHR>\*e(Sns8)L
%.!$XFl%i$V@UZLAcX.4.TAOhL@;<UOM8!0D)2O)\9pHK(Q+64KFn0@Jc:H^LInWjK8U"45*=:sA%k)=O$ZfsJV#F!C;EXsr'I.q)
%i&jh(I58Y@Jd#H$:kK1VUKqtuBMd?r6UD_acO(A@]d@$@UUeGsGgY6;Z'p0XJpouVF"qT6LHtdaF:]s[&UQ7CnE@Fba<B6N^tYIK
%^*Pc6CB'PLY5[-kQo8q`Pk\s;Bi2,O8OSiCT1-B//R-)YNtjRY2A/(lp3?@Hji\0:/>^1(#;)A'ms`?9Gl#`nbDZ/UQ1pIT*Ac4%
%E@%t;ePO#I'%j]Xj;ZMYBgA/^+Ne>j,b2ZJ[idO`Y(4(;(E-nAiipTMgM&'Hh;[90Lia>A)SE;C'q[?tF`.SZ*K6F%pS+G#A7?]1
%LlBIZl8J(4QXMbP$BJh%O=fh8L9J^t)q=ur\1*"q2_G7*p3TepdF-j!@0!bCI$WuN+_US*pQe'!j)F&aVKDoiLV&W68e7Y;0CT_L
%6&6si_SU*`OF[JGdFdM!!E<4L`sZ5UIcZ$<QmI<d/pc$X&P`Xb\;>96+8QD!0PGsiUVtUf2hmEP!)K*-ae>,Log9rW&NZijVtYGp
%2)h_:]eP@.I>(/_"ZhHYhScK2DM"h^f'L0peV^(WA2D%kfgRX=E3gO@Y[RhP;eF(k.pl:0"s3,Be6rM`k@\,O'g?(Q]!Kj..SVfB
%'hQ[RpUksm(XWnp?<ba4oBu`V5a.eahVj4!pbRW7Zo].e<jUP==[BiY&pZ#')Z#!1>$d$.D+=ore,Mtt>h,[m2IJBBJ6m4BfEJ35
%+e/mer*YgPF,6f*/&D>V&^nZk%N2KQ4RicbLQbh[7+D2WX,!lZ<=f_F^E=BSY9BriFit0V'+htJ,7_I;KEK*\1YZ3iTLN`OQ^2XK
%4g-p:^&>G(%)Y>\kGk!<^^BOZ-U_=NO;rBb^IpQ_P;lnbP$Nr>-@5MC*ig/TdK!oIrJ[=a6T#R,5ejV7P%,a@Cj$mL"D#S?<!R%*
%`,/H=RO`5^(`!kYJoCp#L!ab)@4NHT+M'mPQ=S6o6,b5EKE4/;FWs%B=DuaXEGlImo;uq;GN#1G^!B1n^da>[H<5+?UYm7Q0N-fa
%j\N:j"\Go8Il#)_[Xdm%_tBG7'fG=k#S>D$V:k30]5s-m[?HcL*(40J;KhH^?-pLINTcsa'>;.`j4'jJip`SIUXec\D*sQn^8H7;
%CIifjI#g75gT%4YFY$=dZkD+\oMG5?S-s,j<=?R?DZ9cRl"gb-/F,<KoIEA=',(kIV&J/0bSuT!bf\1s$32ID$WY%-Alro23G:4k
%#;KuqW;pEo/)c>Go!^sW0,.uR04F\Ycls8.#-hM7jcK=FBT'sU\6YC;&S"-[VaC_/*;7/Q8LX^**cFI+CIk<CoD?[`!+ZjP9Cr.G
%1k3NZ$@`/oJf]Lkm^eE-)?4ch&iQW;"fGa?P!t(\FSHa,'IcH'?(#bk5#8?9Pi7*DQO*!$oV,Zd)Y_g`EF9LDKf-18;AY%:#(KY`
%&\X=>[maJ'JqhGB[SVVF3[$;A,;,LT-gRq)H/WE"]MrZ0*;XL@!oF3FNI*f+^URde+7M>?M;@R0@h@m-)KTi)knD[rVP"K/X9RUE
%b[[+5QuO"G-g<O$C-a*eNJ=^P_N-ms)\-csnnn$7:)GcIBsd,W7'BGQHK0XlU5P;.>OMMhbd*[A*AKYiNER3$7>p5Y%`HLMKhcQ"
%85SDnZ`!P@F<V;aPHi\;0B!s:?%\/dj!F`655k0m%TQ;L(?2W24`'2W<ED'H7h>P`W:()ndo#QkOg>]#g$-'87a&'!caeS4(KeCF
%c?/V2J]rAG'miNCHnh.jJDNOJ"XV$*5)KOLbkBT$k_;,])-LUc=</kcA"?K,2bfY8S`bhOEXoC(=@!%?2&aVl>p.2TqNd?Lrh94l
%E_i39Pm>6b>g'nZ6:#K9f&XC22_NT(QTAmbD5n(!3qY!lI+hnDrgelLhm>;XlEO"GcV812j/e[/:7@Tc267_&<Xt0"(XmO^&!$hQ
%GuC4(=f;u/esn!fg%_#2e'Qp96*;P6$52QQCAK?XJ-5ud!knic)VL=-hoSG6F9V*?Y923@!hmXA:_`S=4Q6Lj;%nm*.R<lod&#q-
%c4)XK9n,l=PM?Nd?\?K=rNWP4Fm=<X;!<PBecgS^1Q>YDo1fW)+\8n4es<8d+PR0PRJ]Z4>JXl)UV1GB$X';Pdq)Ho(*AN3>sL_h
%MF`_BG?10c1`mPSHF%5Ao8".D;VjJXHWan6*0PKiR,%Wpi0HoBSUi=,U=sXHP$S2Q,=goM749>(=5M?-\Zd#r:G4fq7BaH&^u8g>
%fa\/5;"?;nesc?('V[UbNKT6f.n)UEa'Aj8UW,:r>M=fcJ<Uti#))\a-U^V)51i7'$cLZL<sI%`SfZ=klQrZm(Cm5$Ya(e];q/,1
%5^_^XmUb>!X%E;J/=,P98'\1`Sl=F)P=e8Zb4frB"FlB?*:LIN._jo<kb25<h.^ktY]CpE&VbY0Yh++OKuA<IO(:aH?V"(BD:rq^
%iOk:+"6eVd3%'Bi39dGQb61kI`7U5j'j.iNI8'mqKq>_W^+P&W]Nf'&NrkUaOrYEG8$S?Z!C#K[KE>E"7gZSuTaA,'[7rH=dq9"g
%I"i5DdI9s0N0S.'m#APgHRX7(`qNhL^mm'Uq^e*2KesDR/;:$'"kSg4JE[/5REZq=X+-:mPZsr1:DngS"[I1<1bR*p+\AAAC#d#3
%dg?(;P#riIL;P4"8tmbG%3cW"^6^pimY*!O=a=u]TW<n;6^1&*m*A82F`2sMdN<O*9=<$b&j9r5NsdmEeX#KIbD`T5^5^uRgo&q-
%n[Kl_-dk?#H^UfnU7:aNj&RZ`HN(kp^&)gjY5NsjqcU!6#J^-^gg-<^PRq.(1sI#cf^Id7Ju?[#,Mn\s!f*Ddare-Sp"L%hA88K!
%<%@'_I*2Zn3NU.sS?>J.0-jd$-qFJ4gIk'O#sh\,%7SjCJ8g%._N$2B(psL/ZE5jYmr74T]5#4pH3!_m.BGSq@AqiJ?=l]nOS_^X
%IeN"AH"'7'I[MG7<sOAJkWU]n1GMFiG]`JVOa-m@&'@&<>'q8%,+^+B;0.pfPh$7?WYX^W-FBrR2BIh&dm4H_f-p2c]A$2ub"e(G
%]-qNNpN@?XTQK`N*@RWodtPuR?W_4k#CUOOp]*l>FlD"nZ:$7)Pj,_m*^Z.moY!D7TZ_&Q:;ro4)VnF.'l;K<.+rgI?`/PE'?&B3
%XJBe=BgN.qBA,cF="A:R=W#u.LKm'X6&tC1DLXB)n#m:TPg>rX$#fjMKR#4dN"%spfS$?q-kTM>B/tV<SDiW!FjTa2PqfP*p"[^q
%4`5RR)-luJ*BD/JTO@HYDttTn#P+h=*q[,K+5aGC.d6++L8&&Rg"V#7QRLo\[&_%/$f.-O(ISjE"P8JfZh#sjaQLZ"\*ml_<kc"2
%->"k^%\9arEX9!7Dc.=3p:&e<$4@Z(]aLMX%bGTLPWL:+^@N52$m:@pFF+)dF0+ut+@T5b-AY\3K]B=)5NnhX&beB%<MfGW1&qOe
%g+]&*m#?a:?*2rUVAn:PHKa?<Ms,lYEHHZJWl\G2Gl8W@R7l@J!gOqs/?O.=R6+ZH3!ZD3:I*VlqA;<D0T;jg>lWVm;O=KEk1b_H
%_9FEH!ecQa[(iG'`C8]CA`k'lCt@cXMe.IKT#Rl+`UY8_ir]on'I!P<RD&t?,1UiQ'q_-tRu3(Jpr!UC<B=_(Hsf]eeYoa0F8W@,
%mTVU@5cH'.26^\^L_GkNIrfb?;D$/7`dha/!#\t+;V.45cLt2GGP]k#2^'b%<N514Q_c(8\jt.moPL5<*n-.OL1'W52^3AX)23!b
%IXc._J,9oNlFXr2$FNP4&%Z$^!7SA.V`B:okl95uDT>%pA:VueB?!Ie,"#ii1t%%J`!JH5g=DDE0)n)@.t5t',*W(6Sk'C&r%b=?
%SKmh"c$1BWHq"VCf3eM)3p]kdK,!uqeGaP0K)-U`S0?\3:b^2/!J(4WGrHkF/gq"M26LDJ,Ug,n=V45*l`e[u.*kIBJul3h'anG?
%<>@%nFY+k@+pbtFjW\!0%\&.lHl;6_B&_HI'9;6l:l@ES.\jLP@@qeFP]$k+PSAeH%O*6^NKTGKB6HZfQ=UOMm]ln!@P3ur5=Sp=
%7amq<<Qq1JXaJToB&l^+7r;@#rN<Ka(mLX08B6199S*e4%kXh6,dD)R+]TU8R>!@eS-4<ig7mS6%!^!El%$D-#VBIbiq,idqBHp"
%ht"#S.dbkHcd:),b3ulV/E_m1L9ljR^9l2OJ9(`$T).Jjm.&$0Su,IDpsc1dL)4_*8MP?0Me#!P].fom8QuBtfM3rbF@Ir/L9(F]
%9WC^Ts#MU0.gaT:$89ZqK+t6cN#=RI'uohLjYGeDG)9Gqao:]GQEi/S%b>lLga.jPg79*Zf_emd90[=!ZJW<EDhtKuq?(XPhAUT$
%mT"VK2HgBamJ9#Ap&-Bk'?r[HNn5Sj+0Stmj"S8i=6n'"Jn)@JO!;m=?L,=TgeDlT??ahuK<N>OL>dIIMt-?ChCcGumX!ZhpAUlX
%HIr+W[0$%*MT[bG:rMPf,#V$q5\^jQL8-)V(/)Z-+N1^lc&_"e=Mq;bKNoOR<iL8L0e^cZPe\uQEcU[nG0!SuYj4-$3^0rd6Mg;W
%*=.XG%MHGa2];<tX=1dVM#+?!esdtneI/#nrduGSn<rMO->NZ5T[r@9R(t67\8Se?)sc&hX,0TOfkmEnYQS5o(+#gp@8E5:I`E?D
%0Dk[di;=I>j;e`PIMnDT[C;bSAa9+d9"2km:'-m4%/OO9D>?kQ9&?@hctdWr+$r#2e+pH^Q<\`'kV@1fL6Ssj&iiC]gGi<\YfeMS
%)m_83Da,KC3<r<@MBF1\G*Cl&/CtHp?/jG2#qppfY@&c"MMT2!co<S&:t@=]>@t6j:\T;3U6E?Z;XiQ-")$6q,!tiWiD@j]dOcL"
%kiCmH#N['gPKR'*4V"hpVC4+YeY*\a@o32VQkut7eHH/k&F%YqnR!Kq$T7LoKdds_`X3$jHL46C-`:`;^ktN=qO4EPCAQJD^:>(Q
%FV@2jH#H4]4:R_IKp>B[Cr0uD^A/DH]e.$@f7d<#h&c=%TDp+PrEDQ;Ksc5q964,/R`HIT<G]4@RKa(_?2bEu=,H'H+YtDph-u99
%@offD6;9&3r,nHXY@$jCNkf-:r6%nU?o&A["uH6eTKPptcE9ei6=grhgmPq'd'sqO<8p#s&F/arT[&1#[AYod@F+J<=^CJM$I]+L
%=n?TL\,j=:O-6f_].1h:dg+9r>lkV=,SDfRQoD2MLAmA`"RDWEM=;-D`-T?9&YK.:$du*81<Rs-W<3o-&m;.KE1W,Rc5niu=\05M
%H*&07l:%&R\$HOc1qDs$Vq_H&k=6'6dgIVH.TApEWbO15<Ag-1@K!!+>u;Ni#k/G*$WK0tW)=pKRl)dJk?%SLrB*P?Ms:>*T:^gI
%.#$!"eE<V%eU3oUXBCOd8^^fkV+QKg-F#?KfC`l_q0_X/$-+M6a!Z'?+Fpprph4B4je6J2fhu17*kV(m>4=(`OAm-_#CX>@eiXP\
%`PVkp/:821h45W?J./JSG"%Ircrt!ti63%&[^rRu5sNPY8A$PnB18pFD01VCV(a0Q1pg"B4fa(qVWh*nBW(&25,kk)ZQpYVH=#4?
%;u'HFg2hRhGb_fV1c#b<c*cH:NpV$P,2^``0P9?C%T%M<B0M,*/8>6T(Q]($bb$AnJbe%$LCRUBBQf22N.JOO@)RgK?(r_g:g/Ct
%=X"F64cG*QnmBjE8edN#>mRGGIEEDT;s=5(f,I%`aN6\dQ9*=*0HO:!UBddm>Tm8TY;;BRKeemkcl``Re@;3(#B/fr5R9+=,C4hS
%hRf<X$!%10^]F#Uhi,H$7=14!kbnm+EYdcrUqDP1EuH7PX^uu2#.%HIWZDSZWh5A^Ec]</c&MH^#=+Nqm1Y;7U!.X-5';t[@mg&S
%>9qfB4Hnjn?lXb'mNt=?fUTs&'`;USl+.&A`JW#Sfi5s"$7AY_XnMm?61@b0Gm1Ts8I#5.6X[d0q[/#d598+/^MC7d\m^.(a>hVQ
%-U>j:blEr$f*<KoKCKI#F<,gA()0p#gW2diJtD?miaB"^&g#n>+aE<'n53Z1'5VsG]J"0XWuh2=R[;2X(B6*H'[Z<HK/dYmn9G6?
%D%pR^MX:gGUYd2I>FLEc.O)!sTcB8O4@IIci/!HR$dZ99\G6YSb004'9:`ad,2=IXTFWKnYJ9:Z>me@2H-!ac7pW6n_L_]?)Z$PL
%*`=+r#!4unD'!rg<RT''oegIP]'N<q,_r<0Ih#5X#%6<VDnbDleudh>n\)K\To`NA<AIQ:J/8h05h7fX"M'q@Kg^/uB4@=`U'MMt
%<)Hnmpb67;Dh69N?rj'DJJ/$Aii#XlJl$H?&Q,!?243FY`\9).$uWJBqITO;+`TJ]V"'%k7p/O=Fg*A=;h`3L]1#:P3`J1[4jbIE
%E$lA].RU=!F2f.MoEEe(#*j,XWiWui0CSWMRf+2=qSgC+6ENBKSXD+fZ9Vc@d^.7!2H=T6)CZA9N,YL?R&E#@SSLbCi,2#%)H_4f
%'aQQ*=ErK<Nm4fMe7F$-9^9Z``A+"l1F*eb0>m9=Z:6:kl,t=_&O;Id,Nj6T)4'*<ggZtSM4:i52=#&u4ATVOHXSk8q:<4RRVr)[
%Hc<H(%NsrX#0Cm#$:qer),&*@0k:Q4SF)LajU=FCd-Hl2@a!6o%,m9i,qU$>)QE)!@ZiL&B\/,UDDp5pBir&#:>i(elGq[Y)*SUS
%Y2Uq.AVq>8Ie'4=c!&./2NG$cm-44Tn3h9;WdG2Mqe-\?dG/819uT"Einaubqf2i\*kLZ+^V7>N$/9i$fpq8WB?='!-qU?g?1!qF
%AGt:58X7Qcbt6ku&MR6mQo@+"J<S2o5ZIhKXnNZQ0r5F:+BoRhOM'Dih)r<2_OCO^GS2D*/=ER_/M7BNH:XGs`'Il?#XiH6%\\jQ
%*.pRS.%OX:\OQcG9MIaXfRK-MoXa;k@(hA'd"uabeVaocpCRM<ass!W`.N`C;G4]e6H&^/'EM/8afuWJ-JM)-J'tHe9Ql]C\Z3nB
%.HWI`9N0m:744'tBd$Bg%RjCN2>kC$.?E_`PF\p/%R:WL#Z^"&]%=d9UD6BhF45=5,dtBWan<jZLFM!B^cX6^O]aearoikm":Ro4
%e0d'Q+1pc+J%i[Of7\S2/!?pW6(!sc>S9B@=[R68*RH@C$Su'NmZ<II"b[qN$hL-hIB(ns68mnj-$YtN=#c8d^)IP)Qjra'<H9We
%$>^e)l<U/J7JKU)nnYef53^WuZA5QWMT&(Ym<Ack=dNPXRN-Bf'$q!j@m(#TX`Aj5W&97>ZaMUW]BWsg^AjQ$1o7m0MK8UIdT5\)
%PbP8>Ad\3!/^4rI?<!teMAqXTDBC_b4bpYgkm348[bB-ghL/<^ksC.Dm%#Z+W"MOIficVnbuM",r3dD\U-+)]gqL!9p^GPFe"V`F
%n9]3u^6_EY&6V$VKgT.mU"`DnG?o4WaN[MNdZ@R*/j.X6Lm$;u2`6qW*H01W*H=om)\#Y>ZMa0<rc*bNIhmP:Q!,5<Ui8U^9+!_n
%4"7iqU^sD_S/+h:f"n#8qjD*+R.hKW64jFK4n"X^d8!o(#_-qn8bS#XrS+fuEPaKinW$l<i@Uo3LZ-$ip64o=SW6kR`Ko@a7^AiL
%6i#H)6W@ncJW3hr:MK@)9t!c@ZIH$RK"_=aJPYR/EGMV>l&M-h>=N6e?.+_t#18%)`4`8^5LI)G=65,4DLXN-5N9=Mli1nl>C&-:
%P3_fCoH/B8RfR,?hiFU>OoPLdfF*$\.t_LI@frfp_3$/8h`K./np;+`g"jX0&D"!G.Pni`qhuJ6iZ.tb't$/aRCh`D+X8P%E`BD2
%D1S3i>N^_anVm4R<HX<Z;X?6"kj8Ck+?j[\Im$//Z*3T\G$"+.!.i91Kk"TPjuQJd,uZ>rdniOQ;)SfGUjDML#q/rDo'.qDV\^FW
%*VVMi14E`"k+S`a>llrW;`O?P[N=%?$P(u=IP%5AF=\2/eML5Kj0(TU;Vb%S'i-k:%NS$Nht>:L4354#1>md"&>T%i^AfDS2c"qU
%@Nh]*ZFj@cO$4nbWd&Z!UC*Y?\9G5T<aRor*W=KOLJ$i<"d*UA0msi4ARB_PO,1ar%91mtU$t6_g-A;6EHj`2Oq6nQ;:[6J7Yh>W
%(l<h<c9^Jh"9bQZLG6enjPt+%H<t9g(NS),:F"[3/5^c>&R=GX/SY$re?TRE7&4F`@Y9DWkr`TR?h(1\DiC4%e2J'aO1BO6TS^&O
%UR[h:Z$:.hO4CLNVfY6?Hma(QqP(;mQu;9Rk,EV8V#Z`!l/!W-W8;_i4&"*cGPafQ1U]".s"Li9k=q^9oZd[hc;jZ.F!V^F07W-&
%6B^;m>h&?]jJ&5fn![nWX^%GGQ7M+^\,ka=.&RpD[&K$=bn<gr(AXhMq*IXr:nXT;FSC2*6qi#:Spc&,=!!AVqCCC]'3$bFQCtG4
%SUNcB;N[sH=V]BeNA]NYC=KA&f+(.bNs<qJO'7s@glk4d--UmK1-V_X.cuJ1n<RW"0%NPa(:sA[hH9T&<&BQDYJZ5B8)`[5RY[6D
%jFd`)9XuXgRYSP4]C5]#C#)Nk8BUMsOF`:H>+Uc_[2OET"N,4#Z766@;[$A9hEaFsYV?#WA6LC\oSU%Zg'$^GZO2*^jGIWF1Be/S
%Xml5hp[<NHf??5qI>(c.*d13[a2BhM$OaJWGjMQ,;2u?R%WFuW9g8HUgYagqj]B1hK/$*?#1NG'_#.[qn%0Np1Q^.7nI@dI,<hqt
%mI4=MBA>hD!5b8-]]+)j8rF]rHsj0rO>&B`[M;k->W.;K5^R0d;DWBlU7BtN@d;T#51Lk]d8;AaRJ#7n<+l2^,*is6Q4mk[+_WJg
%J<KJd6Z`"4+6b:(HD\Fl`'<(Z)&OR]^:U^lMh<=@MAaF9211$7'i=72]3EjD<Wg>5YbRA&<s2Y-k0+<$!/fN]p*mosQVW$b[HH])
%a2S?=+C,'$LAGV+<jigS<Vti:k+$FM5.XK,UUn&^,aj,N_q0@.^3\7^&@8'R7gCO9jBc@3#M<aeA"3VaQJ:Ui.@fdpHV>$4BdA,b
%cge:me,kn9paAb2_GkkU/eF,Nm#SfA76eQf%F[b)XXI^cI;dE57XmuH!PBl&IDS;W$N4d\aLWq^/5Qj7pZ5FblX2$*('Dc3DSnDp
%-C._ulG2B2Z':>oaqL.&$CJ,/d:eB=YINKkMhFK4PRg5.1Cm28['u$Df/m=CmSARW/R\hPa40,PT%ht#<mD&+K0U@\ecb]n-+>uV
%La.*][oNS"j1=2\JXV^;cP`Fe&>J=0:l?.eQJ<L]9L%qB=m6n^XCjF2X?F`gDA=pna!%@]6,p3&Ua<]-kLRo\bjPHe#1IPtO^9G0
%KqUl$3WnSZJAAk9\qdb"#*X=_8^j8a@VGg8<EjKD>m--tooXC^\h%L]D"ks[qPp@n*NaSpSU\2XK"pZVG5PK9F.GYKFX6;^mqU5*
%@$>^c3O18Ga?%TW`p06H?m:_L+P_^@]7WMm:cS74LUD]R.E+<DG+,^J`/gZ6=KXX`)_&&oX%+RC>N^/BLqYd";YD%*f-%nT>GBK;
%+OL:V`rf(hjFE:W7A#-X)q-2>k)lFJ[EEhEM9$J[='G5($1bA#U&N#J2$(p:!$/]IL.HVp%>nJLQC#+j=@N:u)\fSn2$G<>#MF-1
%\s+UJXCj*e^/nF\Zf9rl<nF/[kbE<*0Q@s_kMokd=!&uQpl$=eK4I;DG2ak0T8oW"+McGMDLbXu/Fji!bHD&B[%::9`N`WuLhVJr
%O.m4])#;Rn@`]ldL37!>4]KZ7,ri_,E%DO']ZZ@Srjbka@)S2JId*ObW_Z)d[fN=FSAC?"2<Jk/LB/JJ/\.lFC5A*ZSd<EVmNOL'
%m=Qr25fkQb.,*<ECLK_gTJ$rTGiC!.J?9iieL':fW@'%frcfVT0dH`g.B_^U)ta2Ce(^tR)=PJ]2Aes)N2u9/K<'=9LR.]XKttri
%o4X3)eSl]=aOA;:??".OQ=s[O5]u!=_6Fdc@\Kh6=mCcO0l3_IOu2IN]]AYA#!_U$>e"S!8fVKT_I:kgj?cIr3ZU`1@u4,aJ<e$5
%iH9NM$2d"E4CI^j!$N\R-cTto.Ku54cJlDLR*j<B^%E3WLf-4Bgp?]%[,N'F@>,C3hRGQ019'^6b/\tX2$QhpQFXJHNB]LtUHQUY
%%,G@Z0A]ulp(hQt_qU&-Q#U[jhG7T>nJ8CC3hH@_MbZTtirW3&3=:!&(02E0<Zs9&`ugUXbHXrS"fA0up"7Ri1034.d%d-9a/!nf
%U`I5!Y]0-InAr7(H#IGaS]UcWnufq2H9:\0`(W#Mpbi=41$V9P[,ksP0YM;)KE[n.D+R)$J'Wce1se\26Ha#sFhuDN2Z<RAedH69
%5r#?DR9)<6k?hrP7Ot69C50o2khss%3@'nMlJ?AX-cQ8U=LB1O98M26LE=;%?Q%)Io\\VCZ/>Jk1S#8D90*6[1tSA6:@TNOM<;*3
%W-'DPq7p05HA$qOU@9.#B:QNL5HYiZTUb"8!GGsLUr`#U<Xm[d+uraF)sLMP?l94I5NtK:isSK\G5P+i.ABR.WB@rlVU$>M&K]\"
%rM&EBD;_+[^M#eloe4(C;ibpVP4B5]U`9+L.o2,oF&%?XDVPY6>$LdlQk+:]\P.^6&Onf'/X?OZf5\S,nX3[!A4g2no6`+`o@^YM
%ld5t-,BX0l\JnL2\TD9FOKX8R'Ej=J)9GO+lIaIF"foXtD[>Q9)47FR^ekdg.Emm<P"d6\`#I:<LN?si/:N'@*WO]'a;ZaBE62_#
%(HYm*#ZoA],(tpdpPGL8Fp\ta*cl,=6?0VH)Sd9,#9iKRG(a7R2=bu)8r+[gd1qDpH8V$&#06VeGNt',']<=_C/5=)(^>?(<(gk3
%#M9s"Z8ILjjbReK:!&npi"H\CJh(aF!O,_$;h1@5&mIUY^ilVs5kB+#^?:Qg/np;>J9\,D"5h^oC8i[nh"nWag@Z\2!Io0Cl;QmA
%?#..;Ga1b64;V+l0KSp[Y#\p>WHUO'OVcI.k/qa\Be.J;6d7igRB<3n/_W?E5?D&JF`(3]:]*J/ngF-,rs4J>bAe`L]h\RH*iaD$
%6+cropM^33c@^)JJDbBVAUF4;O,8f8kFhB7bar1VoR]8_UR>_BIZ]o;Y)=$l<,5I0@pe@T(_OEQAr5XFN^=_e91EM"SWeEo$tT#R
%9Z7tP:hSLr(LCQ9J;t;%(AjN"!B%";?ia?/#X'LOp3V(HPZsl%f&]bpip]N5-;;O#[!@i!dTX4XnI2nti7\>/iPCZmne(A,O64Z+
%^tn'G@iM)D]88Am+SLJq*))*T<3]m.em;Q_bE,*$7_NU2]Dd(k&/75<Z0nm`'$KHrr=X[b_?s4Ee(Lo5*&1.2>L5bJo(S_:],<lA
%J8_.Gr3X`UML/uY4-:lL8Q0W0Zjq@:j=6cBU=hW$;1PIYeC5R6S^gH`8AS-=!<.?$]2J<N8'Z4Fni91%GNZXc!XZoOf#s01fA%2L
%SRn.)SlMdr?SVa`]Pad^7Xb/_>A"sD'r/X(XXYn1.nuHc*()4p0=NXCV9]T;7h0,6kauGRIC_+f]Laff#cELW".#6YdR/c3pUZR`
%A#6<C\,k(&e[`>lNW`=%39>:-0gkC2/XS='#i)5r_%K@@j[,@Y\<O#"=iZcOr&SO&niKGa0b/A`*#J9$@%-dhY8cf9<Bo,U^]2O'
%S(4K0H<blC:Fuc5L63))Zj`YRJ5F-_GBX*<2$&!1V/"9rmE&tUP1Z$kma=.iBk1R.@O7c!;*RO4q)#F,FR]FMeD,EOGnqLW6)D1U
%gpi/(bN^jSK$uj.`+u.aQE4TehD=Rn;Z(F]#\.#"IYXoPTLbd34\^"M7+em8Xf8j1W.FpL-FSWB(J-6mERZmd35=&a+'Y#b);."A
%&5*tF46*$`1cFp:Io(N*jp7Og377.ljpfio.lTYhkO,,iKfJ9VGn-LQ8URI]WOAP\N.bVeq\7Rq=D4)_BO5@E;VBAHn"O=<n,MPU
%QCra&9G[aS6%Y1332^9EkYa:K=;g;hc)-=r$;J(be98)9J-[N,j00:%qdF6>OT6g[:PRn78mm6`nDoCH,EN84I0pYi]W3V1BlSf?
%bj9Z_[UshS9np^!k)Is>r$pCSHPbl^Y715.R&[/S;Ee6-n9uu\"(q\\^X'@^pu2HiLF0;EhDEbgS%e^lJZ2Mr"I1_C0/>-pj4FVF
%Og_Q/r-!@%G*bY`_]^C&JS:B_=dt`:`9R-:'7Cn=T:7O%H.CX:h)RlK"=ofeF_+m3(K*Xi>tJrGb_bJf8LiNUgC32qGna\ur)qUN
%r>]RDW*k;#F,V[E6[?YN`@=kR/)KSuWQ"A-POHaF%ZJe=[uL7Hh$+0n(#E2.'uApCKGQm\`u<KY4]-nUU5QSZ'RcK`.9V=;m]k2`
%m_9udmfnAcX[R/&&1Q\g;tUX,X_i^k'\P[!i^aS3Y3l^2Km:Zh0E&eXV]WN!!U.GMp$sRHi;hSF36q_5GqbTQaqPd,P>]pGE\'`C
%ZD;5oM)2$#<m1-oA8RSm.W,m<2[#q'iiA(s<E0^c=B^rlZ`\m,m;3\,>$lTG$W7E@:qlXp2Q"T4f[,!YSg_FW*VLCbMIIf4-$RWQ
%+0Uk!4;p(X>L5.'.oJpC7T7]&`>1[Y4O2db>%Y`G2lnsVC`OuHon$u8GK=X9^&:PN*c_H7neQ,37Mj.u$BtE7QiQBK8RNGDbg[@6
%p5#C#>iJasVW*YB$mNT"FOsL"jcb-pdQ1';igfd[04E+=HrOA))B2`k#*#M6]c?WG!u!2%BQAC8od`')Wm=nSCeoiXC@*&rXQHfa
%G8rV+Id+;qVe\B:LCtkLl&;S!!u48?]#nS5;;?minjh0\=6h\Cr51S@g>iA@EOAQpGJ/%OHTu"f\G%Y(r-5F**(ho1eSb7.a4Kj9
%Y[W9DZL1gP4-i'6<6'j.(0hB*3<gcM80>/tP[S#2&f$rcL#fp.Y5mL/32#50UnfB$XK9U!ct<uU%gNf/L@[qQnDP<<!:%6)Dm8r_
%T@=1GL9jWTT]KOR7_OG[4Yd9VBNO>T'>#1UQ;^ps0+H\pWkh=30X)`OSN'rS4hG=j8\lZM5[_M(A_Ta=3Up)_GO])BW_9Z_p<NuU
%q2I*B&?Dg.W]]40]JtmLiXB1EUr.qrH5mS:[+fiH2-hZ,6.B-F;'t$ejT-7^g$VC&+'"*c0q1hg=`W_9lL`(`9'=$D:`h^Kf?=MD
%&;;XCjb"Nt1^\AeKAmoc@C`J/APY);II,!.',tLgDZfr%es0_gHcH/HkY7eSb!Ho0A)Y^(FHfZb6)4\2;'c3$oS(SlP9D#5aNbE$
%VjcT^7'[Y`@#"QYds#0O%AP&Vmi7n+Ef83]N,P@1H5i.,eaoFh?&hhL0mrFZ[,?Vq:B_;i/Nl.qZ2Y$f;I9@N/8&T9>nij;j`^;4
%jJPad4FHPJl)a48ou12pVbT;F#[%<.,&9&ELTOYq<g0/3Cn?%E5X'+CNV]HcB0=OiHrp+9%k9*R3rF%6U5;-Rhn)kWQ'_JF5<a:h
%d6%2[a+>:R!tcn`(N'o55V\ja&X@bc?Wn::GSXhV>pi[NStSP(nDKqBgLI[/NR*D-\$KH`"4XSrrW]-_<Ynb`L-%'>S@jg/i[,QT
%Tp;-@USJntYqD&!g\mgu5%4-_o&5/(?b$lnfKmDH+bg'@S)i$dIHg8>MCTE1$,ID1k):o6U\M\,1cS!+(&/$Mra_4f</<!D]`?+^
%pO#>=<9'o:&i<h@G#cLo%'HiqC,fMRX:=)p/PYKq*L3Q,\lQ"^mVd&:,EA8;!5chTMi>]Bg97Rd*m:h5ieNeu/9?]El/:AYUO8`D
%^p@ITdt&teGR#o_B0^3G,EJ.)9mDD*0N]`VTep+G>n)"6=X3GqCLen?*J\/LBT.3SK2f'g*J)4X'ffne$g0C,8rc#E;Dpr><k&Y!
%c*5^JHu!rV0m=sBo#&&Fo@A=LK!YpKo8*6MPeuPgWK.>CU7(5s_\HjOe:h-*[Wan>!r4:S\RQu"':;15Tal5Q=b&cle/LG\efV/#
%hdQlMq0ra+&D)OWGO'ec2$#d0&2\^p*I^,4BLQp4Nd;RGcrD)4*<'m<J#BKR#,u`r,TF$c]RYdt#%cM4GG"c]M"%TSr;],2K&p<V
%Xmf6hqdJ#79cu);`'8r4!D"(0iSJW@P?;0ea:JL',TKXCfV/[o"u;UmQp<)OZ*],84+L3r5LQhLrOWq#=P+uU703+G'oJt["c42.
%1]T@5]12FJa\/oc&2"cBK=c"prGlgU57GskfNO,$lHP\J-k0^=],GWVqHasD&>.\C.?N/8+,=97;c0B:6^>#B""2*u(OSbXXcF;C
%;3PWiK6Zd$9[UU6eINPP)bW9<lA+-sKR(#VBtC9m33AP+E^&oVEV705LUTaOA*%N+/kIJ*2aSMsLi2><g9[dp<frt#$e,pNC=8(H
%Qp`7?4AYF-nQZ_F?BbS_!`!M^_$3rJHl"*j,P@,YiZBoh^dH4iSsUh9NN%hGHs%WZI12Tj7c:i\T7J!!h?HFO#m;iE@I89BI-ap)
%W$Bd'4+!_gk(g!"r7p-e@?qVL"k`J6UK:KHQiC:kIeF,aSa:`ndQD)&3=<'''a`h?h'cotC!Z&471?\tf".A#S#7_2hO_S@7R3r^
%6(srO-ac,6aDHW5[\0juE._4@L1.F?ogFmQ/8k\Aj!$/)k.M:8j39s"aNk=;:E<YZY%J>>VN(g\ZH3)/WU7!F?@-]E&Yomr0aGlk
%#L<n>PWLPrd:(YOT,G]Ro0`Vn=GhY3B@a*0gC%:\7AduV6#C"bF\@=%%T1G.$IfPWa0pt/g_AB(=4]/;_d)Dk/8f4Ch]%lp)PV]Y
%AgUG!9Ik+'Ul>sF@S'J(2HN9A\FID)q)>Bn9t1lK[S`P5lR0u*5JGj[+"U36)b<,HH*p'$L^:fLK]HB%:7qX@XT0kbT.CCj"6a!Y
%9G?ag&*girLIGKi*@_-48ID1+<1AQj,EYOjH>'mm*8tP[9kXHO#5r"h?S>.>21407!X!N<rZ?\'+8atL+>rd[(s]b>3boX##cn*r
%7US,XLo.Eo\ccPrk9"pV1IAqb,hj"PKpkpP[%cnNeBY`:<H6eOrR7Z%rNG"t?\6#KTrNn;8tK5'W(Ce?aTSIi\29bP:)I3U_:7CY
%<-p7*/q+YL>9g\MeoaB3-<1qnY(Pk*_D%KE==;b2\P/P!e(35<0B]E`A2HjjHJkVfU:)`a%iP(Nq\H^8=IFtcVUXC3`Z?mW]@kT*
%5S-tc`LpolL2WX1eNrjT.kp6nDeVLP)sk@k;j)uXfLUZ.HbI5(bJfiG44SZ6[d$AUf>#rTq5d`_(`X:SlV;*FUg'YH<W_VWNXJKW
%fS!?MRdt?/fL-$<$'fCF9\Fhr'q<Y3VL@b?S`D0c<AdG*&EA*fD2V-+:,g>=&B$o]1<iPBC,0Yl"g`;D*q<!7m%AKR0TW(F15I4i
%?*K<gKW/D\(jm`p9mg=$rEOR^(h#c[p5)=Yhfm=ff<0%Q[R@WZ#6d`.<8hCrc2Gf+O.5R61>!\9(NYAR.<kuFR1a(tUaYgQc@<]'
%^1%;,$"'OIcC>4]$UKso5<:#VKIP8=VHDt$&0.U)7$EQ7pZu*GE8"+Q\"lS!-R?<Ik-._o:0+J-alHhL>><'TXi)1Ij:"%d,tTou
%CPdTre%TUu]/G*7h#A!`O7(Id%?"-qX%R!S<g\VJ%llg5h_\J\\I'VEZcH>*+BLIC%%tS8;]kL#6`W(sN&$s?ARP5=oOUV\0o)@$
%+%IRZF6J.PdWDShirfH"]jMV:-L]d0(FDI;VJ0HL;Z]$[Ne$mMFpZ`b\jHC[on^8In<&Q":C]s.dj!DL9OgBo[*tEI7Q/M)/)h2.
%-F[0c"KE+#[r3S;.kTff]5%.s0)A!J\#="S3is4gM7_3PlXs="h4q/(b))/j?Ua7%3+.^Ypf.1(hM:N0MMe9@Rs1i.NJF>jca*>W
%LBl%*A9Z\CBsNZ<!(g:qUCR*s=Fl^!['np[#Eh,`$jBg9oa;aR4eG.UM9&W0bo!J$,upd8HhgZBp\0gYq8r'Kb5U8X330a&kR`C8
%/PX#QJ]6;eTR$8*`eZ6V\RcHHp^oI_6Ou>.*45P[91#r`+I9eHaeT`$hVR5Od)r6MEM96VW_pG'*/j/7kN@uugfnAHaKZG[X=Krn
%66Rd?mFjDla6k<'C.r+W[7%nh\0@0i=)i"O4jm%-&Eu,goeEpgHX!=a_1O#-_:)kd%.J^LSfk,h<09P(Z$,cm22K+KU]]mJ1os+S
%EZu%0iI)eqdR?]J$X%Dj;4RecAFF?rR^6eGC:S6W`u]R(!5it3$NkN"@IYHg6]84OQU3!ef(Q<q;HTf9"sLIOS7,toC=kD08"?T2
%M^sK(3FtB;[k[t=R0g$F&f_m?Z@-3!?=>mLQVGI-mQZ$*C4[qMpLol01Yh4o]UFrL*P]Fr!LiTMcdl@I3a2?I$PBAPj'AOV(b!@S
%#H7_kL[CtDDHlf$2tUTTGh=@8W@%F4i`?rZ5r?/r(o0LD7Rr4;7$tMQHp*ULL'XiSM2bgJZ%pn,):@XqooQV8Fu:FuWt!Pp;f7<]
%2u'm'-B2oSoWEDS]rP=hIC9kDZb:5X1=d-^4iYOVC4c=0q'CW4h'"0r<:-&'K1`hF6p"^i[,t*J#3t\;I@d5,(k?AJ]&[P_aIEDQ
%7T%2IN_@Vk.KpX[lgP1-U4[I1?51r"b"j*.k=@=jZ&jCso8S?2E&Y!,I]$g*9lg^YJ=jUJ$@<^Lr6F7i:4ED:iK/Q`C*S-pr9_Z<
%VI*5Me7.Ut/<o"BM+sHY8m&WN85=U:6k`c*gLM8dm/9>[TM32'V945:>;9,Fr"ZDmlj\@impeq<-_d=`D;rmmjpTA*GDaX7)4c5U
%qF>I`l18?KqjbUIS^X#9l5*7)0!%AYF`6#/Y[pViZ&2=roLgn"jOPK\_34nM@bYO`dga*rC0t@Y&Qf-1ICBsa+p`91H8PhSgCEE'
%C[!0#lnlXK077r_6a&XYf,k1%=BR=T%24%LB(R4a@ITX8=*#=o`5;a/om#"nBDmt@+6r,D9U3X#j<%@k:g),]DV73M5/,2feK937
%`p,;9rUMK#]9u69aKI]V4.A`Bqd;0jS!o,NP5Y'trE$tT;QjM`He1cP"*:O&Lu3=I$%*a7TZ#._pY*MqIU"(#Vs^,HY8@[EiWWol
%4:iWG5ZjI!'B7#BGbKG_7f].-bg^k'PMPHTl-4X&4X*)@.?Y0q9S..[nY=*S#P7_i^F^]^7YfP6cn13_Vfl9NePle]d*PBkf8gfG
%Sm!7M<M,Ltk%It+d8Rus6>(Pn=Gb`$Lg6hj4ghnK$GklaSf6'd^)]?OcrdhK3'4ap$ULdtC`Oep^huo-F*8;EUlXF0)[+F1XkfYS
%%^CnO"o*>Zr(ej'.tlL&Uppo1QM6W#`U`I4`u:fLM%q'Co9ZQFB!R/J`Au0d^c6fqkIo-H&eYg:S4kt;cMctN$BgJ0>IgRK^Xa8"
%j_pq3:;]U3f$i$r,5Kk2(PE`3("Yns2\g,[F+@gGA`1LhNeS$0=sl"QXZkc([QsKt1T#tc9[r:q:)6rIUcl;Ja%n)i6"fi$g$cQ9
%X+F^[f9oB_%05%oHe4Zq,cCj/WX4gEa]2Zeg'H3V1lX6n^7)!A=?1@=\(a>IA!@T<5@JFf^EK=pa0Lh=9u?ti<p?*+8UG7qWX@(9
%0Vs4f3(NDNYd>r^R-"MMd=Yu;Gl64Oi+rU3N++@ER$;1=$nRq1b")n5bA#,RqrH66RP*qS<+TEF9hCTPe&sT0BGAs/I@1jSnEtP_
%/kh]YG,D2p:/MApZAQnR+Q&$Qds#0%E=bHfFkO8YB7h/aP4SUO'9^>R!k(c#K$9FqF?-<5F9RdIR:_@]qcSp.FhX_qUX?=!3$Lo]
%#Hf4C`rPeY=g4#4gd[53I/rXOf?Jcr4[8+;quu_QJ>dHoP0]emjo:4PSQ<aLfT>0uDdB'$9#/#;E*'ts'#\dDAV_7IL=(k(;744_
%XK'Inf7(4GJOl!o(dO=\P'srqX\_AA(i:BY8B<QfA@02J+YaX;\/'iWi^G7uaH"@pBRk5=`!mG6*_XeAVDV)L6_l0cd9De/U6,WW
%Qg>G]/FpU/V^OMum:_\#&!TV\Pt::8f`Ooq5>ELo%0/;s'XeGcHjEB'irqaM3Cd`?70u3;Zmc]&FR!uYB8gM0h$)bhWC1A`Nf'GM
%KtdV>3-UqsJ:YGo:VX?$c+^oE8anjj$e!Oj6,fcQ9ZH'4mc2CoRO+>c)mYP\JXIE'W"#Sr2-o>fKJf[cA0fhO9^+AG@[Fo3]#-p`
%1[gk?[+WT6J8(PJp<)9`VoVdO9-W6'm.c]?K^R%Z6Le_]oaG(o].r8NSCu'@Ko"T=WT22,NJJ14d"d5CHsTO]X?KbWN<M6b#qP&_
%8&21)_*5sCl8fe9K;.p]g"""B8n1>(*XTFL1*V-LZQF%hHm:s$DRM.b<eg6X!J'aNC]m-=*1PV?NjG1SiFn1nH9AqcP]8hN`&LeX
%*ORDZZ8Qkh%GrlBhEUN?UVm.K7@a?:Q>beD0e,,rW2#M?Lc&hZ[9VA?:ZKOu5EU\q-)ffVA)NeS*ognh?$K,<o4bDP[BGCdc?Y4o
%ObM4(/,5%(@tf)H7Pm5+SR!4#5TUmQ>R!]`ZmS/l<E6T!\bu,n[6j@96\!?SAdFAs>,$Zi\M<2k185[IfFsY!^kH9"=-YF01hCE]
%KHt7FcUNZ5G7rG-K-k^#)im$R&AH!ArlWiAd"><-TmdS8hnMB:OaSnqR]o+$9gtpL\s;`ePYVbor`G8e6FVfu"hX)?JUI:>"nJ!c
%+J6//mZRpg@9$f08'=KTgYZ*=gt%I&Eer-5Mb8dEU@GHLB!?/X(8Bm`!O(b0D4T312(451a[LYn_u)?F_1-reEV\6_0E3,1AB1_p
%Ye=ONU#%%i+W^kWN6e\gN.*O4B17-gKbkL?qY]TcLAbhpq7"Q'AIrobq&;`m>%L50B?I!,H>@C3EkaPYon]B`'$r'E=9(3=>hof8
%'B6UG_Vcm^oL3na%&^,0&gr*>6D;(I!$U%VgikpD,lE,O7m$#_Z-+.PMXaS2nY7<bEP)K"OH^*l::mj0?=Mc[9X1Wp(kc9'gH&0m
%K">)J\`1PK4:J.)(<hgGGsIt:F!to,63#t\mIh._f:rM1pO.tejU5M;)tN)V]UV5nog7]-Up0rK#>3F:4f_0QJbkV2omNtYd[ZuG
%qE]K(EI;)up4TOKi"6QL+E9.r^p1_B.H5Yi4-_4@gjKT/93oEf^b6pZ[8#1W&O^qomDV;GrdKbPIoD1%j%$f0Qs9,O*F3p6"-eu!
%T_HKKfq<[>]2O8cCQe;.aKG_4L\PC7q3l!Z+C!X5r3<jlJ,5Bfs-9)Jo1(e]bU-5%,WA+uLLk9S&NOe%d%]urb\9+\>kgT[As'Ss
%+[b>&9[Al3*ua9<]?SFUM;A[CXA'9[8ct"`U-lec"4mUuWG4.S15'!.dA6qe4ToCkdg@AYIX^5+;3SrtVujalCRU(]a8TSS+iGrj
%&]T:`kMk`<#=Pug5/pD$RC,8lWcVnV=r'M)6VA7_rF.BLm1413YI*?q&bWos_"aEkf9DU;l,=FU4b1UbQ7F1p5jL1fAcjaPYfn-k
%R16PPfZL[#pZ.=YW^d,a\9'rS*Wf.RQ&I(60):g#PY=7V-,kZ/0N3d<YmhqGeUm7F3$Nsn6fo+g-r9adU3f<CU;ZT9@K",hJjnI2
%*8h_:!o/nN`:6tq)#P"P@dA\.L`7HTkFi@B)F6bJGkG9kf&_Uo/.#kAJ3dgCJ4q8>?m36iEmUFjiEsuC.DCTIL!*@KC!*$J^H9UM
%:;R^P/#\>X"drK$B,WAC#T6kIP;cusE>`6Dn5rRI,;9e2mlAB[;5<+:]F-AC/X1WKIgto,9(#8chEUPBXWrGd#-6@^N&_&?0,Q%'
%pE':1H#DC+XZItq@&TQu[(#<Hp%\9QjiRp/ZX-]K\LgNfWlrPU]pD6Nk;6Bj8U%Gn,`tfQ%i"iUN.jubeM&SklsVct)1JB%4^LUn
%o1*EE]e$H#;f"+,X//ZZ0T*D,e&h>F9@L$9jGBG<`iY$6)jI,ZGYrlW?ZI]#G*+6FRsjbh8tK[Mm^36Hnc$nbS)9SE$(0/oT!aS7
%e8f7=/l7t!o6]7Mr*9iHq&mIj0I#XX_12AlX#ZA[V,sVoOs[OM"$e%VC8tEV.&\T_6Q+ckcG2i*0$U=poJg[U1$t4U@W3cm;tN+n
%3^Hun*-hJU30]o/0Yu0"n"Oi+I$T^n:L7^pW&1kho3Tm#%S=d]#a0dK1*J8?`]Qrq*PsXZoAbk-lPt=o8<q-'<;F]tf^#eSn]P)p
%q>W'VHD3KF2C]<TR1(^YhDP7;+8lgf!SM3]L"UgS"VT5m,:og2'7-s!6DeAXKG>+qqQbNar#p@%_Z?mfphO%Aq&:c]8\+&+E?W:\
%/O_j@Na*6-LEgMZm$"VPP?]oo]UDg%Gk,Z,MlE`jT5C^\/8Z>>36o?fdXNm!?C/`X1r=UK=0$Nse(_Rp[RoA*o!V@V`ukLH.jlu-
%)!7(u-K4W+@PUiYCe'Zr$W"@C9@]/9W2b3AFfEtAC-?k>9#DGlBJ\Xb=R]cu/UCn'@guF.U534A;siFOJKV#kW<arIF]_.j2oJ#\
%fuBK9dZb/kM<s^1@"+XM.kY].52'e5S!JV>bQlTkX8Wa\X\^eWHVAEb.-LC?_\<)o78"ZI)MRsfR<:d8\sfa-hA3RmYZXO+*G%=_
%5n.nYE]00)24IcY)Y;(nWAlBYk#HWIB70)gOlnDOCPQ,@*%q<>Bb&s[3lrqg6=R"q1b8mhiCsO9er2.sW&kPXc0;YV,jLa?hn@`%
%?R$9V=jq;Xer,.@QqT10<2/)!<qM#If(39\)5iMu8]%$JYB`#ohFrLsb3LU98ggrcBR:s@p-[KA5pAi;+3pcFci#rK,R?2e)/XZJ
%KMT1]/O>D)D7J,2"e8!5i_o#A<%!p_)^!7HBdJd%F(b[[-``SJg*riLlXeNb[@;ei!ZB,ifA[qjoL4+G533ThL_XXj;O3_#_rN>7
%I,!]mIIk9HI)4>tE2$oY%5r!):qbdUei%EI1l3pag*AjAREE'e9G9Mi?np^d=a"1G)1p^FDBVp-cTKrug/O0T+$DqWhX[O%Z/^@D
%.d3/G$BHtZ-.%OlYn7\Li`AeXrSW*Zj>]CUAXP`ZL.%dDlc.LKE/A6,KL\e$<.bdlg?rWN/_XW?i?U((IB_7%3m!$gRPcc!(PqLL
%JQfX[$tQh.mooLhGHNXjr+iIOJXtV>aGlI10qrYWC1c.rQCug+85&YUU>p9`Nj09$VpP?`4llUYO]CO"(>1HU%:=%\=B&L3:5;G7
%-*)SWKIf.f*7+2dWh30?=n<\O;qH%7ZGls*R*.0&,@N\%]/<Wf+i0X7#F$5Z3Js,2WB#4WgB__FWFh56]/[/_::!8,!]<4_0kO+_
%,eSWqAtT$<iLt.(Vj]qqa5(j^e&NpBIXbQZn2O>[JV0l;Q3rslm<)`<C!-8&"HB(&hE0&^XN>kkk<V^f6Tj.`9T:'GeL`-Kn>lg:
%^lTjtQo4NAnYi$G=<f&HX&R6`oA<S"kH"]N&VT^[V+6L_NEr$cbUbL7="/+nlDs^,_MAlWma8/#[^XT5W>6!EmLHsTn*NdTH-I4W
%mKtZpA_cdeo)G]F'MC4HU5E$_U!tK3D\%hVgH/Im'g*eeb=%dCjG)=Pl'nLq>m3JmQNO*i=jXB'(Mcn<13Vf?FX":UU1L/:7Qs#T
%J6B=UY<c/>9In-gZH2dRp2k)ci#Du:%!lO)Cn2;[B3O#phcNqSSF\!`"YQ$0>$s1Q<UWQ=@c.3qmJcZmj&Y7S,OYt5q""@6WT13>
%L@U?<:GLK@D6eA1Aj"/-0mDgmCc(*\o00k9&"cb?o?*$)I/QqlLg;:"a%n3iGjcWY.'&d4$:.-6b0^saPa!:QJhk+$Pk44qI1[qB
%AF&u`[+Es)P#ASj^e[6'9%rf+>BQa6$M`'!:N;.*@3"3ScG2P;N^Cs+IiH_Vr)nq@GVVI^Bga/=7OV$(_:*,[VJ2pMn*`rZc2'5V
%-kF!YDP1\l:FY;GfPog59nmX@d145!VJ?1I:WiMrUg=5"V1c9VkOq=JK(@+RTW)1jh\TOE,r]RUOeFqh%[<H=!hG(@4-:,XBuGEd
%O<T`i6VV%\[8JuLN:dqJH7a)+8?$R[qnfr$,nIs\5Ma28;BqesiXApOp,6'm4\!Q,_FYJtd0\Eo#l<UPm3*8&j(ZQeX[LVXo,H"?
%Q]GhA]?^2A0'/fND7A6<)Y>5p%\8H7FYhfF9+s8'#(1f%hdL+K6JH,Va^\^=7+u(s]*/&*.A*7Z"%\i]8f^$1LZ4#rac6_\Y[AIS
%NipAZKRJ30DG)'*Kjn+sKl("OC,HkHPuJGkFj?A7ijOB&]JXeXH^La!.CY5QZ51PkfKZgO;2''F(!SneXHp!8WmA^Cb>p;\(qt.H
%T`>T]nLQE<Ws4'MBAPfnP_&lW5!EGA0=FJ:404AB=?*WTZ8i5j:XduHn:,Ud8<smW9\f#MBp]ma"Z@nh3u$=GWt?7s-O$'l<#c6V
%(Xiou62a()5"f^?8Q)P0=FQW(i![G=Hi%u&l,&d=-gjl+X\Gf9`Jg8GkaZ5V:R%0+S44KpGL1B:HSKZs3\q)1>:r7.c1L%$3;g<r
%\mY\Y2%03cDB&SXLH[['hA.l(`-(=,mPHgAL"U<(03</%`-bT>4M,EJe+][BOau,tDBH4B`ekHAFI.+a_GMCF&`uZCU\rjd]I_an
%Q3=>Bb>G#&h;fF%"Zq6H$Glp=1j=K-9lC&T*&F$DdUJi-[AT)CpGFY!DcL.4^,*l%*8YHDA`dFnKZU=%6W\)`:`SgE5_AjRV+:is
%(ohXB$&hfFX=[B]]/n:pTR7,uR[P6A8ukG==Ki0k0#TVMKt"]J&Yk+\jc6\Jq3ohsfhu@:0X%;m]Fq^CR6*4UG@1,fqWBH2^p)iL
%P$Y@&f&g;E$PQ!-Z6l>CGWYsFhQ"$F?"4?brh'@/)tFfPlk$)2HAEMg7C,T4r$]BU&<EU$EpS2%=JVd5=P.EMN?[T?%QA*VicfnR
%.6V'*E38=T1aT&d"M9Wh268Pi;g?H"gG16uTFK:f?tAXNV],Ba]L?)%>I-1Y#/YZ^!FaEc;E\>dlf)gslUc$tP4mkfg(0bF$*3?X
%Neko#olb]4P.g1U@Oh"a&mS4;aNuk?]6j:9^ari?SmgOqa=UuAYcY@tV4=$j9%uZOLs_7rc*_<Y*J)kQ=/>+bcBD_R,qXmK>=n"T
%gNSJd=qTmiKVD2/%_kMhXh1e8%8L@T^I,2pa+>,pB.Yme6?m#e`YA>:NcR#Uk>9':`Z&LU.C<:cin34\_XhII*cCg@e"D<QofX7X
%AO0R;NO=0&I>'gL`BD&)Y_92G_T1W5O`Ns+,Bfgf6,6IO@&%om%iMG?$HU*3/;*hO&'Dp%La1luOrQOiq7Fo(C@&$mb=f31'gE+m
%TH7Ykfc2I9DW_;*N_92mj'FV7?#TZ5m(G$>HiC4hOSLR0h#GtjroILY^\RESn,Mm4_sk;<rlq(Mr?'pHo7+LOpA;W)]0H>gRif@m
%pW[(EK#.0Js#pARma'd?qq$>pfC-J&pXfHDYQ"V2DE;_2h=(@5^\uX=s5!\WMe1j,~>
%AI9_PrivateDataEnd
