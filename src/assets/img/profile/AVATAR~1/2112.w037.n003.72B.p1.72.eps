%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 12/13/2021
%%BoundingBox: 0 0 672 400
%%HiResBoundingBox: 0 0 671.0806 400
%%CropBox: 0 0 671.0806 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 21626 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA8
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1CAA7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1CAA7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CFA8FFCACFA8CAA8A8A7CAA8CAA7CAA8CAA7CAA8A8A7CAA8CF
%A8FFCACFA8CAA8CAA7CAA8CAA7CAA8CAA7CAA8A8A7CAA8FFCAFFCACAA8CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8A8A8CAA8FFCAFFCFCFA8CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8A8A8CFCAFFCAFFA8CAA8CAA8CAA7CAA8CAA7CAA8CAA7A1
%A8A1A8A1A8A1A8A1A8A1A8A8CFA8CFA8CFA8CAA8CAA7A8A1A8A1A8A1A8A1
%A8A1A8A7CAA8CFA8FFA8FFCACFA8CAA1A8A1A8A1A8A1A8A1A8A1A8A7CAA8
%FF7D7652A8CACAA8A8A1A8A1A8A1A8A1A8A1A8A1A8A8CFCAFFA7522752A7
%CFA8A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8A8A1A8A8FFA8CAA7A8A1A8A1
%A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CFCAFFCACAA1C2C2C3A8FFCACF
%A8CAA8CAA8CAA8CAA8CAA8FFCAFFFFCF5227277CA8FFCACFA8CAA8CAA8CA
%A8CAA8CAA8FFCAFF7DFD04F8A7CAFFCACAA8CAA8CAA8CAA8CAA8CAA8FF7D
%272727F8F8F827A8FFCACAA8CAA8CAA8CAA8CAA8CACAFFCAA8F8F8F8277D
%FFCAFFA8CAA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A1CAA8CAA8C393BB
%93BB93C3A8CFA8CAA1A8A7A8A1A8A7A8A1CACACF7D5226FD04F827A8FFA8
%CAA1A8A7A8A1A8A7A8A7CFA8CFA127FD04F827CFA8CFA8A8A1A8A7A8A1A8
%A7A8A8FFCA52FD07F852CACFA8A8A1A8A7A8A1A8A7A8A8CFA8FF522020F8
%F827A8FFA8CFA8A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA8FFCAFFA0
%BBBBBCBBC2CAFFA8FFCACAA7CAA8CAA7CAA8CACAFF27FD06F87520A8CAFF
%CACAA7CAA8CAA7CAA8CFA8FFCF52F8F8277676277DFFA8FFCACAA7CAA8CA
%A7CAA8CFCACFF87627FD05F827FFA8FFA8A8A7CAA8CAA7CAA8FFA8FFCA27
%4B75F8F8F8274BA8CAFFA8A8A7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A8CAA8
%CFA7BB93996F7676A8A8CAA8CFA8A8A1A8A1A8A1A8A8FF27FD06F8206F9A
%A7CAA8CFA8A8A1A8A1A8A1CAA8CAA8CA274B75C39A9A2052CACAA8CFA8A8
%A1A8A1A8A1CAA8CAA8276F76202727F8F827A1FFA8CAA7A8A1A8A1A8A1CA
%A8CAA8FF766F6F9A4B6FF8F8F8A8A8CAA1A8A1A8A1A8A1A8CAA8CAA8CAA8
%CAA8FFCAFFCACFA09A9A51262727FFCAFFCAFFA8CAA8CAA8CAA8FF7DFD04
%F8274B759A9A6FCACAFFCAFFA8CAA8CAA8CAA8FFA8FFA84B76C3C3C37676
%27FFCAFFCACFA8CAA8CAA8CACAFFA8FFA7769ACAA1A127F8F8F876FFCACA
%A8CAA8CAA8CFCAFFA8FFCACA999AC2A06F27F8F827FFCACAA8CAA8CAA8CA
%A8A7A8A1A8A7A8A1CAA8CAA8CFA8CA4BC3C39A9ACAA8CAA8CFA8CAA1A8A7
%A8A1CACA27FD05F89A99C26F75C3FFA8CFA8A8A1A8A7A8A1CFA8CAA8CFF8
%51A1C3A0C32727A8CAA8CFA8A8A1A8A7A8A7CFA8CAA8CAC3A1C3C375FD05
%F87DFFA8A8A1A8A7A8A8CFA8CAA8FF7DA099BC7527FD04F8A1FFA8A8A1A8
%A7A8A1A8CAA8CAA7CAA8A8A8FFCACFA8FFCACFC3C3C3C9CAFFCACFA8FFA8
%A8A7CAFD04A8FD06F826C2BC9A99CACACFA8FFA8A8A7CAA8CAA8FFCAFFA8
%26F8519A9A4BF8F8CFCACFA8FFA8CAA7CAA8CAA8FFCACFA8CA9AA176FD06
%F827CACFA8CAA7CAA8CAA8FFCACFA8FFA775999A27FD04F8A8CACAA8CAA7
%CAA8CAA7A1A8A1A8A1A8A1A8A8CAA8CAA8CFA8A16F9AA7CAA8CAA8CAA8CA
%A1A8A1A8A1CF52FD07F8769A6EA1A8CFA8CAA8CAA1A8A1A8A7CAA8CAA8CA
%00297DCAA07E2929A2CFA8CAA8A8A1A8A1A8A7CAA8CFA8CAA19AA0C24A27
%FD05F8CAA8A8A1A8A1A8A8CAA8CFA8C9A0C2BCC29AC29F75F852CACAA7A8
%A1A8A1A8A1A8CAA8CAA8CAA8CAA8FFCAFFCAFFA8A252774CA8CFFFCAFFA8
%FFA8CAA8CAA8CACA7DFD04F826A0C2C9A1A1A0C9CAFFCAFFA8CAA8CAA8CA
%A8FFCAFF7E7F547F7EA97E7F547FA8FFCAFFA8CAA8CAA8CAA8FFCAC9BCC2
%A1A176C2BCBC4B27F827A8FFA8CAA8CAA8CACAFFCAC9C1C8C2C2C2C8C2C8
%C8C8C9FFA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A8CFCAA2282928524C
%29287EA8CFA8CAA8CAA7A8A1A8A7CA7DF8F8F84AC8C8C8C1C8A0C8C1C8A8
%CAA8A8A7A8A1A8A7CAA8CF7E545478FD07547EA8CFA8A8A7A8A1A8A7CAA8
%C3BBBB4C29284C99C2BBC2992027CFA7A8A7A8A1A8A8CAA8C9C1C8C1C8C1
%C8C1C8C1C8C1C8C2CAA1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CACA7E2829
%285328532853287ECAFFCACAA7CAA8CAA7CAA8CF27F84BC8C2C8C2C8C1C8
%C2C8C1C9CACAA7CAA8CAA7CAA8CF7E79547E547F547E547F547F787FCACA
%A7CAA8CAA7CAA8CABBC2BB5328534CC2BBC2BBC299CACAA8A7CAA8CAA7CA
%A8CFC2C8C2C8C2C8C2C8C2C8C2C8C2C8A7A8A7CAA8CAA7CAA8A1A8A1A8A1
%A8A1A8A87D0629282928532829282928A8A8CAA7A8A1A8A1A8A1A8A8CA76
%C8C1C89FC8C1C89FC8C1C8C1C9A8A8A1A8A1A8A1A8A878FD0B547E54A8A7
%A8A1A8A1A8A1A8A0BB99BC2829285399BC99BC99BBBBA8A7A8A1A8A1A8A1
%A8A0C29FC8C1C89FC8C1C89FC8C1C2A0A8A1A8A1A8A1A8A1A8CAA8CAA8CA
%A8CAA8CAA1532853285328532853285353FFA8CAA8CAA8CAA8CAA8CAA8C9
%C2C8C2C8C2C8C2C8C2C8C1C8A7CAA8CAA8CAA8CAA8CA7E7F547E547F547E
%547F547F7E7EA8CAA8CAA8CAA8CAA8CABCC29A53285328C2BBC2BBC2BBC9
%A8CAA8CAA8CAA8CAA8C9C1C8C2C8C2C8C2C8C2C8C2C8C2CAA8CAA8CAA8CA
%A8CAA8A7A8A1A8A7A8A1A8A7CA7D53282928532829285328537DCAA7A8A1
%A8A7A8A1A8A7A8A1C8C1C8C1C8C1C8C1C8C1C8A1A8A7A8A1A8A7A8A1A8A7
%A87EFD045478FD0554A8A1CAA7A8A1A8A7A8A1A8A8A7BB9A2829285399BC
%99BCBBC3A8A8A7A8A1A8A7A8A1A8A8C9C1C8C1C8C1C8C1C8C1C8C2A8A1A8
%A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8CAA77D292928292829287DA8
%CAA7CAA8CAA7CAA8CAA7CAA8A8A7C9C2C8C1C8C2C8C2C9A8A8A7CAA8CAA7
%CAA8CAA7CAA8CA7E7E54545479547E78A8A8CAA7CAA8CAA7CAA8CAA7CAA8
%CAA153282928BCBBC2A0CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAC2C8C2C8C1
%C8C2C8A1CAA8CAA7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1A8A1A8A7A8
%7D7D777D7DA8A7A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1C9A1C9A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A87EA27DA2A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A7A8A1A87D7DA0A1A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A7A8A1C9A1C9A1CAA7A8A1A8A1A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8
%A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8
%A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8
%A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8
%A7A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8
%CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7
%CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8
%CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7
%CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8A7A8A1A8A7A8A1A8A7A8A1CAA8CAA8CFA8CAA8CFA8A8A1A8A7A8
%A1A8A7A8A1A8A7A8A1CAA8CAA8CFA8CAA8CFA8A8A1A8A7A8A1A8A7A8A1A8
%A7A8A1CAA8CAA8FFCACFA8CAA8A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA8FF
%A8FFCACAA8CAA8A8A1A8A7A8A1A8A7A8A1A8A7A8A7CAA8CFA8FFA8CAA8CA
%A7A8A1A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8CAA8FFCAFFCAFFCF
%FFA8FFCACAA7CAA8CAA7CAA8CAA7CAA8CAA8FFCAFFA8FFCACFA8FFCACAA7
%CAA8CAA7CAA8CAA7CAA8CAA8FFCAFFA1A7A8FFA8FFA8CAA7CAA8CAA7CAA8
%CAA7CAA8CFA8FF5227267DCFFFA8FFA8A8A7CAA8CAA7CAA8CAA7CAA8CFA8
%CFC9C9C9FFCACFA8FFA8A8A7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1A8
%A8CFA12727A85252A1CFA8CFA8A8A1A8A1A8A1A8A1A8A1CAA8CAA8FFA8CA
%A0C8A0CAA8CFA8A8A1A8A1A8A1A8A1A8A1CAA8CAA8CA27F8F8F876FFA8CF
%A8A8A1A8A1A8A1A8A1A8A1CAA8CAA8FD04F84BA8CFA8CFA8A8A1A8A1A8A1
%A8A1A8A7CFA8CAA0C8C1C1A0CAA8CAA8CFA7A8A1A8A1A8A1A8A1A8CAA8CA
%A8CAA8CAA8CACAFFCAA8FD05F827A7FFCAFFCACAA8CAA8CAA8CAA8CACAFF
%A8FFC9C8C1C8C1C9A8FFCAFFA8CAA8CAA8CAA8CAA8CFCAFFCAFF52FD05F8
%A8FFCAFFA8CAA8CAA8CAA8CAA8FFCAFFCACF514BF8F8F852CAFFCAFFA8CA
%A8CAA8CAA8CAA8FFCAFFCAC3A0C8C2C8C9FFA8FFCAFFA8CAA8CAA8CAA8CA
%A8A1A8A7A8A1A8A7A8A8CFA8CAA852F8F8F84B757DCACFA8CAA8A8A7A8A1
%A8A7A8A8CFA8CAA7C8C1C89F9AA1CFA8CFA8CAA8A8A7A8A1A8A7A8A8CFA8
%CAA84B6F27F8F8F8267DFFA8CAA7A8A7A8A1A8A7CAA8CFA8CAA89A764BF8
%20F827A7FFA8CAA1A8A7A8A1A8A7CAA8CFA8CA6F759FC8C1C8A7CAA8CFA8
%CAA1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CFA8FFCAFF522027519A9AA1FF
%A8FFCACFA8CAA8CAA7CAA8CFA8FFCACFA0C2C2C24BA7CACFA8FFCACFA7CA
%A8CAA7CAA8FFA8FFCAA8269A756F4B27F827CAFFCACAA7CAA8CAA7CACACF
%A8FFCAFF76A1C3A04B20F84BCAFFCACAA7CAA8CAA7CACACFA8FFCA9A6FC2
%9A75C1C8C8CFA8FFCACAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A8CAA8FF52
%F82076C3C36FC9A8CAA8CAA8A8A1A8A1A8A1CAA8CAA8CFA8A04AC29999A1
%FFA8CAA8CFA8A8A1A8A1A8A1CAA8CAA8FF274B6FC2BC9A4AF8F8CAA8CFA8
%A8A1A8A1A8A1CAA8CAA8CFA8C375C39A4BF8F8F8A7A8CFA8A8A1A8A1A8A7
%CFA8CAA8C9999999C299C29FC8A0CAA8CAA7A8A1A8A1A8A1A8CAA8CAA8CA
%A8CAA8FFA8FFA827F82752C39AC3517DCAFFCAFFA8CAA8CAA8CAA8FFA8FF
%CAFFCAC3BCC29ACACAFFA8FFCAFFA8CAA8CAA8CACAFFA8FF7CF84B9A75C2
%6F27F8F852FFCAFFA8CAA8CAA8CACAFFA8FFCAFFCAA19AA152F8F8F876FF
%CACFA8CAA8CAA8CFCAFFA8FFC8C29A9A9AC8C2C8C2C9A8FFCACAA8CAA8CA
%A8CAA8A7A8A1A8A7A8A1CAA8CACAA1F8F8F8269A9A4BF8F8A1CACFA8CAA1
%A8A7A8A1CAA8CAA8FFA8CAA1996FA1A8FFA8CAA8CFA8A8A1A8A7A8A1CFA8
%CACA52F8F8759A9999F8F8F827A8FFA8A8A1A8A7A8A7CFA8CAA8A87E7E76
%C3A27E2928F852CACFA8A8A1A8A7A8A8CFA8CAA8C8C1766FC376C2C1C8C2
%CAA8CFA8A8A1A8A7A8A1A8CAA8CAA7CAA8A8A8FFCAFF7DF8F85151A0C2A0
%4BF852FFA8FFA8A8A7CAA8A8A8FFCAFFA253287DC3C252537DFFCACFA8FF
%A8A8A7CAA8CAA8FFCAFF52272D7C99C8C8582D27F8CACAFFA8CAA7CAA8CA
%A8FFCAA9545554CBA27F547F542851FFA8CFA8CAA7CAA8CAA8FFCACFC277
%53A129779A77A0C8C2C8C2CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A8CFA8
%A8207651524B765176277DCACAA8CAA1A8A1A8A1A8A8CF7D282829285377
%53282853CFA8CAA8A8A1A8A1A8A1CAA8CACA7D2D587BC29F582D582D52CA
%CAA8A8A1A8A1A8A7CAA8CFA1785455FD0654537DA8CAA7A8A1A8A1A8A8CA
%A8FFA19A282928296F9A062975C8C1C8A1A8A1A8A1A8A1A8CAA8CAA8CAA8
%CAA8FFCAFFA776527651765276517676CFCAFFA8CAA8CAA8CAA8FFA85328
%532853282F28532853A2FFCACFA8CAA8CAA8CAA8FFCAA82D587BC8C2A02D
%582D5858CFCACAA8CAA8CAA8CAA8FFA87EA0C9A1A2777E7DA1A1C97DCBCA
%CAA8CAA8CAA8CAA8FFA8779A53285328C2762F2853A0C8C2CAA8CAA8CAA8
%CAA8A1A8A7A8A1A8A7A8A7CFA8764B7651764B76515275767DFFA8A8A7A8
%A1A8A7A8A87D28292853282928532829287DCACAA7A8A7A8A1A8A7A8A8FF
%582D2D7CC1C29F582D512D2D7CCAA1A8A7A8A1A8A7A8A8CA535453A17DA1
%7CA1777E5478A1CAA1A8A7A8A1A8A7CAA8596F9A28532829997628292853
%C1C9A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAFD04A851765176527651765276
%7576A8CAA7CAA8CAA7CAA8CA53292853285328532853282953FFA8A8A7CA
%A8CAA7CAA8CAA8582D58517CC2A02D582D582D58A8CAA7CAA8CAA7CAA8CA
%A1A1777E547F5455547E7DA1A0A8A8CAA7CAA8CAA7CAA8A828C2762F2853
%4CC24C53285328A7A8CAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A1A87C524B
%524B7651524B76517552A8A7A8A1A8A1A8A1A8A7A8282828292853282928
%532853A7A8A1A8A1A8A1A8A1A8A7A72D2D2D512D7C512D2D522D527DCAA1
%A8A1A8A1A8A1A8A77E2A77A0A1A0A1A0A17CA1537EA1A8A1A8A1A8A1A8A1
%A8A177999A999A99BC994C2829287DA1A8A1A8A1A8A1A8A1A8CAA8CAA8CA
%A8CAA8CAA8CA7D765176517651765176A0CAA8CAA8CAA8CAA8CAA8CAA8CA
%535328532853285328537DCAA8CAA8CAA8CAA8CAA8CAA8A858582D582D58
%2D582D7CA7CAA8CAA8CAA8CAA8CAA8CAA8A85455547E787E547F547EA8CA
%A8CAA8CAA8CAA8CAA8CAA8C3BBC2BBC2BBBC285353A2A8CAA8CAA8CAA8CA
%A8CAA8A7A8A1A8A7A8A1A8A7A8A1CAA1A15276517652A1A1A8A1A8A7A8A1
%A8A7A8A1A8A7A8A7CA7D7D4C532853527DA1CAA1A8A7A8A1A8A7A8A1A8A7
%A8A7CA7D7C5258515858A7A8A8A1A8A7A8A1A8A7A8A1A8A7A8A7A87E7E54
%7E547E7EA8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A8A8A0C299C29A5377A8A8
%A8A1A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7A8A8CA
%A8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7A8A8CAA8CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA8CAA8CAA7CAA8CAA8CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA2CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA8CA
%A8A8A1CAA8CAA8CAA8CAA7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A7A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A7A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA7CAA8A8A7CAA8CA
%A8CAA8A8A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A8A7CAA8CAA8CAA8A8A7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8A8A7CAA8CAA8CAA8A8A7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8A8A7CAA8CAA8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8A8A8CAA8CAA8CAA8CAA7CAA8CAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A1
%A8A1A8A7CAA8CFCACAA8CAA8A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8
%CAA8CAA8CAA7A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8CFA8CAA8CAA7
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8FFA8CAA8CAA7A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1CAA8CAA8CFA8CAA8CAA1A8A1A8A1A8A1A8A1A8A1A8CA
%A8CAA8CAA8CAA8CAA8CAA8FFCAFFA8A8CAFFCFFFA8CAA8CAA8CAA8CAA8CA
%A8CAA8CACAFFCAFFFFFFA8FFCFFFA8CAA8CAA8CAA8CAA8CAA8CAA8CACAFF
%CAFFCAFFA8FFCAFFA8CAA8CAA8CAA8CAA8CAA8CAA8CFCAFFA8A8A1CACAFF
%CAFFA8CAA8CAA8CAA8CAA8CAA8CAA8FFCAFFCAFFCACAA8FFCACFA8CAA8CA
%A8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A7A8A8CFA8CF7D27F8272052A8CAA8
%CAA7A8A1A8A7A8A1A8A7A8A8CFA8CFA17D27F8F87CCACAA8CAA7A8A1A8A7
%A8A1A8A7A8A8CFA8CAA0C2A0C9A8FFA8CAA8A8A7A8A1A8A7A8A1A8A7CAA8
%CFCA52F8F8F852A8FFA8CAA7A8A7A8A1A8A7A8A1A8A7CAA8CFA85275A0A0
%A1A8FFA8CAA7A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8FFA8FFFF52
%FD05F8CFCACFA8CAA8CAA7CAA8CAA7CACAFFA8FF52FD04F8264BFFCAFFA8
%CAA8CAA7CAA8CAA7CACACFA8CA99BB99BCBBC3A8FFCAFFA8CAA8CAA7CAA8
%CAA7CACACFA8FF272727F8F87CCAFFCACFA8CAA8CAA7CAA8CAA7CFCACFA8
%CF4BF875C8A0A7CAFFCACFA7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1CF
%A8CAA87D52F8F84B277DA8CFA8CAA8A8A1A8A1A8A1A8A7CFA8CF7DFD04F8
%4B76A1A8CAA8CAA7A8A1A8A1A8A1A8A8CFA8CA999A99BB93BB99CAA8CAA8
%CAA1A8A1A8A1A8A1A8A8CFA8CAA8526FA1F8F8F8A8A8CAA8CAA1A8A1A8A1
%A8A1A8A8CAA8CFA1BC6F2775A07DCFA8CAA8A8A1A8A1A8A1A8A1A8CAA8CA
%A8CAA8CAA8FFCAFFCACF2784279AA0A1A8FFCAFFA8FFA8CAA8CAA8CAA8FF
%CAFFCFA8F8274B4BA1A176FFCAFFCAFFA8CAA8CAA8CAA8FFCAFFCA76769A
%BBC299BBA1FFCAFFCACFA8CAA8CAA8CAA8FFCAFFCACA9AA19AC39AA0A8FF
%CAFFCACAA8CAA8CAA8CAA8FFCAFFCAA16FC24B76A0CACAFFCAFFA8CAA8CA
%A8CAA8CAA8A1A8A7A8A1A8A7A8A8CFA8CAA8A1A87DA0A16FA2A8CFA8CAA8
%CAA7A8A1A8A7A8A8CFA8FF4BF827A0A1C976A1A8CFA8CAA8CAA7A8A1A8A7
%CAA8CFA8CA9A9AC3C375BC99BBA1CAA8CAA8A8A7A8A1A8A7CAA8CFA8CAA7
%A0C3769AC39ACAA8CFA8CAA8A8A7A8A1A8A8CAA8CFA8CF9A7575C24AC3CA
%CAA8CFA8CAA7A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CFA8FFCACFCAFFA8C3
%9AA1CAFFA8FFCAFFA8CAA8CAA7CAA8FFA8FF52F8F8F84BFD04C3FFA8FFCA
%CFA8CAA8CAA7CAA8FFA8FFCACA9AC3C3A099BC99BB99C3CAFFA8CAA8CAA7
%CACACFA8FFCAFFC3C9A1A1C3CFCACFA8FFCACAA7CAA8CAA7CACACFA8FFCA
%C96F9ABCC3CAFFCACFA8FFCACAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A8CA
%A8CAA8A87EA1A0A1C3A2A8CAA8CAA8CAA1A8A1A8A1CAA8CFA1FD05F89A76
%76CFCACAA8CAA8A8A1A8A1A8A1CAA8CAA8CFA8A176A099BB93BB99BB93C3
%A8A8A1A8A1A8A1CAA8CAA8CFCACA9A7676A1A7CFCACAA8CFA8A8A1A8A1A8
%A7CFA8CAA8CFCA9A6F9AA2A8A8CFA8CAA8CFA8A8A1A8A1A8A1A8CAA8CAA8
%CAA8CAA8FFA8FFCAA97E7FA1A0757E7F7FA8FFCAFFA8CAA8CAA8CAA8FFCA
%A7F8F8F82D2DCAC3C97DA8CAFFCAFFA8CAA8CAA8CACAFFA8FFCAFF76A1C3
%C3C2C299BC99BC9AFFA8CAA8CAA8CACAFFA8FFCAA858C3A1C3765858A8CA
%FFCACFA8CAA8CAA8CFCAFFA8FFCAA977C29B55547FA8FFCAFFCACAA8CAA8
%CAA8CAA8A7A8A1A8A7A8A1A8A8CAA8CF7E7F54A2C3C3537F5AA8CACFA8CA
%A1A8A7A8A1CAA8CFA72704512D5858C3A0582D58A8FFA8A8A1A8A7A8A1CA
%A8CAA8C9C9CAC3CAC9C8C1C299BB93C3A8A8A1A8A7A8A1CFA8CAA87D2D58
%A7CAC97C2D582D7CA8FFA8A8A1A8A7A8A7CFA8CAA87E54CAC27EFD04547E
%CAA8CFA8A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CFCACFA87F7E7F7EA37E7F
%7E7E54A8A8FFA8A8A7CAA8CAA8FFCAFF525851582D5858A858582D58A7FF
%A8CAA7CAA8A8A8FFCACAC8C8C9CAC9C8C2C8C2C8C1C3A8CFA8CAA7CAA8A8
%A8FFCA7D2D5858FFC9FF83585158517CA8CAA8CAA7CAA8CAA8FFCA7E547F
%C8C8547F547E54557ECACACAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1CFA2
%5454545354547F5478FD04547ECAA1A8A1A8A1A8A8FF7C2D2D582D512D2D
%2D582D582D517DCAA1A8A1A8A1A8A8C9C8C89FC8C1C29FC8C1C89FC8C2CA
%A1A8A1A8A1A8A1A8A87D2D582D83FFCACAA82D582D582D7DA1A8A1A8A1A8
%A1A8A87E54547EC8A0FD0854A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CA
%A879547F547E547E547F547F547E54A8A8CAA8CAA8CAA8CAA7582D585158
%2D5851582D58515852CAA8CAA8CAA8CAA8CAC8C9C2C8C2C8C2C8C2C8C2C8
%C2C8A7CAA8CAA8CAA8CAA8A851585258A7FFCAFFA858515852587DCAA8CA
%A8CAA8CAA8A9547E54A8C8C8547F547E547F547EA8CAA8CAA8CAA8CAA8A1
%A8A7A8A1A8A7A8A1A878545478545453545454535454A2A7A8A7A8A1A8A7
%A8A7A82D2D2D582D512D582D512D5151A8A7A8A7A8A1A8A7A8A1C9C8C8C1
%C8C1C8C1C8C1C8C1C8A0A8A1A8A7A8A1A8A7A8A17D2D582DAEFFCACAFF51
%582D587DCAA1A8A7A8A1A8A7A87D7E5455A1C8A05454785454547EA2A8A1
%A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA7CA7E54547F5454547F545454A8
%A8CAA7CAA8CAA7CAFD04A858512D582D582D582D5152A8A8A8A7CAA8CAA7
%CAA8CAA8CAC2C8C1C8C2C8C1C8C2C8A0CAA8CAA7CAA8CAA7CAA8CAA87D2D
%58A8FFCACFFF7C2D587DCAA8CAA7CAA8CAA7CAA8CAA27E54C9C1C9547854
%7F547EA2CAA8CAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A1A8A1CA7E7EFD05
%547E7EA8A1A8A1A8A1A8A1A8A1A8A1A8A1A87D582D512D2D2D587DA8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A0C8C1C8C1C2C2C9A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A758FFFFFFC9FF7C7DA1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A0C89FFD0454A2A7A8A1A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA2A8A2A8A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8A8A7A7
%A1A8A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA7C9A7CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA7CAA2A8A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1CAA7A8A7CAA7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A7CAA8A8A7A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A8A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFD7FFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2021-12-13T18:49:16+03:00"
   xmp:ModifyDate="2021-12-13T18:49:16+03:00"
   xmp:MetadataDate="2021-12-13T18:49:16+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:07c8e731-8b1a-5c4f-b835-ab2f7977bf25"
   xmpMM:InstanceID="xmp.iid:07c8e731-8b1a-5c4f-b835-ab2f7977bf25"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2112.w037.n003.72B.p1.72</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="156"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7HlDluxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVwBJoBUno&#xA;BiqKj02dhViE9jucVte2lyAfC4J8DtitoSWKSJuLrQ4qtxV2KtqrMQqipPQDFUUmmTMKsQvt1OK2&#xA;22mSgfC4b2O2K2hZI3jbi44nFVuKuxVtEd24qCSewxVWmto7aEz3dxHbQr9qSRgqj5k0GK21BBFd&#xA;QCeyuYrqE1AkiYMpI6gMpIxW1J0dG4sCCOxxVrFXYqujjeRuKDkcVVp7WK2t3uLy4jtoIxWSWRgq&#xA;KP8AKZiAMVtC2Fxpmpo76TqNrqKxGkhtpkl4k9AeBYDFAK9lZSVYUI6g4paxV2KroopJW4otTiqL&#xA;XS5CPicA+A3xW1kmmzqKqQ/sNjitoUgg0IoR1BxV2KuxV2KuxVNLG2EaCRh+8YV+QxQw3zt5p1Oz&#xA;1U2VjcCOJYaS8QCwd69+oIWlM1ur1EoyqJ6PQ9l6DHPHxzFm0p8o6rq8us2dquogxPMS8LTIxYhP&#xA;UdOJJYtwFaduuQ03imQ58LkdojTjHLaPHyenzQpKhRxt2Pgc2ryyTSxtHIyN1U0xStxVCeb/ADl5&#xA;f8h+W5db1uQqoISGBKGWaVgSsUYNN9t+w6nCBbGUqfNHnT/nKnztrllPY6PbRaBBM21zA7SXYj3q&#xA;olPFVJ/mVQfA5MQajkKRfl35/wDzft5r3VdI1q4v4tOVZ73T7+aS5jmQmjcY5C2+3xFCG98jknGJ&#xA;APVtwYJ5ATH+F9rvF9YgUSKFcgGgNeLU7HvkUpQ6lWKt1BocUtAEkAdT0xVOLW3WGOn7Z+0cUPjr&#xA;8zdT89fmv56MOl6fcnRreaWz0pTyFpxgdhJcPIQIubdW79F32yfFGI3YxwzyH0hkH5Hx6/5B84aR&#xA;DeXiS6H5nWC3urZCxENzdxvLZF1NAJW9KnjwbcdMjxiTOWCWMAnr+l9S3Vss0dP2x9k4EJOQQaHq&#xA;OuKW0UswVepNBiqWfmfq915b/LXX9SsOQvobRkt5YzR1mmIhSReu6NIGHywjmxkdnxx+Yg8827WF&#xA;rr+t3+s2dzbW99atdXE88atcR1PESO4qGDKD3Ark4SBY58UoEX1AKF/LTzLq3lfz3pN/ZStA4uYo&#xA;bqOpVZIJHVZI3HdSvj0ND2yR3DUNi++by2E0ZIH7xfsnx9spchKcUroo2kkVF6saYqnMUSRIEQbD&#xA;qfHFD4t/MXTPM+ta3r+vxNdNqTavdWw0yMuWjtbcuikICW+H0aGm3hg8YCXCeVNg0kpY+MWZXy8m&#xA;V/lH+feo+TNOGkefLfU7iwncNpd9Ihd40pSRP3xRnjU8SOJPHpToMntLkWipQ+oEW+kbHU9H8w6N&#xA;BrWjXKXllcLzhuIzsyg0INdwykUIO4O2RZgqWKXYq7FW4xydQe5AxVPcUMK87eS4NRu4NT5Qi2ib&#xA;1NStpoRMs6qOK0NVKFR3X2qDmNlxCzKt3aaPVSIGMnYeTBNE/Jvy3f6wLqzuryDTGvBqCGxvnMcp&#xA;IHwkKAqIvxKONW4ts46ZLHkNgI1OmgImV+fPm9wy91iWamoE4Pior95xSFC3UNPGD0LCv34q+Sv+&#xA;cm/Olxr35iz6UkhOm6APqkEYPw+uwDXD0/m5/B8lGWxGzjzO7zfyxLpEWuWz6uB+jyJFlYoZQjPG&#xA;yxyGMEFwkhVivemRyg8Pp5tmnMBMcf0vo2XQtPtLbTND0u2tY55HjhuoYpTbSrHPJHJKyRPzeQSN&#xA;CFKMakfDXrmouRkSb+96sxxiERHhrrvWxok799dX0HYRyx2NtHL/AHqRIsnf4goB3+ebKAPCLebz&#xA;EGciOVlAagoFy1O4B/DJMAtslDXUYPjX7hXFU4xQ+WvyE83m7N3YJotxNcWcUzwajHMyI1o1yZvQ&#xA;aFv3LTLNcsytzB41HzhqMXp4vNzezc5MuGuUf0/Lqs/NnzHJDfabLZ2OomeHV7XVri6ns5LeOFLI&#xA;OkcfIr8Zq7HnToB1yemwTI4gPTyR2jmH073d93k+qMXDSe8ULdSAeNfvFcUrtPANytewJ/DFSjtQ&#xA;sLXULGeyu4lmtrhDHLG4qCGGJWJovLrmPR9Gl1PS4YpLiS2V5ZbSKDn6MjtJd8jOymIACcekhPwj&#xA;7IPTMMg3u72E4EHh3+HxfJXnbzEvmDzDNqCQPbRBIoI45nMs3GBBGGmlIBdzx3JzYY40HndRk453&#xA;VPb/APnFn80dYk1g+SNVuGurKaF5dJaUlnieIcnhUnf02jDMB2I264zCMcuj6FuFCzyAdAxp9+Vt&#xA;yvpigzk+Cmn3jFSmeKHknm2xmtPMv16KM3k90ZQ/1RoUiSMOxiFyWKvUCUn4K1NSRWmavOQSSJAg&#xA;vRdnGfALjKx8AR0579ejwT83dC84Xl6Z49EuP0ZbvPPLcwI06GSQgNI7qXKr6cSU5BaZl6XLjAri&#xA;Fl1HaOPOZnij6eIkU9K/5w6vdVfTvMllJybSoZbaW3r9lZ5FkEoX/WVEr4UHjmZN1+N7e44uwHYk&#xA;ZBuaxV2KuBIII6jFUN5z8/6R5X06O4uAZ7u4B+q2aEBnI6lifsqD1P4Zfg08sh25Nc5iLxjXPzc8&#xA;za1G9tdrFFYSFS1vbcomqjB1YS8mfkCB7e2bMaGI5Hf5/Y0jMbQ/kr8xLryzq91drbLc2+oFPryv&#xA;QTuUrxcyqq83HI7sD4bYz0MZRobHy/Uvjkmzu+itH1ex1jTLfUrGT1LW5QPG3cdirDsynYjxzTzg&#xA;YmjzcgGwhL6USXDU6L8I+jIsgoxuUdXHVSD92Kvkr84vy082N+bl7Da2UlxF5jumudLuVU+i4mHq&#xA;OpkpxUxb869AK9MM8sYQMpcg0jFKUqHMvXvIX5HeUPLdijajaw6xq7AGe5uYxJGrfywxuCqgfzEc&#xA;j+A5fVdp5Mh9J4Y+X6Xf6fQQgNxxSZrLoFhLeR3bhjNDIJoi3F+EgPLkpcMymvgciO0p1VRvv3B+&#xA;wgfZ73KMLFX6e7Y/eGV6XqbSMIJzVj9hz39jmf2d2gZngnz6F1us0giOKPJSupBJO7DpWg+Q2zdO&#xA;uWwSenMj9gd/liqTef8AzbLp8a6bp8nC7mXlNMp3jjPQKezN49hm47L0IyHjn9I5ebRlyVsHm+nX&#xA;t3psgewla2YLw/dniCn8pA2K7dDtnQ5MMJx4ZAEOPGRibC/UNTvtQlWW8lMrqOK7BQB7KoAGDDgh&#xA;iFQFBM8kpm5Gy9D8i+YZFEOk3s3qiWETWEzbHiKh4jX+RkansPlmh7T0g3yRFb+r9bdin0Kdzyep&#xA;M79idvlmlchdaSiO4Rj06H5HbFWP+aPNV213JZ2MpigiPCSRNmZh1o3UAdNs1Gq1cuLhiaD0/ZvZ&#xA;kBATyC5H7Hj835ieZFlltYbkJaes4U8E5iMsfh5kV6d+udNj7JxeGCQeLh7zzp57N2nkOU0fTxfZ&#xA;bIta8seX9biaPVLCG6qKeoy0kH+rItHX6DnHY804fSae2z6XFlFTiD+O9JPyj/J39A/mtHrsV4p0&#xA;fT7eeW0jkP78yzRtCYyKAEKkjNy+W2bnT6wZBR+p5LX9lnBLijvj+73vdXYu7OerEn78yXAVrGUR&#xA;3C16N8J+nFSs1e/ZnNvGaIv94R3Ph9Gc92nrCT4ceQ5u20OmAHGefRI7jT7Wd+ci/H3INK/PNZDP&#xA;KIoO1jlkOStFDFCgSNQqjsMrlIyNlhKRPNGaE9rpoe3traOGCZ2ldYUVKyt9pzxAqWpuTm27O1sx&#xA;IQO4P2fsdbrNNHhMhsVYkkknqc6J1LsVdirsVYh5/wDIkXmO3W5tisWq268YnaoWRKk+m3huSQcy&#xA;9LqfDNH6WvJj4ve8V1XQdZ0mUxajZy2zAkBnU8Gp/K4qrfQc3MMsZcjbiGJHNC21rc3Mqw20TzzO&#xA;aLHGpdiT4BanJEgblAD2/wDKXSvM2iaTdR6hSG1uyslvaPX1Y2pRmP8ALyFNuu3bNPrcsJkcPMOV&#xA;iiQN2aZgtzsVamMskAi5fCp5AdswNfppZoVE8vtcrS5hjlZCCZHU7imczkwzgakKd1DJGQsFyqzd&#xA;ATkYY5SNRFplMR5lXhgKnk3UdBm80HZpjLjn05B1mq1gI4Yq+bt1rsVYx5p8qvfyNfWZrdUAkiJ2&#xA;cKKChPQ0zcdndpDGOCf09/c0ZcV7hg9zaXVrJ6dxE8L/AMrqV/XnRY8kZi4m3GII5t2the3b8LaB&#xA;5j0+BSQPmegwZM0IC5EBREnkz/QvLgt0sbm8H+l2sLRJGDVVLSyScq9zSSmc5ru0OO4w+knn8A5W&#xA;PFW5T/NS3OxVjfmDy/O4lurBecrAkwCgq3ipO2a/NoeKVx+LvtF2vwQ4J9Bsf1vBL3TdQsZDFe20&#xA;ttIDTjKjIfxGdtGYlyNvJEEPXbK3ubsAQRmRqAtxGwqO57fTnm4wyJqIt9LnqYQjcyAyrRNDFn+/&#xA;no1yRRQNwgPh75tNLpODeX1PN9pdp+N6IfR96cZnOndiqHmgJJddydyM0Gu7NlZlj38na6bWCuGS&#xA;iVYdQR8808oGJoinYRkDybWN26KfnlmLTzyfSCWM8sY8yiYogg8WPU50Wh0IwizvI/Y6jU6o5Nh9&#xA;KpmxcN2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2Kr4oZJX4oKnv4DFUbFYW/Io8nKQAFkBAoD0264otUbTbcjYsD41xW0Fc2ckO&#xA;/wBpP5h/HFKhirsVVIYJJm4oPmT0GKo6PTIgPjYsfbYYotzafbNVVYhh2rX8MHELpNHmg7i1kgPx&#xA;bqejDCqjirsVVYLaSZqKKAdWPQYqiLiDTrK2e5vrhYIIxWWeV1jjUeJZqAfScUWpWEuh6rC02lX0&#xA;N5Gh4tJbSpMgPgShO+K2sntpIWowqD0YdDilSxV2Kq1vayTnbZR1Y4qxjzV+aP5Z+UtXTR9e1Ywa&#xA;iVV3iWKaX01f7JcxI4Wvh1wiJYmYDKNNfR9Y06HUdJu0u7K4XlBcwsJI2HTYjwOx8DgSCsmgkhbi&#xA;4+RHQ4pU8VdiqvbWck2/2U/mP8MVVzDpsbcJJhz7gsNsonqscTRkLbI4ZkWAaXvpsTCsbEHtXcZe&#xA;C1oGWGSJ+Lih7eBxVZirsVdirsVTi1gEMQFPiO7H3xQ+SPzqj80+WvzpvdT8savLcatqMPqiGzLS&#xA;3VvG0IjaKVFDADiOSeAodqA5YCK3ajEmWydfkin5j2Gt6bqmqavfompXkcNzo+omaRbm2uEkAnUy&#xA;FisqNCzbgEqK1p1rlkF05ENNLg4jt5eT6jZQwIIqDsRiwSW4i9KZk7Dp8jilTAJIA6npiqdQQrDE&#xA;EHX9o+JxQkuraw0V69oJ1hZFDlAwDlW6N40qDmh7Q1OYTMY2IjudvotLCUOKrKVeTvMlrqeu3tki&#xA;uJraH1ebVo6PK0YbcdzGcs7N0xjLjJ5j9Se0TUAPx1Zk6K6lWFVOxGbp06SSxmORkP7JpilpELuF&#xA;HVjQfTiqdxRrHGEXoMUPmX8/rfWvOPmnVdPstQkk07y/BCltpsan0pL5ijTBjUAskcy/F26fzZGW&#xA;YQIB6t2LSSyxkR05eZeWeQfMnm78sPM8Guzadcx2ZZra/s5Q8KToQfgLEEclI5IadR4Vy0TjLkXG&#xA;linj3kCH21oGt6Z5m8u2Ws2BLWOowrPDzFHXkPssN6Mp2PvkCGQKHdSjlT1U0P0Ysm4YzJIqD9o4&#xA;qnaIqKFUUUbAYofN/wCcn5SP5p8661Np3pw63PLZTie4kKxG2+pNEEAHL4mltTsE6b1pkTm4Tvyc&#xA;mGi8SO31fo3/AFPOfInnTzb+TvmFjfQG80u6Mlte6csx9P1YmT1Gj/Y9WKtK0INSK+FoIlycOeOW&#xA;M7vsLRNa0rzP5es9Y02T1bG/iE1u52YV6qwFaMrVVh2OQLIFDEEEg9R1xZKlvF6syp2PX5DFU5AV&#xA;VAGwHQYoeWaH5vuL24vBfweikLuDIOPFXDEmMkO5JCFTyAp1+WcxqdJvcer1GPHIiq5fezHyt5o0&#xA;zUdLiuYJS9rLUwTUNCtad96eGZuk1Ywjw8uxDrNXpDI8cNwU9uoVnhNNyBVD/n45uQbdVySfCl2K&#xA;uxVdHT1Fr0qK/fiqZ6peGx0y7vQvM2sMk3Hx9NC1PwxYvgzyzf8AmrUPMt1ri2n6WmvJGfUTcErG&#xA;7PIsu8lVoyuqstD26EbZaTEVbDEZA2H0P501/wAw6dpE2taZp8l7fRWwTTrmGeKW2imbki3KwyD1&#xA;PWVZG6KQR8NTmuxSjKVXXl19zvdRkIgTV7d+3v8Aezv8mfzCuPPXkqPVbyAW+p2s72OpRqCqGeJV&#xA;YsoO4DLIpp2NRmaRTpImwyfU6euvjxFfvOBmFC2p9Yjr/MP14qnE00UMTzTOscUalpJHIVVUCpJJ&#xA;2AGIFoeaeZNU8n6/qRvdEcan5g0+FlIiDhRbhvjpIy8DuR0NPHxyrW6ScYcRBAdn2VqRx8O3Wv1K&#xA;X5fa75bsb25fUrv9G6lKPS+r6gyLL6fMyKPVBaNkBY8PjJ65HSaWZHGN4+TPtTUx2hREuZv41971&#xA;IEEAg1B3BGXupSrUafWT8hXFIW2VPrUdfE/qOKqPnvVtQ0fyVruq6cvO/sbG4ntRx5gSRxllYr3C&#xA;kVphDE8nzJ+WJ803lrdXWow3r6k15+kfro9KW4uUuPSimgKzOvHmY0+MjYVoRmDrZRB5ju+92PZG&#xA;pBuAviB4tu7axv7hurfnh5V81XVtaT21rbG1uis88CNW89WFGRQ7E8GRUk2EZ+0T165X2fqIEkb7&#xA;fJPbeaiLoA/Ox+h6B/zih5r1LUfKepeXb5CP8OzRrbMV4sIroyN6bbCpSSN+u++bOTqsZsPWr2n1&#xA;qSniP1ZFtX6dT6yPkaYqUXqmp2emWUl5dvwhjG9NySeiqO5OW4cMskhGPMsZSAFsCu71vM94NS06&#xA;3t7RdMcepfXyh3jEyMhaKhRIyUUqxZ6bjr0yzW9mSxcNeqU+g8nN0WsFUaAj1Pm8a/OHyK3mXVEv&#xA;NGvDNNbiRXe7lkdZeTcgIaqBEi7hU4071zPxdjTGMGxxd37XX6rUeJMnenpP/OLEt8n5eXul3ytF&#xA;c6Vqk9v6D9UVo4pfuLyN0+eavLAxlR5rjOz0m5p9Ykp/Mf15W2q+mU9dvHjt94xUonU5hDYTyFgg&#xA;Vd2JoADsd8xdbIjDKudN+ljxZAHid1q2mnWJ7yyubRdPUBJbp2dp2KklokjIVUWv7VTXw75Vh7N1&#xA;BiBKJs+6vj+p3ke0cW8jKIr338mX6P5n0K8S3jgkFu9wvK3t5aI7ivVRU1/Xmk1WgzYzK/UImiRy&#xA;UZxIRJ24xYtm1jqVotrGkknF1HEgg9vlm00evxDHESNEbOq1GkmZkgbIOSnNqdKmmbUG3Cawodir&#xA;sVd5n8xWul+Wri+mVZWK+ikD7h5HFApHh3PtgJpQLL51s7O1s7aO2tY1hgiHFI16AZWTbaBStU0p&#xA;XbrTAl6Z+T+qQ2FxPojKix6gDqEEqgLylChJQ3ieMX/CnDjne3cxyQrdnt1N6s7OPs9F+Qy1rUlJ&#xA;VgR1BqMVeZ/nh5xuJZYPLtqWjtuC3F6dx6jE/Anuq0qfenhm17PwiuMuNml0eTwTz28yTQSNFNGe&#xA;UcqEqykdww3GbIi+bRape6hf30omvrmW6mC8RJO7SMFBJpViTSpOCMRHYCkkk83vn5K+YZdR8pNa&#xA;XL8pdKk9FWY1PoFeUdf9XdR7DNNrsfDOx1cnDKwyeeT1ZWfxO3y7ZhNzUblHVx1U1xVI/wA0vMz6&#xA;doEdraPxuNT5JzHVYVA9SnueQX78rySoOJqsnDGh1YP5AGn+ldciBqEziGAsSKfA0i0I33aPf5DN&#xA;H2hxWP5o3/R+l2HYM8cCSfqJr4Vf6Ei80SzPrt4kkrSrDIyRVNQqg7IPZemZmlAGMUObqu0Zylnl&#xA;Zvdlf5N6xZWGo32mtCkb6j/pAnVQHeSFKcXI6/APh8PpzOxy6LpMm/C9Gkcu7OerGuXOwbgk9KVX&#xA;8Dv8u+Kse/MbUJC1tCtut7aIFaeIMQ4aVwiMOJ5D5075l6UxB/vJYsn8Jr0nvBvY99WD1TRq+ESj&#xA;172Et+hnVkElzbVNWiKrKvIVHinSvhm8jLWx6Ysg77lE/dL73HIwnrKPyP6mkj0QEDlc3Lnoiokd&#xA;T86yH8MZZNaRdYsY7yZS/RH70iOH+lL4AfrZt5BuBZS3cLWAsYblRMlT+8eRBxJfl8R+GgrTtmi1&#xA;M4SNjL40+pA9I+W32kt5gQL4eAfb+Pgn7EsxJ6k1OYqFW1m9KdXP2ejfI4qwT8xfOEk+qXWlWb0t&#xA;NIga4vXU/buGSsce3ZV3/wBb5Y58fojE88kgPhe7ndm7Snk6Y4E/Gtv0vDgCTQbk9BnTuhT3zafR&#xA;1C2tUNBZ28UYp2I3r+rNR2P6scpn+Oci7jtr05YwH8EIh6Z+WHmW41zT5LS8fneWPENKerxNXix8&#xA;WFKHOd7V7GEdRHgFQn9lc/2N+k194jxfVH7WfZsnBdih2KuxVLte0Oz1rT2s7qoFecUi9UcAgN79&#xA;cBFpBp5tqX5b+YrWQ/VkS9hFSHjZVag8Ucjf2FchwlmJBC23kLzTO4X6n6S1oXldFA96VLfcMeEp&#xA;4gz/AMseS7bSfRublhPqESFFcV4IGZieAPf46VxhCiT3sZTtkuWMHYqkHm7ybpnmW0Edx+5uov8A&#xA;ee7QAuv+SRtyX2rl+DUSxnbkwnASeT6l+VHnC0kYQW6XsQ3EsEijb/VkKNX5A5tYa7GeZpxzhkFK&#xA;y/K7zpdOoayFtGxoZZpEUL7lVLP9y4Za3GOtoGKT1fyL5OXyvp80X1hp7m8KNdMNo6x8uIQdaDmd&#xA;z1zV6nUeIfIORjx8LJcxmx2KpH5p8q2mv26K7mG5hr6E43AB6hlqKg0yEoW05sAmPN5/N5A822Vw&#xA;JLeJZjEwaOaGRRQg1BAco34ZRLESKLg/l8kTY6N2/wCX3mq+uGkuo0tzIxaSWZ1JJY1Y0Tka4xxE&#xA;Ck/l8kjZ6s+8s+UtP0KImM+tdyCktywoafyqN+Iy+MAHNw4BD3p7k252KpH5i8sRatwnilNtexFS&#xA;kwrQ8DyUNT37jM7S6zwxwSHFjPRhKFmxsWP3Oleb4yVkhjvFGwkZYpa/8GOf35l48Wg5wMsflGU4&#xA;/ca+SnNm61L3gFuLRPONyhjVk09WG0i+nHSntEOWRyY9BHcg5Jf0jKX+6NKM2Y8jw+6h9zK9H0a3&#xA;0yEqjGWeTea4f7Tn8aD2zB1GpOQ8uGI5AcgmMa8ymGYzJ2KpDq/lOyvJprmBEjubgAXAZRwl41AL&#xA;0HXfrvlOoxSyVRIMeTsNDrRhsGIlGXNIm8sXkBNLJaVoGjCGtO/w7/fmtnp8/eT8XfY+0NJV7R/z&#xA;WN3f5X+Y9Y16e4uOFlZOVpK7B3KhQvwopO+37RGdJodRHDgjAj1D9by3aVZs8pg+k/qekeWvK+le&#xA;XrH6rYoSzkNPO9DJIw7sR2HYdsoy5pZDZaYxAGyb5Ul2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kq9ratO3gg6t/AYqlPn/wA9&#xA;eWfy/wBA/S+rq7q7iG2t4grTTSkFuK8ioAopJNaD7sIFsZSpgWl/85Vfljex266hBeWE0zFZQ8Ky&#xA;xxCtAzOhqRTf4VJw8BYDIHrd1p4oXh7dU/pkW20BirsVRFpZtMeR+GMd/H5Yql/mTz15C8pcE13V&#xA;bWwlcckhkbnMV/mEaB5Ke9MIDEypglp/zk9+Vl/rkOkpHf8AG4mWCO/e3QW5LtxVv7z1gpJ/33h4&#xA;Cx8QPULuw4gvF0HVf6ZFstBYq7FUVaWRl+N9o+3icVUdS8x+XdIk9CeQeuOscal2H+tTp9JyjJqI&#xA;QNE7uZp9Bmyi4jZX07WNF1YUtnV3ILcGHFqDY/dXfHFqIZNgd2Go0eTF9Qbu7H0wZI907juMvca0&#xA;HirsVRlpY+oBJJsh6DucVt5z+Y359+XPInmMeX5NIub+7WBbiZ4OCqqsCQPiqzUVansMkI21mdFP&#xA;vy6/NfyV+YcU66T6kN9aqHubC6RUmVGNOalC6svLaobbuBUYDGkxlbJruyMPxpvH38RgZoXFXYqj&#xA;rSwDKHl6Hon9cVtj9/8Amd5I07zPL5Wa4rr0KoTZLG1WMiCRUViOLNwcNQHp1ynNlMBdWPhQ97PF&#xA;ATNXum+l63pOrzS2yoIruIcnt3aIyca05UjdzQGnXDiyiYsfcf0hOTGYGivu7NoDyHxRnofD55a1&#xA;ofFXYq7FXYqncEQiiVB2G/z74oeT/m35C82+bdK80W12BLoVpJpGo6K6PGrRCD1otRXixHxCKVpK&#xA;nY7CvYWQ35c2uQuQvkwvyv8Akz5H0bXdIs9V01tVm9aWQyTFxzUTwwxOwSURsiNKpKFNwd8ox5TI&#xA;uxz6KMIef7Q+j8m4SU38QjuDTow5DFIUFUswUdSaDFU5LQ21uWd1jhiUs8jEKqqoqWYnYDucUPij&#xA;zNFp/wCYv5x67Ja30l1aXLk6e8QQSTrEEiVIVmaJfhWrAEioXtWonKXDFjhxeJOnrfkn8r38qWWi&#xA;wGb6xqn1yCed1R2iX0pmllKMaKheLih5daGm52xDms27iGi4IcJ5l9AZkOpSe7iEdwyj7PUfTilT&#xA;iTnIqfzEDFU7VQqhRsAKAYoeKLpHmCW8uUvTEJoJLhpiWq8qlkeORdugR+LdfizUZMG231PX4NUR&#xA;Ig/R093T7FXQNYWwvrW8Tk0Cy82qjxvxBaKQcJAjKTvswBymIOLICejdliNThNdR1euWOraZqCVt&#xA;LmOcEVZFI5AH+ZTuPpGbqGSMuReQzafJj+oEIC4j9OZ07A7fI7jJtTreP1JkQ9Cd/kN8VToAAUHT&#xA;FDyTzn5Vt5PN+r+YLrTlmElvDYzRu1VnsXjdJqEfFGayAv2Kp47jHnkN07TS6ePDx875/pST8qPy&#xA;h0PQPOWn+YNDu72e0ktWl9cSoLaRJoyvAoF9R4yWWReTbEL9rek455E0Q0ZtFjhDjB7vte6soZSp&#xA;FQdiMtcJJJEKSMh/ZJGKVSziElwqn7I3P0YqnGKHz753s28w+YtS0+WeGHV4pri40qaWON51VVi9&#xA;GVaR81RG+DnyBJWnxUzXSyVIy6dXoYacTxjHsJVY+Q3919Xo35Z213d2y6xcGSCNUa3hseLworBv&#xA;jb0ikPw7fBVK0O5Pa3TQFk1/ncyfjZPv3+A66vV8Uaifl+yh8NmdSIsiMjdGFMzHCSNgVYqeoNDi&#xA;l2KuxVtTRgfA4qno33xQwTUfN+qXk0lnbMsGmXVYbhGUFmiYU+InxruAen35u59nDHhkdzkro1YM&#xA;glliJfTaSi81qxv5JHs4ImndWW8guHmDFB9owSRqsR+EVoWr4mma3srRxyzPFdRHJ23aOolCFCvV&#xA;1v8AQ9A8uaydUsTJIAJ4m4ShelaAg09wcnrdN4U6HIuqxz4gv1Qj1UHcLv8AScw20IaEgTRk9AwJ&#xA;+/FWI/8AORB1v/lU2srpCuzv6S3giBZ/qpkX1qAb0p9r/Jrko82ufJ8qaH+V99dRpPqc/wBTRqH0&#xA;FXnLT3qQFP35CWcDk4Ms4HJ9TnVbawLeY7O6ubvTYohMNPYxC3cvJHEfjaOSWOSJpRVA/HbpQg5i&#xA;RIBqnotTrAdP4sD5Ee/7WW+V/PGi+YlKWzGG8QVe0loHp/MtNmHy+nMqMwXUYs0Z8uaM1Eg3NPAA&#xA;H9eSbwpWhAuYyfGn34qnDuqIXY0VQSfkBU5CcxAWeSYxMjQYZq2jajc6009pMIrCeOM8IID9Zcgl&#xA;mX6wWYcPiI4rGGU1o2YnGJC4jYu7wGQj65AVt5/NINR8n36SEi7S6mIBkqTXl4cviBp8802XNGMq&#xA;u3cYtZEjlQS7SoNTs9dtEjR47r1UCqO4J36dVp1y7TzuQMWepMJYZX9NPTb4g3T07UH4Z0LxAbsC&#xA;BdJXvUfhipRWravYaTZPeX0npwpsO7Mx6Ko7k4CaYTmIiywm31TU/OT3sunsNJgsxEovG4uVLcyv&#xA;q8xw4nevvTfMaXqN9HK7N1nFcdx3Vv79uv8Aagb3zRrflLU1s5AmoK8SO88qlGkBLfEnHioWtafD&#xA;0p164IExNtPaWtImIjeufv7vx3sz8s+cdK1+MiAmG7QVktZCOQH8ykfaX3zJjMFx8WYT96pdEG4k&#xA;I/mP4ZJvVdNIFxTxUgfrxUovUtSstNtHu7yURQp1J6k9gB3OWYsMskuGIssSQObzLW7NtQkk8zW9&#xA;yLOwaMslhxHqSMJCpLvwYqHbfirD55j5tDEauOnscUq7/ea6fN3Gm18o4OM2eHbp8LPNE6P+Zt5b&#xA;ssV/bRyWw25QDg6j5V4n8PnnTZexYV+7NHz5Og/MEm5PQ9N1Ox1K1W6spRLC21R1B8GB3BzRZsMs&#xA;cuGQot4kDyS2YgzOR0LEj78qZLcVdirsVSPzr5g1qz0+GGyBiheqzXaH4x/KoP7NR3zbdlYMWSR4&#xA;tyOQaM0iOTzpbq9QkpcyLXcg0cf8OGp9GdIcYcVf+mr5oH4kM6clqAAWK/eBgERSKVtBm1Rr1G0i&#xA;R47mc8uUZK1ruS/t41yrUeFwEzA4WcbvZ6urTsifWJPVmCqJJKBeTAUJoNhXONmQSaFBzw3kVYh+&#xA;auv6qmmW1hAjx2lxX63cjo5HSKo6VG58fvyrKS4WskQKHJ5TlDr0XY6rqFisqW0xWKcATwsA8UgU&#xA;1HONwyNQ9KjCDSRIhEeXbDVL3VoI9MZo7pGDidSR6YH7ZI6UxiCTsyxRlKWz3EGQgGRzJJQcpCAC&#xA;xA60FB92Zbug2CQajqMVX3NzPLFO7bAKqKB0oSOR/CmaDtI5OKV/TW36fi7TRiFCufVLxJIEKBiE&#xA;PVamn3ZpuM1V7Oy4RdrcCVexkeK5WVFBK1Br4HNh2Zx+KOHl19zia0x8Mg/BEsxZix3JNTnUujcr&#xA;FWDDYg1GKvN/zH1DVbrW+F0hjtIlpZIDVSppyav8xPXMfITbrNUZcW/Jnv5TaaU8gatcAfvb1pwp&#xA;8VSIIv8AwxbLIx/dy+Lkdn7Tif6Q+9Jfz2tFGr6XfrutzbNEG8fSfl/zNx1HMFxtRGiw7yXp2oXO&#xA;twXFqzQpasJJbgdgP2fCrdKZVAElGngZS26PVSa75ku1XRyNHIrr1U1xV55571PUbzWnjuVMVvBt&#xA;axHpwP7fuWp/DOs7LxQjiBjuTz/U4eUm9038yQG18tC16GCOCJwP5k4hvvYE5x+hzDL2yZecq+ES&#xA;HcZYcOjA933sEz0F0TK/IA1ZNQknt3MdlxK3Fd1YkfCAP5h1r2+nNR2xPHwUfr6N2AG/JnWcy5bs&#xA;VdirsVWSxRyxtHKoeNxRkYVBB7EHDGRibGxUhjd95D06Zy9rK9qT+xT1EHyBIP45t8PbOSIqQ4vs&#xA;aZYAeSEt/wAuoUb97eEoSSVROJNfcs36stl23/Nj9rEafzZLpmj6fpkRS0iClvtyHd2+ZzVajVTy&#xA;m5H9TdGAjyRuY7J2KqV1a211A8FzGs0LijxuKg4CESiCKLDNQ/KvTppi9ldvaIf91MvqgfIlkP3k&#xA;5WcQcSWiB5GlG1/Ki2VwbrUHkTukUYQ/8EzP+rAMTEaIdSy/SdE0zSYDDYQCINTm3V2I/mY7nLRE&#xA;By4Y4xGyPws3Yq0QCKHcHtleTFGYqQsM4TMTYUmtlP2TT8c1WTseJ+mVfa50O0COYtuOBVDBqMGF&#xA;Nx03BqPuxxdkAfVK/gs+0CeQpUVQooBQZtMWGOMVEUHByZJTNkt5awdiqF1HTLHUbf6veRCWOtRW&#xA;oIPiCNxgIBYzgJCim/li/h0HSItKig9W1hLlWZqOfUcueW1DTlQe2SiaFNUcHDyKWeZbGx8wWen2&#xA;l4jhNOLekytu6kBQrbfyqK06nwyBjYA7mebEMkuItWdla2dutvaxLDCnRF/WfE++ECmcYiIoK+FL&#xA;sVQt9ptjfxql3CsqqarXqD7EZdh1E8RuJpEog80PrekfpKyltxL6bykNzI5UIYN02zA0Gn/L6kZw&#xA;eLnt7wev7HLzajjxcFVy+xKLLyBYROGup3uKfsKPTU/Pdj+OdFl7amR6QI/a64YB1ZLBBDBEsMKL&#xA;HEgoqKKAZqJzMjcjZbwKVMirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVZz/uF/5dv+SeXbON6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ4&#xA;7L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/&#xA;AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf&#xA;+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6n&#xA;f7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ4&#xA;7L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/&#xA;AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf+Xb/AJJ47L6nf7hf&#xA;+Xb/AJJ47L6n/9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:b1ba18e7-e6ac-3e40-922d-0f2e73e30b31"
    stRef:documentID="xmp.did:b1ba18e7-e6ac-3e40-922d-0f2e73e30b31"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:b1ba18e7-e6ac-3e40-922d-0f2e73e30b31"
      stEvt:when="2021-12-13T18:49:14+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:07c8e731-8b1a-5c4f-b835-ab2f7977bf25"
      stEvt:when="2021-12-13T18:49:16+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="671.080483"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
671.081 400 li
671.081 0 li
cp
clp
671.08 400 mo
-7.36225e-06 400 li
-7.36225e-06 0 li
671.08 0 li
671.08 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.847059 .772549 .74902 rgb
f
133.786 79.0498 mo
133.786 83.1899 133.246 87.21 132.226 91.0298 cv
129.846 100 124.866 107.91 118.125 113.89 cv
117.686 114.29 117.226 114.68 116.766 115.06 cv
115.085 116.46 113.295 117.73 111.416 118.87 cv
110.596 119.37 109.766 119.85 108.916 120.3 cv
108.676 120.43 108.436 120.55 108.186 120.67 cv
101.875 123.87 94.7256 125.67 87.1655 125.67 cv
84.5854 125.67 82.0557 125.46 79.5854 125.05 cv
77.8154 124.77 76.0854 124.38 74.3857 123.9 cv
68.7554 122.3 63.5654 119.67 59.0254 116.23 cv
57.9355 115.4 56.8857 114.52 55.8657 113.6 cv
54.1558 112.06 52.5557 110.38 51.0957 108.6 cv
50.5957 107.99 50.1055 107.36 49.6455 106.72 cv
43.9258 98.98 40.5454 89.4102 40.5454 79.0498 cv
40.5454 53.2998 61.4155 32.4302 87.1655 32.4302 cv
112.916 32.4302 133.786 53.2998 133.786 79.0498 cv
cp
.929412 .866667 .839216 rgb
f
257.966 79.0498 mo
257.966 87.5601 255.686 95.54 251.696 102.41 cv
251.545 102.67 251.386 102.93 251.226 103.19 cv
250.855 103.81 250.466 104.43 250.056 105.03 cv
249.886 105.28 249.716 105.53 249.525 105.78 cv
249.306 106.1 249.076 106.42 248.835 106.73 cv
247.275 108.87 245.516 110.86 243.605 112.69 cv
240.576 115.61 237.136 118.12 233.396 120.13 cv
230.426 121.72 227.275 123.01 223.966 123.94 cv
223.746 124 223.516 124.06 223.295 124.12 cv
219.486 125.13 215.476 125.67 211.346 125.67 cv
208.025 125.67 204.795 125.32 201.676 124.66 cv
199.775 124.27 197.916 123.75 196.105 123.12 cv
189.525 120.85 183.605 117.14 178.736 112.35 cv
176.476 110.15 174.446 107.7 172.676 105.07 cv
171.886 103.92 171.156 102.72 170.486 101.5 cv
166.815 94.8398 164.726 87.1899 164.726 79.0498 cv
164.726 53.2998 185.596 32.4302 211.346 32.4302 cv
237.096 32.4302 257.966 53.2998 257.966 79.0498 cv
cp
f
382.146 79.0498 mo
382.146 88.29 379.456 96.9102 374.815 104.15 cv
373.825 105.7 372.746 107.19 371.575 108.61 cv
371.445 108.78 371.315 108.94 371.176 109.1 cv
370.315 110.12 369.405 111.11 368.466 112.05 cv
366.945 113.57 365.315 114.99 363.586 116.28 cv
363.535 116.32 363.485 116.35 363.436 116.39 cv
363.075 116.67 362.706 116.93 362.336 117.19 cv
361.896 117.51 361.445 117.81 360.985 118.11 cv
360.886 118.18 360.785 118.24 360.676 118.3 cv
359.416 119.12 358.105 119.88 356.756 120.56 cv
356.445 120.72 356.136 120.88 355.815 121.03 cv
354.365 121.73 352.876 122.36 351.355 122.91 cv
349.336 123.64 347.256 124.24 345.115 124.68 cv
342.016 125.33 338.815 125.67 335.525 125.67 cv
334.875 125.67 334.216 125.66 333.565 125.63 cv
332.815 125.6 332.076 125.55 331.335 125.48 cv
331.286 125.48 331.246 125.47 331.196 125.47 cv
329.806 125.34 328.426 125.15 327.076 124.89 cv
326.295 124.75 325.525 124.59 324.766 124.41 cv
322.545 123.89 320.396 123.21 318.315 122.37 cv
316.505 121.66 314.755 120.83 313.056 119.89 cv
313.016 119.87 312.986 119.85 312.946 119.83 cv
312.746 119.72 312.545 119.61 312.355 119.49 cv
311.746 119.15 311.136 118.79 310.545 118.41 cv
309.996 118.07 309.466 117.71 308.936 117.34 cv
307.986 116.69 307.056 115.99 306.156 115.25 cv
306.045 115.17 305.946 115.09 305.835 115 cv
304.565 113.94 303.346 112.82 302.186 111.64 cv
301.855 111.31 301.536 110.97 301.226 110.63 cv
300.486 109.84 299.775 109.01 299.116 108.17 cv
298.966 107.99 298.826 107.82 298.686 107.64 cv
298.666 107.62 298.656 107.6 298.646 107.58 cv
297.866 106.58 297.136 105.55 296.446 104.49 cv
291.676 97.1699 288.896 88.4399 288.896 79.0498 cv
288.896 53.2998 309.775 32.4302 335.525 32.4302 cv
361.275 32.4302 382.146 53.2998 382.146 79.0498 cv
cp
f
506.325 79.0498 mo
506.325 88.2598 503.655 96.8501 499.035 104.09 cv
498.746 104.54 498.456 104.99 498.146 105.43 cv
496.666 107.59 495.006 109.61 493.186 111.49 cv
492.615 112.08 492.035 112.65 491.436 113.2 cv
491.155 113.46 490.876 113.71 490.596 113.95 cv
489.235 115.17 487.796 116.3 486.285 117.35 cv
484.096 118.87 481.766 120.22 479.315 121.35 cv
478.726 121.63 478.136 121.89 477.535 122.14 cv
475.476 122.99 473.355 123.7 471.166 124.25 cv
468.405 124.95 465.546 125.4 462.615 125.58 cv
462.376 125.6 462.126 125.61 461.886 125.62 cv
461.166 125.65 460.436 125.67 459.706 125.67 cv
459.346 125.67 458.976 125.67 458.605 125.66 cv
453.136 125.53 447.896 124.47 443.056 122.61 cv
441.496 122.02 439.976 121.34 438.496 120.58 cv
436.636 119.63 434.846 118.56 433.146 117.37 cv
432.605 117 432.075 116.62 431.565 116.22 cv
430.766 115.62 429.985 114.99 429.235 114.34 cv
429.046 114.18 428.855 114.01 428.676 113.84 cv
427.936 113.18 427.216 112.5 426.516 111.8 cv
426.115 111.39 425.716 110.97 425.325 110.54 cv
424.945 110.12 424.565 109.7 424.206 109.27 cv
423.075 107.95 422.016 106.56 421.035 105.11 cv
416.006 97.6699 413.075 88.7002 413.075 79.0498 cv
413.075 53.2998 433.956 32.4302 459.706 32.4302 cv
485.445 32.4302 506.325 53.2998 506.325 79.0498 cv
cp
f
630.506 79.0498 mo
630.506 86.2402 628.876 93.0601 625.966 99.1401 cv
622.246 106.91 616.436 113.49 609.266 118.16 cv
607.056 119.6 604.706 120.85 602.256 121.91 cv
596.615 124.33 590.405 125.67 583.886 125.67 cv
578.006 125.67 572.376 124.58 567.195 122.59 cv
563.506 121.18 560.056 119.31 556.886 117.06 cv
552.985 114.29 549.525 110.92 546.646 107.11 cv
540.746 99.2998 537.256 89.5801 537.256 79.0498 cv
537.256 53.2998 558.136 32.4302 583.886 32.4302 cv
609.626 32.4302 630.506 53.2998 630.506 79.0498 cv
cp
f
116.766 115.06 mo
115.085 116.46 113.295 117.73 111.416 118.87 cv
110.596 119.37 109.766 119.85 108.916 120.3 cv
108.676 120.43 108.436 120.55 108.186 120.67 cv
101.875 123.87 94.7256 125.67 87.1655 125.67 cv
84.5854 125.67 82.0557 125.46 79.5854 125.05 cv
77.8154 124.77 76.0854 124.38 74.3857 123.9 cv
68.7554 122.3 63.5654 119.67 59.0254 116.23 cv
57.9355 115.4 56.8857 114.52 55.8657 113.6 cv
54.1558 112.06 52.5557 110.38 51.0957 108.6 cv
50.5957 107.99 50.1055 107.36 49.6455 106.72 cv
52.7456 101.97 57.9756 95.9102 65.7954 92.77 cv
67.9658 91.9102 70.2954 91.27 72.8354 90.9399 cv
72.9858 90.9199 73.1255 90.8999 73.2754 90.8901 cv
73.5054 90.8599 73.7358 90.8398 73.9556 90.8198 cv
73.9756 90.8101 73.9858 90.8101 74.0054 90.8101 cv
74.2056 90.79 74.3955 90.7798 74.5854 90.77 cv
74.8857 90.75 75.1758 90.73 75.4355 90.7202 cv
76.0654 90.6699 76.7056 90.6201 77.3154 90.6001 cv
94.6758 89.9302 103.916 96.8198 104.456 97.23 cv
104.505 97.2598 104.536 97.2998 104.565 97.3398 cv
104.736 97.5298 105.156 97.98 105.766 98.6899 cv
108.036 101.31 112.866 107.32 116.766 115.06 cv
cp
.27451 .27451 .498039 rgb
f
567.195 122.59 mo
563.506 121.18 560.056 119.31 556.886 117.06 cv
552.985 114.29 549.525 110.92 546.646 107.11 cv
551.296 97.6401 560.956 81.6001 573.025 81.6401 cv
586.306 81.73 573.556 109.98 567.195 122.59 cv
cp
.988235 .701961 .356863 rgb
f
133.786 200.09 mo
133.786 204.96 133.045 209.66 131.656 214.07 cv
129.536 220.81 125.936 226.89 121.226 231.92 cv
121.125 232.04 121.025 232.15 120.916 232.26 cv
120.795 232.38 li
120.696 232.49 120.585 232.6 120.486 232.7 cv
117.686 235.56 114.516 238.07 111.045 240.13 cv
104.065 244.31 95.8955 246.71 87.1655 246.71 cv
85.3857 246.71 83.6157 246.61 81.8857 246.42 cv
81.6455 246.4 81.4155 246.37 81.1855 246.34 cv
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
78.9258 246.04 76.7656 245.6 74.6655 245.01 cv
72.1958 244.33 69.8057 243.44 67.5254 242.38 cv
67.1758 242.22 66.8257 242.05 66.4756 241.88 cv
64.2256 240.77 62.0854 239.48 60.0757 238.03 cv
58.0557 236.59 56.1558 234.99 54.3955 233.24 cv
52.5054 231.38 50.7754 229.34 49.2353 227.18 cv
48.8555 226.64 48.4756 226.1 48.1157 225.54 cv
47.2158 224.18 46.3955 222.77 45.6558 221.32 cv
42.3857 214.95 40.5454 207.74 40.5454 200.09 cv
40.5454 174.34 61.4155 153.47 87.1655 153.47 cv
112.916 153.47 133.786 174.34 133.786 200.09 cv
cp
.929412 .866667 .839216 rgb
f
257.966 200.09 mo
257.966 208.99 255.466 217.31 251.146 224.39 cv
250.396 225.62 249.585 226.8 248.736 227.95 cv
246.456 231 243.806 233.76 240.866 236.18 cv
239.775 237.07 238.646 237.92 237.476 238.71 cv
236.616 239.29 235.736 239.85 234.835 240.37 cv
229.755 243.34 224.065 245.37 217.986 246.24 cv
216.116 246.51 214.216 246.66 212.275 246.69 cv
211.966 246.71 211.656 246.71 211.346 246.71 cv
207.585 246.71 203.916 246.26 200.416 245.42 cv
195.306 244.19 190.516 242.12 186.216 239.36 cv
184.656 238.37 183.166 237.28 181.746 236.09 cv
179.736 234.45 177.866 232.63 176.156 230.66 cv
175.375 229.75 174.616 228.82 173.906 227.86 cv
173.746 227.65 173.596 227.45 173.446 227.24 cv
171.736 224.85 170.236 222.29 168.996 219.59 cv
166.246 213.65 164.726 207.04 164.726 200.09 cv
164.726 174.34 185.596 153.47 211.346 153.47 cv
237.096 153.47 257.966 174.34 257.966 200.09 cv
cp
f
382.146 200.09 mo
382.146 206.35 380.916 212.32 378.676 217.77 cv
377.035 221.76 374.855 225.48 372.226 228.83 cv
366.186 236.54 357.766 242.3 348.065 245 cv
344.075 246.12 339.865 246.71 335.525 246.71 cv
333.875 246.71 332.246 246.63 330.636 246.46 cv
329.585 246.35 328.545 246.2 327.516 246.02 cv
326.375 245.82 325.255 245.58 324.146 245.3 cv
323.936 245.25 323.716 245.2 323.505 245.14 cv
321.726 244.67 319.976 244.09 318.286 243.41 cv
315.306 242.23 312.466 240.74 309.826 238.99 cv
309.005 238.45 308.196 237.88 307.416 237.29 cv
305.855 236.11 304.375 234.84 302.976 233.47 cv
299.646 230.23 296.815 226.5 294.576 222.4 cv
290.956 215.77 288.896 208.17 288.896 200.09 cv
288.896 174.34 309.775 153.47 335.525 153.47 cv
361.275 153.47 382.146 174.34 382.146 200.09 cv
cp
f
506.325 200.09 mo
506.325 208.46 504.115 216.32 500.246 223.12 cv
499.126 225.09 497.865 226.97 496.466 228.75 cv
494.496 231.29 492.256 233.61 489.796 235.69 cv
488.416 236.86 486.956 237.96 485.436 238.97 cv
484.155 239.82 482.836 240.6 481.466 241.33 cv
481.166 241.49 480.865 241.64 480.556 241.79 cv
478.646 242.76 476.655 243.59 474.605 244.28 cv
469.926 245.85 464.916 246.71 459.706 246.71 cv
450.865 246.71 442.596 244.25 435.556 239.97 cv
435.246 239.79 434.936 239.59 434.626 239.39 cv
434.546 239.35 434.476 239.3 434.396 239.25 cv
431.445 237.34 428.726 235.11 426.285 232.6 cv
425.836 232.13 425.386 231.65 424.945 231.16 cv
424.436 230.6 423.945 230.02 423.466 229.43 cv
422.086 227.73 420.825 225.93 419.695 224.05 cv
415.496 217.04 413.075 208.85 413.075 200.09 cv
413.075 174.34 433.956 153.47 459.706 153.47 cv
485.445 153.47 506.325 174.34 506.325 200.09 cv
cp
f
77.6499 181.585 mo
77.6499 181.585 62.5937 187.344 61.8262 204.384 cv
60.7163 229.014 90.2329 223.304 90.2329 223.304 cv
90.2329 223.304 106.951 225.038 111.575 212.714 cv
116.2 200.389 101.336 192.95 101.336 192.95 cv
101.336 192.95 83.313 177.08 77.6499 181.585 cv
cp
0 0 0 rgb
f
473.539 176.167 mo
473.539 176.167 484.16 177.907 488.022 191.229 cv
491.885 204.551 489.602 221.789 489.602 221.789 cv
469.998 215.902 li
470.85 192.243 li
473.539 176.167 li
cp
f
630.506 200.09 mo
630.506 202.4 630.336 204.68 630.016 206.9 cv
629.905 207.64 629.775 208.36 629.646 209.08 cv
628.676 214.02 626.936 218.68 624.546 222.92 cv
623.086 225.51 621.386 227.95 619.466 230.2 cv
618.945 230.82 618.405 231.42 617.855 232.01 cv
615.546 234.47 612.976 236.68 610.176 238.59 cv
608.016 240.07 605.726 241.37 603.325 242.47 cv
601.586 243.27 599.785 243.97 597.926 244.55 cv
595.886 245.2 593.775 245.71 591.615 246.07 cv
589.105 246.49 586.516 246.71 583.886 246.71 cv
575.346 246.71 567.346 244.42 560.466 240.41 cv
559.296 239.74 558.166 239.01 557.065 238.23 cv
556.956 238.15 556.836 238.07 556.726 237.99 cv
555.945 237.43 555.176 236.84 554.436 236.23 cv
554.396 236.2 554.355 236.17 554.315 236.13 cv
552.466 234.62 550.735 232.96 549.136 231.17 cv
548.146 230.06 547.206 228.9 546.315 227.7 cv
540.615 219.97 537.256 210.42 537.256 200.09 cv
537.256 174.34 558.136 153.47 583.886 153.47 cv
609.626 153.47 630.506 174.34 630.506 200.09 cv
cp
.929412 .866667 .839216 rgb
f
134.516 320.46 mo
134.516 328.47 132.496 336.01 128.926 342.59 cv
128.096 344.15 127.156 345.66 126.146 347.11 cv
123.236 351.3 119.636 354.99 115.525 358 cv
115.505 358.03 115.476 358.04 115.456 358.06 cv
115.186 358.26 114.916 358.46 114.636 358.64 cv
109.576 362.2 103.775 364.77 97.5156 366.08 cv
94.4155 366.74 91.1958 367.08 87.8955 367.08 cv
80.3257 367.08 73.1855 365.28 66.8657 362.07 cv
63.2158 360.23 59.8457 357.92 56.8257 355.22 cv
55.2056 353.76 53.6758 352.2 52.2656 350.53 cv
51.6255 349.78 51.0156 349.01 50.4355 348.22 cv
48.8857 346.14 47.5054 343.93 46.3154 341.6 cv
43.0854 335.25 41.2656 328.07 41.2656 320.46 cv
41.2656 294.71 62.1455 273.83 87.8955 273.83 cv
113.636 273.83 134.516 294.71 134.516 320.46 cv
cp
f
258.696 320.46 mo
258.696 328.35 256.736 335.77 253.275 342.28 cv
251.826 345.02 250.116 347.59 248.166 349.97 cv
246.966 351.44 245.676 352.83 244.306 354.14 cv
243.275 355.13 242.196 356.07 241.076 356.96 cv
239.736 358.03 238.335 359.03 236.875 359.93 cv
236.335 360.28 235.786 360.61 235.226 360.93 cv
228.406 364.84 220.505 367.08 212.076 367.08 cv
210.326 367.08 208.596 366.98 206.906 366.79 cv
205.886 366.68 204.875 366.54 203.875 366.36 cv
201.766 365.99 199.706 365.47 197.706 364.81 cv
197.275 364.67 196.846 364.53 196.426 364.37 cv
190.766 362.37 185.616 359.3 181.206 355.39 cv
179.366 353.77 177.656 352 176.096 350.11 cv
169.436 342.06 165.446 331.72 165.446 320.46 cv
165.446 294.71 186.326 273.83 212.076 273.83 cv
237.815 273.83 258.696 294.71 258.696 320.46 cv
cp
f
240.866 236.18 mo
239.775 237.07 238.646 237.92 237.476 238.71 cv
236.616 239.29 235.736 239.85 234.835 240.37 cv
229.755 243.34 224.065 245.37 217.986 246.24 cv
216.116 246.51 214.216 246.66 212.275 246.69 cv
211.966 246.71 211.656 246.71 211.346 246.71 cv
207.585 246.71 203.916 246.26 200.416 245.42 cv
195.306 244.19 190.516 242.12 186.216 239.36 cv
184.656 238.37 183.166 237.28 181.746 236.09 cv
179.736 234.45 177.866 232.63 176.156 230.66 cv
175.375 229.75 174.616 228.82 173.906 227.86 cv
177.085 220.33 182.896 209.54 190.815 206.9 cv
203.286 202.74 229.855 208.6 229.855 208.6 cv
229.855 208.6 238.956 213.02 240.866 236.18 cv
cp
.27451 .27451 .498039 rgb
f
382.876 320.46 mo
382.876 327.54 381.296 334.24 378.476 340.25 cv
377.405 342.54 376.146 344.73 374.716 346.8 cv
373.325 348.84 371.775 350.75 370.075 352.54 cv
365.416 357.46 359.686 361.36 353.266 363.87 cv
353.046 363.96 352.836 364.04 352.626 364.12 cv
347.525 366.04 342.016 367.08 336.255 367.08 cv
335.525 367.08 334.795 367.06 334.076 367.03 cv
325.426 366.63 317.386 363.88 310.596 359.39 cv
309.525 358.69 308.496 357.95 307.496 357.16 cv
303.706 354.19 300.386 350.64 297.666 346.64 cv
297.616 346.57 297.565 346.5 297.516 346.42 cv
292.536 339.01 289.625 330.08 289.625 320.46 cv
289.625 294.71 310.505 273.83 336.255 273.83 cv
361.996 273.83 382.876 294.71 382.876 320.46 cv
cp
.929412 .866667 .839216 rgb
f
496.466 228.75 mo
494.496 231.29 492.256 233.61 489.796 235.69 cv
488.416 236.86 486.956 237.96 485.436 238.97 cv
482.096 241.18 478.466 242.98 474.605 244.28 cv
469.926 245.85 464.916 246.71 459.706 246.71 cv
450.376 246.71 441.686 243.97 434.396 239.25 cv
431.445 237.34 428.726 235.11 426.285 232.6 cv
426.525 230.97 426.846 229.06 427.266 227.02 cv
427.476 226.02 427.706 224.98 427.966 223.92 cv
428.646 221.21 429.496 218.38 430.586 215.66 cv
430.966 214.72 431.376 213.79 431.806 212.89 cv
434.646 207.02 438.766 202.24 444.686 201.44 cv
444.916 201.41 445.155 201.38 445.386 201.35 cv
459.876 199.52 474.825 201.99 478.476 202.67 cv
479.025 202.77 479.315 202.83 479.315 202.83 cv
479.315 202.83 485.025 206.05 490.235 214.22 cv
490.756 215.04 491.275 215.92 491.785 216.84 cv
493.046 219.14 494.246 221.77 495.256 224.74 cv
495.586 225.67 495.886 226.62 496.155 227.62 cv
496.266 227.99 496.365 228.37 496.466 228.75 cv
cp
.466667 .447059 .827451 rgb
f
507.056 320.46 mo
507.056 328.26 505.146 335.61 501.746 342.07 cv
501.716 342.14 501.686 342.2 501.646 342.27 cv
501.456 342.63 501.266 342.98 501.056 343.33 cv
495.825 352.62 487.496 359.93 477.466 363.86 cv
476.846 364.1 476.216 364.33 475.586 364.55 cv
475.016 364.75 474.445 364.94 473.876 365.11 cv
473.285 365.29 472.695 365.45 472.105 365.6 cv
470.115 366.12 468.075 366.5 465.985 366.75 cv
465.615 366.8 465.226 366.84 464.846 366.87 cv
463.396 367.01 461.916 367.08 460.426 367.08 cv
458.686 367.08 456.966 366.98 455.275 366.79 cv
453.206 366.57 451.166 366.2 449.186 365.71 cv
447.726 365.35 446.306 364.92 444.905 364.42 cv
444.676 364.34 444.436 364.26 444.206 364.17 cv
443.666 363.97 443.136 363.76 442.605 363.54 cv
441.216 362.97 439.865 362.34 438.556 361.63 cv
437.996 361.33 437.445 361.02 436.896 360.7 cv
436.756 360.62 436.615 360.54 436.476 360.45 cv
435.386 359.8 434.336 359.11 433.315 358.38 cv
432.695 357.94 432.086 357.48 431.496 357.01 cv
428.605 354.73 425.996 352.11 423.726 349.21 cv
423.405 348.8 423.086 348.38 422.775 347.95 cv
422.216 347.18 421.676 346.4 421.155 345.59 cv
416.496 338.34 413.806 329.72 413.806 320.46 cv
413.806 294.71 434.686 273.83 460.426 273.83 cv
486.176 273.83 507.056 294.71 507.056 320.46 cv
cp
.929412 .866667 .839216 rgb
f
631.235 320.46 mo
631.235 326.47 630.096 332.22 628.025 337.5 cv
627.115 339.83 626.016 342.07 624.735 344.2 cv
623.775 345.83 622.706 347.39 621.546 348.89 cv
621.075 349.51 620.586 350.11 620.065 350.7 cv
617.186 354.1 613.815 357.08 610.065 359.52 cv
609.065 360.17 608.046 360.79 606.996 361.36 cv
603.376 363.35 599.466 364.87 595.346 365.83 cv
591.896 366.65 588.306 367.08 584.605 367.08 cv
583.815 367.08 583.035 367.06 582.266 367.02 cv
576.636 366.74 571.275 365.47 566.365 363.36 cv
566.235 363.31 566.115 363.26 565.985 363.2 cv
565.046 362.8 564.126 362.36 563.216 361.89 cv
561.695 361.11 560.226 360.24 558.815 359.3 cv
558.626 359.17 558.436 359.04 558.246 358.9 cv
556.546 357.75 554.926 356.48 553.405 355.09 cv
553.346 355.04 553.296 355 553.266 354.96 cv
553.146 354.86 553.025 354.75 552.905 354.63 cv
551.855 353.67 550.855 352.65 549.905 351.59 cv
549.865 351.54 549.815 351.49 549.775 351.44 cv
549.075 350.65 548.396 349.84 547.746 349.01 cv
541.636 341.13 537.985 331.22 537.985 320.46 cv
537.985 294.71 558.865 273.83 584.605 273.83 cv
610.355 273.83 631.235 294.71 631.235 320.46 cv
cp
f
476.956 357.63 mo
475.976 358.05 li
472.945 359.32 li
455.275 366.79 li
453.206 366.57 451.166 366.2 449.186 365.71 cv
447.726 365.35 446.306 364.92 444.905 364.42 cv
444.676 364.34 444.436 364.26 444.206 364.17 cv
443.666 363.97 443.136 363.76 442.605 363.54 cv
441.216 362.97 439.865 362.34 438.556 361.63 cv
437.996 361.33 437.445 361.02 436.896 360.7 cv
436.756 360.62 436.615 360.54 436.476 360.45 cv
435.386 359.8 434.336 359.11 433.315 358.38 cv
432.695 357.94 432.086 357.48 431.496 357.01 cv
428.605 354.73 425.996 352.11 423.726 349.21 cv
423.405 348.8 423.086 348.38 422.775 347.95 cv
428.615 338.9 439.886 324.46 453.346 322.65 cv
455.266 322.39 457.035 322.51 458.666 322.94 cv
462.636 323.98 465.775 326.85 468.246 330.52 cv
468.636 331.08 468.996 331.65 469.336 332.25 cv
475.436 342.64 476.956 357.63 476.956 357.63 cv
cp
.372549 .517647 .341176 rgb
f
120.795 232.38 mo
120.696 232.49 120.585 232.6 120.486 232.7 cv
117.815 235.42 114.815 237.83 111.536 239.83 cv
111.375 239.93 111.206 240.03 111.045 240.13 cv
110.835 240.26 110.616 240.39 110.396 240.51 cv
103.565 244.46 95.6255 246.71 87.1655 246.71 cv
85.3857 246.71 83.6157 246.61 81.8857 246.42 cv
81.6455 246.4 81.4155 246.37 81.1855 246.34 cv
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
78.9258 246.04 76.7656 245.6 74.6655 245.01 cv
72.1958 244.33 69.8057 243.44 67.5254 242.38 cv
67.1758 242.22 66.8257 242.05 66.4756 241.88 cv
64.2256 240.77 62.0854 239.48 60.0757 238.03 cv
58.0557 236.59 56.1558 234.99 54.3955 233.24 cv
57.7754 223.89 66.4258 206.46 84.5654 203.62 cv
84.6055 203.62 84.6455 203.61 84.6855 203.6 cv
85.8955 203.42 87.1558 203.3 88.4556 203.25 cv
108.916 202.5 117.585 221.77 120.795 232.38 cv
cp
.486275 .376471 .32549 rgb
f
448.696 301.707 mo
448.696 301.707 445.134 291.368 448.211 286.819 cv
450.958 282.76 464.455 284.913 469.253 288.028 cv
474.05 291.143 474.209 295.232 474.209 295.232 cv
474.209 295.232 476.559 295.854 477.104 297.875 cv
477.651 299.896 475.901 303.222 475.901 303.222 cv
475.901 303.222 473.52 300.198 470.112 302.125 cv
466.704 304.052 448.696 301.707 448.696 301.707 cv
cp
0 0 0 rgb
f
477.466 363.86 mo
476.846 364.1 476.216 364.33 475.586 364.55 cv
475.016 364.75 474.445 364.94 473.876 365.11 cv
473.285 365.29 472.695 365.45 472.105 365.6 cv
468.376 366.57 464.456 367.08 460.426 367.08 cv
458.686 367.08 456.966 366.98 455.275 366.79 cv
453.206 366.57 451.166 366.2 449.186 365.71 cv
447.726 365.35 446.306 364.92 444.905 364.42 cv
444.676 364.34 444.436 364.26 444.206 364.17 cv
443.666 363.97 443.136 363.76 442.605 363.54 cv
441.216 362.97 439.865 362.34 438.556 361.63 cv
439.146 356.17 439.676 352.49 439.676 352.49 cv
453.346 322.65 li
458.666 322.94 li
458.676 322.94 467.056 323.39 467.056 323.39 cv
467.065 323.42 467.075 323.45 467.075 323.48 cv
467.086 323.51 469.336 332.25 469.336 332.25 cv
475.976 358.05 li
477.466 363.86 li
cp
1 1 1 rgb
f
467.152 316.516 mo
467.694 325.545 li
467.694 325.545 464.295 328.332 460.519 328.523 cv
455.42 328.782 453.488 324.904 453.488 324.904 cv
453.525 315.691 li
467.152 316.516 li
cp
.988235 .639216 .592157 rgb
f
466.823 317.818 mo
466.823 317.818 465.252 324.008 459.398 323.333 cv
454.682 322.79 453.186 316.516 453.186 316.516 cv
466.823 317.818 li
cp
0 0 0 rgb
f
450.168 295.932 mo
450.168 295.932 447.924 310.109 452.73 316.698 cv
457.537 323.286 463.422 321.107 466.021 318.967 cv
469.527 316.078 470.136 312.215 470.136 312.215 cv
470.136 312.215 475.115 313.033 476.629 308.944 cv
478.219 304.648 475.023 301.332 472.543 301.214 cv
470.062 301.095 469.788 301.555 469.788 301.555 cv
470.362 297.005 li
470.362 297.005 454.758 280.792 450.168 295.932 cv
cp
.988235 .639216 .592157 rgb
f
452.773 302.453 mo
452.773 302.453 445.168 299.504 444.779 305.33 cv
444.329 312.079 452.37 311.871 452.37 311.871 cv
452.773 302.453 li
cp
f
471.012 301.961 mo
471.012 301.961 468.435 303.14 462.779 299.291 cv
457.124 295.441 458.565 290.62 458.565 290.62 cv
458.565 290.62 451.177 295.6 449.683 301.564 cv
448.189 307.53 446.783 287.756 455.362 287.854 cv
463.942 287.952 476.949 293.102 471.012 301.961 cv
cp
0 0 0 rgb
f
453.346 322.65 mo
453.346 322.65 448.436 336.77 444.926 364.24 cv
444.916 364.3 444.905 364.36 444.905 364.42 cv
444.676 364.34 444.436 364.26 444.206 364.17 cv
443.666 363.97 443.136 363.76 442.605 363.54 cv
441.216 362.97 439.865 362.34 438.556 361.63 cv
437.996 361.33 437.445 361.02 436.896 360.7 cv
436.756 360.62 436.615 360.54 436.476 360.45 cv
435.386 359.8 434.336 359.11 433.315 358.38 cv
433.565 354.81 433.726 352.59 433.726 352.59 cv
453.346 322.65 li
cp
.372549 .517647 .341176 rgb
f
501.746 342.07 mo
501.716 342.14 501.686 342.2 501.646 342.27 cv
501.456 342.63 501.266 342.98 501.056 343.33 cv
495.825 352.62 487.496 359.93 477.466 363.86 cv
476.846 364.1 476.216 364.33 475.586 364.55 cv
475.016 364.75 474.445 364.94 473.876 365.11 cv
473.596 363.34 473.285 361.39 472.945 359.32 cv
471.556 350.73 469.815 339.99 468.246 330.52 cv
467.846 328.08 467.523 322.15 467.473 321.86 cv
467.473 321.86 486.206 320.99 501.075 341.13 cv
501.306 341.44 501.525 341.75 501.746 342.07 cv
cp
f
470.837 308.805 mo
470.722 308.805 470.606 308.766 470.513 308.686 cv
470.303 308.506 470.277 308.19 470.456 307.98 cv
473.691 304.186 li
473.872 303.976 474.188 303.951 474.396 304.129 cv
474.606 304.309 474.632 304.624 474.453 304.834 cv
471.218 308.629 li
471.118 308.745 470.979 308.805 470.837 308.805 cv
cp
0 0 0 rgb
f
474.407 307.651 mo
474.39 307.651 474.373 307.65 474.356 307.648 cv
471.974 307.409 li
471.698 307.382 471.498 307.137 471.526 306.862 cv
471.554 306.586 471.819 306.385 472.073 306.415 cv
474.456 306.654 li
474.731 306.682 474.932 306.927 474.903 307.201 cv
474.878 307.459 474.66 307.651 474.407 307.651 cv
cp
f
463.209 304.157 mo
462.936 304.157 462.712 303.938 462.709 303.663 cv
462.681 301.297 li
462.678 301.021 462.898 300.794 463.175 300.791 cv
463.454 300.791 463.678 301.011 463.681 301.285 cv
463.709 303.651 li
463.712 303.928 463.491 304.154 463.215 304.157 cv
463.213 304.157 463.211 304.157 463.209 304.157 cv
cp
f
454.399 304.601 mo
454.118 304.598 453.896 304.371 453.899 304.095 cv
453.926 301.729 li
453.929 301.454 454.152 301.234 454.426 301.234 cv
454.707 301.237 454.929 301.464 454.926 301.74 cv
454.899 304.106 li
454.896 304.381 454.673 304.601 454.399 304.601 cv
cp
f
449.283 308.56 mo
449.128 308.56 448.976 308.487 448.878 308.352 cv
446.117 304.523 li
445.955 304.3 446.006 303.987 446.23 303.826 cv
446.452 303.662 446.766 303.715 446.928 303.939 cv
449.688 307.768 li
449.851 307.991 449.8 308.304 449.575 308.465 cv
449.487 308.529 449.385 308.56 449.283 308.56 cv
cp
f
446.119 307.512 mo
445.873 307.512 445.658 307.329 445.625 307.078 cv
445.588 306.805 445.779 306.553 446.054 306.517 cv
448.248 306.221 li
448.515 306.172 448.773 306.375 448.81 306.649 cv
448.847 306.923 448.655 307.175 448.381 307.211 cv
446.187 307.507 li
446.164 307.511 446.142 307.512 446.119 307.512 cv
cp
f
458.902 311.363 mo
458.746 311.363 458.592 311.29 458.494 311.152 cv
456.494 308.333 458.066 304.662 458.134 304.507 cv
458.244 304.255 458.537 304.139 458.792 304.25 cv
459.045 304.36 459.16 304.655 459.05 304.908 cv
459.036 304.94 457.641 308.221 459.311 310.574 cv
459.47 310.799 459.417 311.111 459.191 311.271 cv
459.104 311.333 459.003 311.363 458.902 311.363 cv
cp
f
461.863 313.218 mo
462.133 313.281 462.417 313.294 462.623 313.169 cv
462.837 313.041 462.982 312.753 463.054 312.331 cv
461.863 313.218 li
cp
462.224 314.266 mo
461.433 314.266 460.702 313.838 460.594 313.771 cv
460.452 313.685 460.362 313.533 460.355 313.367 cv
460.348 313.201 460.423 313.043 460.556 312.943 cv
463.296 310.903 li
463.444 310.793 463.642 310.773 463.808 310.853 cv
463.975 310.931 464.085 311.095 464.094 311.279 cv
464.165 312.683 463.842 313.608 463.133 314.029 cv
462.843 314.202 462.528 314.266 462.224 314.266 cv
cp
f
452.993 299.913 mo
452.815 299.913 452.644 299.818 452.553 299.65 cv
452.422 299.407 452.513 299.104 452.756 298.973 cv
454.774 297.883 li
455.015 297.754 455.319 297.842 455.452 298.086 cv
455.583 298.329 455.492 298.632 455.249 298.764 cv
453.23 299.854 li
453.155 299.894 453.074 299.913 452.993 299.913 cv
cp
f
463.991 299.703 mo
463.931 299.703 463.869 299.692 463.81 299.669 cv
460.788 298.488 li
460.53 298.388 460.403 298.098 460.504 297.841 cv
460.604 297.582 460.894 297.455 461.151 297.557 cv
464.173 298.737 li
464.431 298.838 464.558 299.128 464.457 299.385 cv
464.38 299.583 464.191 299.703 463.991 299.703 cv
cp
f
234.835 240.37 mo
229.755 243.34 224.065 245.37 217.986 246.24 cv
216.116 246.51 214.216 246.66 212.275 246.69 cv
211.966 246.71 211.656 246.71 211.346 246.71 cv
207.585 246.71 203.916 246.26 200.416 245.42 cv
195.306 244.19 190.516 242.12 186.216 239.36 cv
184.656 238.37 183.166 237.28 181.746 236.09 cv
181.826 223.9 182.746 212.76 185.696 210.1 cv
187.176 208.76 188.946 207.71 190.815 206.9 cv
195.146 205.03 199.986 204.4 203.166 204.19 cv
205.275 204.05 206.646 204.1 206.646 204.1 cv
206.646 204.1 209.476 204.21 213.275 204.63 cv
214.326 204.76 215.386 204.89 216.496 205.05 cv
222.966 205.98 230.545 207.79 232.505 211.21 cv
234.196 214.15 234.736 227.32 234.835 240.37 cv
cp
.27451 .27451 .498039 rgb
f
220.292 179.681 mo
220.292 179.681 226.349 169.464 221.32 167.272 cv
216.292 165.08 210.297 170.688 210.297 170.688 cv
210.297 170.688 199.06 171.69 194.793 177.71 cv
190.528 183.731 201.031 194.269 201.031 194.269 cv
220.292 179.681 li
cp
.988235 .701961 .356863 rgb
f
203.026 196.551 mo
202.391 206.904 li
202.391 206.904 204.075 209.995 210.102 210.859 cv
214.591 211.503 216.239 210.58 216.239 210.58 cv
215.932 205.298 li
215.625 200.146 li
204.836 197.069 li
203.026 196.551 li
cp
.94902 .494118 .392157 rgb
f
204.836 197.069 mo
204.845 197.354 204.932 197.694 205.075 198.087 cv
207.075 203.401 213.34 204.904 215.932 205.298 cv
215.625 200.146 li
204.836 197.069 li
cp
0 0 0 rgb
f
219.382 176.688 mo
219.382 176.688 224.019 190.003 221.435 197.084 cv
218.85 204.165 212.344 202.519 208.507 200.816 cv
204.669 199.113 203.024 196.553 203.024 196.553 cv
203.024 196.553 199.243 197.519 197.042 193.903 cv
194.841 190.287 196.661 186.468 198.834 185.728 cv
201.008 184.988 203.394 186.7 203.394 186.7 cv
201.72 182.805 li
201.72 182.805 211.435 164.415 219.382 176.688 cv
cp
.94902 .494118 .392157 rgb
f
202.692 192.354 mo
202.582 192.354 202.47 192.316 202.376 192.241 cv
197.917 188.6 li
197.704 188.426 197.672 188.11 197.847 187.896 cv
198.021 187.683 198.334 187.651 198.55 187.826 cv
203.009 191.466 li
203.223 191.641 203.255 191.956 203.08 192.17 cv
202.981 192.291 202.837 192.354 202.692 192.354 cv
cp
0 0 0 rgb
f
198.444 192.035 mo
198.209 192.035 198 191.869 197.954 191.63 cv
197.901 191.359 198.079 191.097 198.35 191.044 cv
201.47 190.442 li
201.743 190.387 202.003 190.567 202.056 190.838 cv
202.108 191.109 201.931 191.372 201.66 191.424 cv
198.54 192.026 li
198.507 192.032 198.476 192.035 198.444 192.035 cv
cp
f
210.413 182.259 mo
210.295 182.259 210.178 182.219 210.083 182.136 cv
209.875 181.954 209.854 181.638 210.036 181.43 cv
211.589 179.654 213.493 180.115 214.283 180.607 cv
214.517 180.753 214.588 181.062 214.442 181.296 cv
214.296 181.53 213.989 181.601 213.756 181.458 cv
213.593 181.358 212.139 180.546 210.789 182.088 cv
210.69 182.202 210.552 182.259 210.413 182.259 cv
cp
f
220.472 181.834 mo
220.35 181.834 220.227 181.79 220.131 181.7 cv
219.143 180.777 218.007 181.319 217.958 181.343 cv
217.713 181.464 217.413 181.365 217.289 181.119 cv
217.166 180.874 217.262 180.575 217.507 180.451 cv
217.579 180.413 219.303 179.558 220.813 180.969 cv
221.015 181.158 221.026 181.474 220.837 181.676 cv
220.739 181.781 220.605 181.834 220.472 181.834 cv
cp
f
218.124 191.577 mo
218.067 191.577 218.009 191.567 217.952 191.547 cv
217.693 191.452 217.56 191.165 217.654 190.905 cv
218.98 187.282 217.204 185.166 217.186 185.145 cv
217.005 184.936 217.029 184.621 217.238 184.44 cv
217.445 184.26 217.762 184.282 217.943 184.492 cv
218.032 184.595 220.119 187.08 218.594 191.249 cv
218.52 191.452 218.328 191.577 218.124 191.577 cv
cp
f
220.12 186.806 mo
219.888 186.806 219.68 186.644 219.63 186.408 cv
219.128 183.993 li
219.072 183.723 219.246 183.458 219.517 183.402 cv
219.783 183.348 220.051 183.519 220.108 183.79 cv
220.61 186.205 li
220.666 186.475 220.492 186.739 220.222 186.796 cv
220.188 186.803 220.153 186.806 220.12 186.806 cv
cp
f
212.557 186.982 mo
212.325 186.982 212.117 186.82 212.067 186.584 cv
211.565 184.17 li
211.509 183.899 211.683 183.635 211.953 183.578 cv
212.222 183.521 212.487 183.696 212.544 183.966 cv
213.047 186.38 li
213.103 186.65 212.929 186.915 212.659 186.972 cv
212.625 186.979 212.59 186.982 212.557 186.982 cv
cp
f
220.292 179.681 mo
220.292 179.681 219.296 177.53 216.714 177.354 cv
214.133 177.178 212.513 178.904 212.513 178.904 cv
212.513 178.904 213.379 183.323 209.725 185.418 cv
206.071 187.513 203.394 186.7 203.394 186.7 cv
200.902 185.636 li
199.262 181.799 li
207.118 174.309 li
216.965 169.859 li
221.555 174.57 li
220.292 179.681 li
cp
.988235 .701961 .356863 rgb
f
215.268 195.542 mo
214.864 195.542 212.479 195.441 211.549 193.095 cv
211.448 192.838 211.573 192.547 211.83 192.446 cv
212.086 192.346 212.377 192.47 212.479 192.727 cv
213.217 194.589 215.264 194.538 215.288 194.542 cv
215.556 194.519 215.795 194.749 215.805 195.025 cv
215.814 195.301 215.598 195.532 215.322 195.542 cv
215.315 195.542 215.296 195.542 215.268 195.542 cv
cp
0 0 0 rgb
f
213.413 211.663 mo
206.634 211.663 201.475 206.97 201.225 206.738 cv
201.023 206.551 201.011 206.234 201.198 206.031 cv
201.385 205.828 201.701 205.816 201.904 206.004 cv
201.972 206.066 208.733 212.198 216.586 210.283 cv
216.853 210.216 217.125 210.382 217.19 210.65 cv
217.256 210.918 217.091 211.188 216.823 211.254 cv
215.653 211.54 214.512 211.663 213.413 211.663 cv
cp
1 1 1 rgb
f
356.423 88.8398 mo
356.423 88.8398 355.571 42.7456 339.268 41.084 cv
322.963 39.4229 321.032 50.8799 321.032 50.8799 cv
321.032 50.8799 316.967 52.3276 316.145 58.5249 cv
315.322 64.7222 314.937 89.4443 314.937 89.4443 cv
351.753 91.5513 li
356.423 88.8398 li
cp
0 0 0 rgb
f
373.416 105.76 mo
372.836 106.73 372.226 107.68 371.575 108.61 cv
371.445 108.78 371.315 108.94 371.176 109.1 cv
370.315 110.12 369.405 111.11 368.466 112.05 cv
366.945 113.57 365.315 114.99 363.586 116.28 cv
362.746 116.92 361.876 117.53 360.985 118.11 cv
360.886 118.18 360.785 118.24 360.676 118.3 cv
359.416 119.12 358.105 119.88 356.756 120.56 cv
356.445 120.72 356.136 120.88 355.815 121.03 cv
354.365 121.73 352.876 122.36 351.355 122.91 cv
349.336 123.64 347.256 124.24 345.115 124.68 cv
342.016 125.33 338.815 125.67 335.525 125.67 cv
334.875 125.67 334.216 125.66 333.565 125.63 cv
332.815 125.6 332.076 125.55 331.335 125.48 cv
331.286 125.48 331.246 125.47 331.196 125.47 cv
329.806 125.34 328.426 125.15 327.076 124.89 cv
326.295 124.75 325.525 124.59 324.766 124.41 cv
322.545 123.89 320.396 123.21 318.315 122.37 cv
316.505 121.66 314.755 120.83 313.056 119.89 cv
313.016 119.87 312.986 119.85 312.946 119.83 cv
312.746 119.72 312.545 119.61 312.355 119.49 cv
311.746 119.15 311.136 118.79 310.545 118.41 cv
307.426 106.09 306.176 94.9199 310.036 90.3901 cv
310.226 90.1401 310.456 89.9102 310.696 89.7002 cv
311.605 88.9199 312.576 88.21 313.585 87.54 cv
313.625 87.52 313.656 87.5 313.686 87.48 cv
315.366 86.3901 317.176 85.4502 319.076 84.6499 cv
319.096 84.6299 319.125 84.6201 319.136 84.6201 cv
331.375 79.52 347.155 80.3701 355.756 83.96 cv
361.285 86.27 368.096 96.4199 373.416 105.76 cv
cp
.466667 .447059 .827451 rgb
f
327.982 72.3271 mo
327.981 83.6489 li
327.981 83.6489 330.023 86.9033 336.646 87.4419 cv
341.58 87.8433 343.143 85.3096 343.143 85.3096 cv
341.947 75.4023 li
329.988 72.771 li
327.982 72.3271 li
cp
.988235 .639216 .592157 rgb
f
328 71.6372 mo
328.028 71.9463 328.146 72.311 328.329 72.7295 cv
330.861 78.3848 339.776 80.7388 342.626 80.9941 cv
341.947 75.4023 li
328 71.6372 li
cp
0 0 0 rgb
f
363.956 111.75 mo
363.436 116.39 li
363.075 116.67 362.706 116.93 362.336 117.19 cv
362.966 111.64 li
363.746 104.66 360.275 96.0098 360.235 95.9199 cv
360.136 95.6602 360.256 95.3701 360.516 95.27 cv
360.775 95.1602 361.056 95.29 361.166 95.54 cv
361.306 95.9102 364.766 104.52 363.956 111.75 cv
cp
1 1 1 rgb
f
344.474 49.5967 mo
344.474 49.5967 350.414 63.7915 348.071 71.6782 cv
345.729 79.5645 338.532 78.2056 334.238 76.6074 cv
329.943 75.0088 327.98 72.3296 327.98 72.3296 cv
327.98 72.3296 323.926 73.6348 321.286 69.8423 cv
318.647 66.0498 320.375 61.7681 322.693 60.8169 cv
325.012 59.8657 327.725 61.5713 327.725 61.5713 cv
325.642 57.4404 li
325.642 57.4404 334.996 36.7578 344.474 49.5967 cv
cp
.988235 .639216 .592157 rgb
f
343.554 67.5522 mo
343.501 67.5522 343.448 67.5439 343.396 67.5264 cv
343.134 67.439 342.992 67.1558 343.079 66.894 cv
343.93 64.3477 342.066 61.5137 342.048 61.4854 cv
341.895 61.2559 341.956 60.9453 342.185 60.792 cv
342.414 60.6372 342.724 60.6992 342.878 60.9282 cv
342.967 61.0601 345.035 64.1934 344.028 67.2104 cv
343.958 67.4199 343.763 67.5522 343.554 67.5522 cv
cp
0 0 0 rgb
f
326.988 68.2202 mo
326.852 68.2202 326.716 68.1646 326.617 68.0552 cv
322.878 63.9121 li
322.692 63.707 322.709 63.3911 322.914 63.2061 cv
323.119 63.02 323.436 63.0371 323.62 63.2422 cv
327.359 67.3853 li
327.545 67.5903 327.528 67.9063 327.323 68.0913 cv
327.228 68.1777 327.107 68.2202 326.988 68.2202 cv
cp
f
322.958 67.043 mo
322.711 67.043 322.495 66.8589 322.463 66.6069 cv
322.428 66.333 322.621 66.0825 322.896 66.0469 cv
325.553 65.7046 li
325.818 65.6714 326.077 65.8628 326.112 66.1367 cv
326.147 66.4106 325.954 66.6611 325.68 66.6968 cv
323.022 67.0391 li
323.001 67.0415 322.979 67.043 322.958 67.043 cv
cp
f
346.559 56.0757 mo
346.525 56.0757 346.493 56.0728 346.46 56.0659 cv
343.968 55.5679 li
343.696 55.5137 343.521 55.2505 343.575 54.9795 cv
343.63 54.7075 343.896 54.5337 344.163 54.5874 cv
346.655 55.0854 li
346.927 55.1396 347.102 55.4028 347.048 55.6738 cv
347 55.9116 346.792 56.0757 346.559 56.0757 cv
cp
f
336.111 57.458 mo
335.925 57.458 335.745 57.3525 335.66 57.1724 cv
335.541 56.9233 335.647 56.625 335.896 56.5063 cv
339.235 54.9199 li
339.483 54.8027 339.783 54.9067 339.901 55.1572 cv
340.021 55.4063 339.914 55.7046 339.665 55.8232 cv
336.326 57.4097 li
336.257 57.4424 336.184 57.458 336.111 57.458 cv
cp
f
345.412 61.8623 mo
345.193 61.8623 344.992 61.7178 344.931 61.4971 cv
344.214 58.9326 li
344.169 58.7715 344.207 58.5986 344.316 58.4722 cv
345.121 57.5356 li
345.302 57.3271 345.616 57.3027 345.826 57.4819 cv
346.035 57.6621 346.06 57.9775 345.879 58.187 cv
345.249 58.9209 li
345.894 61.2275 li
345.968 61.4937 345.813 61.7695 345.547 61.8438 cv
345.502 61.8564 345.456 61.8623 345.412 61.8623 cv
cp
f
337.274 62.3672 mo
337.056 62.3672 336.854 62.2227 336.793 62.002 cv
336.075 59.4375 li
336.029 59.2725 336.07 59.0952 336.186 58.9678 cv
337.297 57.7349 li
337.481 57.5303 337.798 57.5137 338.003 57.6982 cv
338.208 57.8833 338.225 58.1997 338.039 58.4048 cv
337.112 59.4331 li
337.756 61.7324 li
337.83 61.9985 337.675 62.2744 337.409 62.3486 cv
337.364 62.3613 337.318 62.3672 337.274 62.3672 cv
cp
f
348.541 54.6387 mo
348.541 54.6387 344.63 53.8579 341.887 53.9604 cv
339.144 54.063 339.144 54.063 339.144 54.063 cv
338.03 49.6509 li
338.044 54.4639 li
338.044 54.4639 336.107 54.7964 334.19 55.7988 cv
332.273 56.8013 331.001 58.0366 331.001 58.0366 cv
329.182 54.3252 li
329.948 58.998 li
327.725 61.5713 li
324.37 58.4297 li
326.518 51.9165 li
326.518 51.9165 331.581 44.8477 331.972 44.7632 cv
332.362 44.6792 339.663 44.2769 339.663 44.2769 cv
339.663 44.2769 345.944 46.7319 346.097 46.9385 cv
346.248 47.145 348.541 54.6387 348.541 54.6387 cv
cp
f
337.526 87.5903 mo
334.65 87.5903 331.068 86.814 327.226 84.1577 cv
326.998 84.001 326.941 83.6895 327.099 83.4624 cv
327.255 83.2334 327.566 83.1792 327.794 83.3354 cv
336.452 89.3198 343.419 85.3633 343.71 85.1914 cv
343.949 85.0498 344.254 85.1309 344.395 85.3687 cv
344.534 85.6064 344.456 85.9121 344.219 86.0527 cv
344.174 86.0791 341.537 87.5903 337.526 87.5903 cv
cp
1 1 1 rgb
f
331.196 125.47 mo
329.806 125.34 328.426 125.15 327.076 124.89 cv
326.295 124.75 325.525 124.59 324.766 124.41 cv
322.545 123.89 320.396 123.21 318.315 122.37 cv
316.505 121.66 314.755 120.83 313.056 119.89 cv
313.016 119.87 312.986 119.85 312.946 119.83 cv
312.746 119.72 312.545 119.61 312.355 119.49 cv
311.746 119.15 311.136 118.79 310.545 118.41 cv
309.996 118.07 309.466 117.71 308.936 117.34 cv
307.986 116.69 307.056 115.99 306.156 115.25 cv
306.045 115.17 305.946 115.09 305.835 115 cv
304.565 113.94 303.346 112.82 302.186 111.64 cv
301.855 111.31 301.536 110.97 301.226 110.63 cv
300.486 109.84 299.775 109.01 299.116 108.17 cv
298.966 107.99 298.826 107.82 298.686 107.64 cv
298.666 107.62 298.656 107.6 298.646 107.58 cv
301.936 99.2798 306.236 93.8599 310.036 90.3901 cv
311.295 89.23 312.496 88.2998 313.585 87.54 cv
313.625 87.52 313.656 87.5 313.686 87.48 cv
316.525 85.5298 318.636 84.7798 319.076 84.6499 cv
319.096 84.6299 319.125 84.6201 319.136 84.6201 cv
319.156 84.6201 331.196 125.47 331.196 125.47 cv
cp
.466667 .447059 .827451 rgb
f
80.519 67.1235 mo
80.519 67.1235 84.4512 66.1519 86.2944 63.8882 cv
88.1372 61.625 88.4414 56.0269 88.4414 56.0269 cv
88.4414 56.0269 95.562 59.731 97.4336 59.3193 cv
99.3052 58.9077 102.973 50.5239 100.502 46.9019 cv
98.0317 43.2803 93.0317 47.7642 93.0317 47.7642 cv
93.0317 47.7642 92.0059 42.5903 86.5391 43.7974 cv
80.1221 45.2148 78.4619 51.731 78.4619 51.731 cv
78.4619 51.731 78.0308 44.6602 73.5664 47.7642 cv
69.102 50.8687 70.709 58.9746 70.709 58.9746 cv
70.709 58.9746 67.1377 60.5239 67.852 63.8882 cv
68.5659 67.2524 73.3877 70.4912 73.3877 70.4912 cv
80.519 67.1235 li
cp
.898039 .392157 .270588 rgb
f
79.8818 77.2744 mo
78.9458 87.936 li
78.9458 87.936 80.668 91.1641 87.082 92.1997 cv
91.8603 92.9712 93.6426 92.0591 93.6426 92.0591 cv
93.4458 86.6045 li
93.2466 81.2842 li
81.8018 77.8521 li
79.8818 77.2744 li
cp
.988235 .639216 .592157 rgb
f
81.8018 77.8521 mo
81.8042 78.1455 81.8882 78.4985 82.0322 78.9072 cv
84.0351 84.4355 90.688 86.1367 93.4458 86.6045 cv
93.2466 81.2842 li
81.8018 77.8521 li
cp
0 0 0 rgb
f
97.8413 57.1831 mo
97.8413 57.1831 102.462 71.0249 99.5259 78.2656 cv
96.5903 85.5059 89.6841 83.6519 85.6284 81.8042 cv
81.5732 79.9561 79.8799 77.2764 79.8799 77.2764 cv
79.8799 77.2764 75.8184 78.1816 73.5576 74.3994 cv
71.2969 70.6172 73.3359 66.7227 75.6748 66.0122 cv
78.0146 65.3013 80.519 67.1235 80.519 67.1235 cv
78.8291 63.0674 li
78.8291 63.0674 89.6597 44.335 97.8413 57.1831 cv
cp
.988235 .639216 .592157 rgb
f
79.6426 72.9219 mo
79.5308 72.9219 79.4175 72.8843 79.3247 72.8071 cv
74.6538 68.9458 li
74.4409 68.77 74.4106 68.4546 74.5869 68.2422 cv
74.7617 68.0293 75.0771 67.9985 75.2905 68.1753 cv
79.9614 72.0366 li
80.1743 72.2124 80.2046 72.5278 80.0283 72.7402 cv
79.9297 72.8599 79.7866 72.9219 79.6426 72.9219 cv
cp
0 0 0 rgb
f
88.1372 62.125 mo
88.0137 62.125 87.8896 62.0796 87.793 61.9878 cv
87.5928 61.7979 87.5845 61.481 87.7744 61.2808 cv
89.457 59.5063 91.4521 60.019 92.2729 60.5386 cv
92.5063 60.686 92.5757 60.9951 92.4277 61.2285 cv
92.2803 61.4614 91.9726 61.5303 91.7402 61.3848 cv
91.6724 61.3423 90.0293 60.3564 88.5 61.9692 cv
88.4018 62.0728 88.2695 62.125 88.1372 62.125 cv
cp
f
98.8896 62.5005 mo
98.7661 62.5005 98.6426 62.4551 98.5459 62.3638 cv
97.4912 61.3662 96.2378 61.9131 96.1851 61.937 cv
95.9341 62.0513 95.6382 61.9399 95.5239 61.6895 cv
95.4092 61.4395 95.5171 61.145 95.7666 61.0288 cv
95.8428 60.9927 97.6768 60.1655 99.2334 61.6372 cv
99.4341 61.8271 99.4429 62.1436 99.2529 62.3442 cv
99.1548 62.4482 99.022 62.5005 98.8896 62.5005 cv
cp
f
96.1401 72.4912 mo
96.0771 72.4912 96.0137 72.4795 95.9517 72.4546 cv
95.6963 72.3506 95.5727 72.0586 95.6768 71.8027 cv
97.1103 68.2764 94.6514 66.9907 94.5459 66.9375 cv
94.3003 66.814 94.1992 66.5146 94.3213 66.2681 cv
94.4438 66.022 94.7407 65.9199 94.9878 66.0405 cv
95.022 66.0571 98.396 67.769 96.6035 72.1797 cv
96.5244 72.3735 96.3374 72.4912 96.1401 72.4912 cv
cp
f
98.3901 67.6191 mo
98.1548 67.6191 97.9453 67.4521 97.8994 67.2129 cv
97.4228 64.7109 li
97.3711 64.4395 97.5493 64.1777 97.8203 64.126 cv
98.0957 64.0757 98.3535 64.2529 98.4053 64.5234 cv
98.8818 67.0254 li
98.9336 67.2969 98.7554 67.5586 98.4844 67.6104 cv
98.4526 67.6162 98.4209 67.6191 98.3901 67.6191 cv
cp
f
90.3916 67.1792 mo
90.1562 67.1792 89.9468 67.0122 89.9009 66.7729 cv
89.4243 64.271 li
89.3726 63.9995 89.5508 63.7378 89.8218 63.686 cv
90.0996 63.6362 90.355 63.813 90.4067 64.0835 cv
90.8833 66.5854 li
90.9351 66.8569 90.7568 67.1187 90.4858 67.1704 cv
90.4541 67.1763 90.4224 67.1792 90.3916 67.1792 cv
cp
f
93.0249 76.5122 mo
92.7944 76.5122 90.0757 76.457 89.1035 73.9146 cv
89.0049 73.6567 89.1338 73.3677 89.3916 73.269 cv
89.6475 73.1699 89.9385 73.2988 90.0371 73.5571 cv
90.7793 75.498 92.9404 75.5 93.0273 75.5122 cv
93.3042 75.5122 93.5283 75.7339 93.5303 76.0083 cv
93.5322 76.2842 93.312 76.5093 93.0366 76.5122 cv
93.0342 76.5122 93.0303 76.5122 93.0249 76.5122 cv
cp
f
80.519 67.1235 mo
80.519 67.1235 84.7358 66.3901 86.2944 62.9409 cv
87.8525 59.4917 87.6235 56.3872 87.6235 56.3872 cv
87.6235 56.3872 89.7529 58.7207 93.4458 58.3301 cv
97.1387 57.9395 98.1523 54.1455 98.1523 54.1455 cv
94.7685 50.1787 li
94.7685 50.1787 80.8643 53.1128 80.519 52.6807 cv
80.1738 52.2485 75.1147 61.2676 75.1147 61.2676 cv
80.519 67.1235 li
cp
.898039 .392157 .270588 rgb
f
108.186 120.67 mo
101.875 123.87 94.7256 125.67 87.1655 125.67 cv
84.5854 125.67 82.0557 125.46 79.5854 125.05 cv
77.8154 124.77 76.0854 124.38 74.3857 123.9 cv
68.7554 122.3 63.5654 119.67 59.0254 116.23 cv
60.9756 104.36 63.0356 94.5298 64.6357 93.4399 cv
64.9956 93.2002 65.3857 92.9702 65.7954 92.77 cv
67.9355 91.7202 70.6055 91.2002 72.8354 90.9399 cv
72.9858 90.9199 73.1255 90.8999 73.2754 90.8901 cv
73.5054 90.8599 73.7358 90.8398 73.9556 90.8198 cv
74.1655 90.7998 74.3857 90.79 74.5854 90.77 cv
74.8857 90.75 75.1758 90.73 75.4355 90.7202 cv
76.5757 90.6602 77.3057 90.6699 77.3057 90.6699 cv
77.3057 90.6699 77.3057 90.6499 77.3154 90.6001 cv
77.3657 89.9399 77.8154 84.7798 79.2158 84.8901 cv
80.7056 85.02 84.3154 87.5 88.1357 87.8101 cv
91.9556 88.1201 94.0054 87.7798 94.7656 87.7798 cv
95.5356 87.7798 95.6958 91.8701 95.6958 91.8701 cv
95.6958 91.8701 100.815 93.6099 104.456 97.23 cv
104.505 97.2598 104.536 97.2998 104.565 97.3398 cv
104.736 97.5298 105.156 97.98 105.766 98.6899 cv
106.226 99.27 106.625 99.8799 106.966 100.54 cv
108.036 102.62 108.295 110.88 108.186 120.67 cv
cp
.27451 .27451 .498039 rgb
f
85.4043 92.8672 mo
81.8691 92.8672 77.3584 91.2217 77.1348 91.1392 cv
76.8755 91.0435 76.7432 90.7563 76.8384 90.4971 cv
76.9346 90.2383 77.2217 90.1064 77.4805 90.2007 cv
77.5425 90.2231 83.7056 92.4692 86.9687 91.7129 cv
87.2373 91.6484 87.5059 91.8174 87.5688 92.0864 cv
87.6318 92.3555 87.4643 92.624 87.1953 92.6865 cv
86.6514 92.8135 86.0434 92.8672 85.4043 92.8672 cv
cp
1 .74902 .411765 rgb
f
560.485 239.71 mo
560.466 240.41 li
559.296 239.74 558.166 239.01 557.065 238.23 cv
556.956 238.15 556.836 238.07 556.726 237.99 cv
557.075 238.15 li
560.485 239.71 li
cp
.988235 .639216 .592157 rgb
f
562.346 209.84 mo
557.075 238.15 li
557.065 238.23 li
556.956 238.15 556.836 238.07 556.726 237.99 cv
555.945 237.43 555.176 236.84 554.436 236.23 cv
554.396 236.2 554.355 236.17 554.315 236.13 cv
552.466 234.62 550.735 232.96 549.136 231.17 cv
553.148 220.167 562.346 209.84 562.346 209.84 cv
cp
.27451 .27451 .498039 rgb
f
629.646 209.08 mo
628.676 214.02 626.936 218.68 624.546 222.92 cv
623.086 225.51 621.386 227.95 619.466 230.2 cv
618.945 230.82 618.405 231.42 617.855 232.01 cv
615.546 234.47 612.976 236.68 610.176 238.59 cv
607.666 238.42 605.096 238.02 602.525 237.44 cv
600.956 237.09 599.386 236.67 597.825 236.2 cv
596.115 235.68 594.426 235.1 592.756 234.48 cv
590.325 233.58 587.966 232.58 585.706 231.55 cv
574.246 226.29 565.556 220.07 565.556 220.07 cv
565.556 220.07 564.785 218.54 563.926 215.97 cv
563.496 214.69 563.046 213.16 562.666 211.44 cv
562.626 211.27 562.586 211.09 562.556 210.92 cv
562.546 210.89 562.546 210.88 562.535 210.86 cv
562.476 210.53 562.405 210.19 562.346 209.84 cv
561.775 206.75 561.466 203.18 561.815 199.4 cv
562.136 195.83 564.516 191.15 566.905 185.97 cv
567.636 184.35 568.365 182.72 569.035 181.05 cv
569.485 179.94 569.905 178.82 570.275 177.69 cv
571.016 175.5 571.586 173.27 571.846 171.07 cv
571.926 170.53 571.976 170.02 571.996 169.5 cv
572.056 168.47 572.046 167.44 571.945 166.42 cv
571.945 166.42 579.726 161.06 588.355 166.93 cv
590.646 168.49 591.916 170.23 592.666 172.01 cv
593.506 173.99 593.706 176.01 593.945 177.88 cv
594.296 180.66 594.726 183.09 597.506 184.51 cv
603.815 187.75 609.865 191.57 609.615 198.05 cv
609.355 204.52 612.966 212.12 618.096 208.53 cv
621.155 206.39 625.825 206.82 629.646 209.08 cv
cp
.988235 .701961 .356863 rgb
f
597.926 244.55 mo
595.886 245.2 593.775 245.71 591.615 246.07 cv
589.105 246.49 586.516 246.71 583.886 246.71 cv
575.346 246.71 567.346 244.42 560.466 240.41 cv
559.296 239.74 558.166 239.01 557.065 238.23 cv
556.956 238.15 556.836 238.07 556.726 237.99 cv
555.945 237.43 555.176 236.84 554.436 236.23 cv
554.626 234.71 554.846 233.21 555.086 231.72 cv
555.105 231.59 555.136 231.45 555.155 231.32 cv
555.416 229.77 555.716 228.25 556.046 226.76 cv
556.056 226.69 556.075 226.63 556.086 226.57 cv
557.056 222.23 558.346 218.23 560.025 214.9 cv
560.775 213.41 561.615 212.05 562.535 210.86 cv
562.636 210.73 562.746 210.6 562.846 210.47 cv
563.355 209.85 563.865 209.3 564.405 208.8 cv
565.105 208.15 565.806 207.56 566.516 207.01 cv
566.556 206.99 566.586 206.98 566.596 206.96 cv
568.825 205.26 571.105 204.05 573.365 203.23 cv
578.346 201.42 583.226 201.46 587.285 202.15 cv
587.525 202.19 587.756 202.23 587.976 202.28 cv
589.586 202.59 591.056 202.99 592.325 203.42 cv
595.496 204.46 597.456 205.61 597.456 205.61 cv
597.825 236.2 li
597.926 244.55 li
cp
.27451 .27451 .498039 rgb
f
630.016 206.9 mo
629.905 207.64 629.775 208.36 629.646 209.08 cv
628.676 214.02 626.936 218.68 624.546 222.92 cv
621.266 221.58 617.195 219.49 613.426 217.41 cv
607.306 214.06 601.976 210.74 601.976 210.74 cv
599.945 206.69 li
591.985 190.79 li
589.966 186.75 li
589.336 185.48 li
587.456 181.74 li
587.086 181 li
586.896 180.61 li
585.445 177.72 li
586.735 176.7 li
586.746 176.7 587.996 175.7 587.996 175.7 cv
592.666 172.01 li
592.666 172.01 592.626 175.07 593.945 177.88 cv
594.806 179.74 596.256 181.48 598.706 182.15 cv
603.565 183.49 607.865 183.8 610.655 190.11 cv
613.396 196.29 609.735 200.7 614.926 204.11 cv
620.115 207.52 621.966 202.91 629.445 206.6 cv
629.646 206.7 629.836 206.8 630.016 206.9 cv
cp
.988235 .701961 .356863 rgb
f
586.602 192.567 mo
587.359 203.188 li
587.359 203.188 585.662 206.378 579.485 207.326 cv
574.884 208.032 573.248 205.761 573.248 205.761 cv
573.706 196.387 li
584.749 193.118 li
586.602 192.567 li
cp
.94902 .494118 .392157 rgb
f
584.749 193.118 mo
584.742 193.41 584.657 193.76 584.514 194.165 cv
582.516 199.64 576.101 201.247 573.444 201.678 cv
573.706 196.387 li
584.749 193.118 li
cp
0 0 0 rgb
f
569.61 172.348 mo
569.61 172.348 564.986 186.062 567.712 193.303 cv
570.438 200.544 577.098 198.788 581.02 197.001 cv
584.94 195.214 586.603 192.57 586.603 192.57 cv
586.603 192.57 590.494 193.522 592.716 189.788 cv
594.938 186.054 593.031 182.153 590.792 181.416 cv
588.554 180.679 586.123 182.46 586.123 182.46 cv
587.801 178.445 li
587.801 178.445 577.641 159.669 569.61 172.348 cv
cp
.94902 .494118 .392157 rgb
f
586.123 182.46 mo
586.123 182.46 580.558 184.154 576.004 178.218 cv
571.45 172.283 571.562 169.654 571.562 169.654 cv
568.264 176.554 li
568.264 176.554 566.948 172.118 568.478 169.061 cv
570.008 166.003 571.942 166.419 571.942 166.419 cv
584.761 168.337 li
589.025 178.05 li
586.123 182.46 li
cp
.988235 .701961 .356863 rgb
f
574.131 192.615 mo
573.944 192.615 573.828 192.599 573.809 192.596 cv
573.535 192.554 573.349 192.298 573.391 192.025 cv
573.433 191.753 573.689 191.563 573.957 191.607 cv
574.038 191.618 575.679 191.81 577.053 189.843 cv
577.212 189.615 577.524 189.563 577.749 189.72 cv
577.976 189.878 578.031 190.19 577.873 190.417 cv
576.493 192.389 574.824 192.615 574.131 192.615 cv
cp
0 0 0 rgb
f
571.641 189.161 mo
571.444 189.161 571.259 189.045 571.179 188.853 cv
570.025 186.076 571.764 182.986 571.839 182.856 cv
571.976 182.617 572.282 182.535 572.521 182.67 cv
572.76 182.808 572.843 183.113 572.707 183.353 cv
572.69 183.38 571.14 186.151 572.103 188.469 cv
572.208 188.724 572.088 189.017 571.832 189.123 cv
571.77 189.148 571.705 189.161 571.641 189.161 cv
cp
f
577.606 182.696 mo
577.439 182.696 577.275 182.611 577.181 182.458 cv
576.948 182.08 576.675 181.869 576.345 181.813 cv
575.745 181.704 575.038 182.146 574.818 182.323 cv
574.605 182.496 574.29 182.462 574.116 182.249 cv
573.942 182.035 573.975 181.721 574.188 181.547 cv
574.234 181.509 575.338 180.625 576.508 180.826 cv
577.132 180.931 577.645 181.304 578.032 181.934 cv
578.177 182.169 578.104 182.477 577.868 182.622 cv
577.787 182.672 577.696 182.696 577.606 182.696 cv
cp
f
570.142 182.793 mo
569.952 182.793 569.77 182.684 569.686 182.5 cv
569.502 182.096 569.088 181.529 568.787 181.515 cv
568.602 181.512 568.34 181.759 568.094 182.19 cv
567.955 182.431 567.647 182.512 567.411 182.376 cv
567.171 182.239 567.088 181.934 567.225 181.694 cv
567.688 180.884 568.234 180.494 568.836 180.516 cv
569.884 180.566 570.527 181.933 570.598 182.088 cv
570.711 182.34 570.599 182.635 570.348 182.749 cv
570.28 182.779 570.211 182.793 570.142 182.793 cv
cp
f
576.953 178.859 mo
576.841 178.859 576.729 178.821 576.635 178.745 cv
574.983 177.385 574.184 178.114 574.15 178.146 cv
573.955 178.332 573.641 178.333 573.447 178.139 cv
573.256 177.946 573.249 177.64 573.438 177.444 cv
573.495 177.384 574.875 175.999 577.271 177.973 cv
577.484 178.148 577.515 178.463 577.339 178.677 cv
577.24 178.797 577.097 178.859 576.953 178.859 cv
cp
f
568.315 179.185 mo
568.208 179.185 568.1 179.151 568.009 179.08 cv
567.791 178.91 567.751 178.597 567.921 178.379 cv
568.108 178.138 569.093 176.937 570.058 177.072 cv
570.36 177.112 570.776 177.294 571.039 177.93 cv
571.145 178.186 571.023 178.478 570.769 178.583 cv
570.515 178.691 570.222 178.568 570.115 178.313 cv
570.092 178.257 570.01 178.074 569.925 178.063 cv
569.647 178.032 569.074 178.526 568.71 178.993 cv
568.611 179.119 568.464 179.185 568.315 179.185 cv
cp
f
587.226 188.679 mo
587.117 188.679 587.009 188.645 586.918 188.573 cv
586.7 188.403 586.661 188.089 586.831 187.872 cv
590.062 183.735 li
590.232 183.516 590.548 183.479 590.764 183.648 cv
590.981 183.818 591.021 184.133 590.851 184.35 cv
587.62 188.487 li
587.521 188.613 587.374 188.679 587.226 188.679 cv
cp
f
590.927 187.305 mo
590.898 187.304 588.382 187.161 588.382 187.161 cv
588.106 187.145 587.896 186.909 587.911 186.633 cv
587.926 186.359 588.135 186.158 588.438 186.163 cv
590.955 186.306 li
591.23 186.321 591.441 186.557 591.426 186.833 cv
591.411 187.099 591.19 187.305 590.927 187.305 cv
cp
f
603.325 242.47 mo
601.586 243.27 599.785 243.97 597.926 244.55 cv
595.886 245.2 593.775 245.71 591.615 246.07 cv
589.105 246.49 586.516 246.71 583.886 246.71 cv
575.346 246.71 567.346 244.42 560.466 240.41 cv
559.296 239.74 558.166 239.01 557.065 238.23 cv
556.956 238.15 556.836 238.07 556.726 237.99 cv
555.945 237.43 555.176 236.84 554.436 236.23 cv
554.396 236.2 554.355 236.17 554.315 236.13 cv
554.565 234.63 561.785 210.3 562.346 209.84 cv
563.605 209 li
565.246 207.63 566.025 207.28 566.516 207.01 cv
566.556 206.99 566.586 206.98 566.596 206.96 cv
566.626 206.95 561.756 232.95 561.756 232.95 cv
585.686 231.55 li
585.706 231.55 586.836 231.48 586.836 231.48 cv
586.836 231.48 587.495 225.629 589.025 218.17 cv
590.927 208.903 592.325 203.42 592.325 203.42 cv
594.732 203.362 597.456 205.61 597.456 205.61 cv
602.525 237.44 li
603.325 242.47 li
cp
.968627 .45098 .309804 rgb
f
619.466 230.2 mo
618.945 230.82 618.405 231.42 617.855 232.01 cv
615.546 234.47 612.976 236.68 610.176 238.59 cv
608.016 240.07 605.726 241.37 603.325 242.47 cv
601.586 243.27 599.785 243.97 597.926 244.55 cv
595.886 245.2 593.775 245.71 591.615 246.07 cv
593.898 226.083 li
594.249 221.764 597.456 205.61 597.456 205.61 cv
597.456 205.61 598.416 205.95 599.945 206.69 cv
603.176 208.26 608.936 211.64 613.416 217.41 cv
615.216 219.71 616.806 222.39 617.945 225.5 cv
618.535 227.09 619.035 228.66 619.466 230.2 cv
cp
.27451 .27451 .498039 rgb
f
577.853 207.915 mo
574.181 207.915 572.901 206.138 572.837 206.045 cv
572.68 205.818 572.736 205.507 572.964 205.35 cv
573.188 205.192 573.498 205.248 573.656 205.473 cv
573.687 205.512 575.358 207.693 580.59 206.609 cv
585.939 205.497 587.454 202.217 587.516 202.078 cv
587.628 201.826 587.923 201.713 588.175 201.822 cv
588.427 201.934 588.542 202.227 588.432 202.479 cv
588.363 202.637 586.678 206.365 580.793 207.588 cv
579.676 207.82 578.7 207.915 577.853 207.915 cv
cp
.466667 .447059 .827451 rgb
f
102.013 309.396 mo
101.284 306.137 98.8232 303.913 96.5171 304.429 cv
95.3164 304.608 li
95.1714 304.619 95.0259 304.641 94.8813 304.674 cv
92.5752 305.189 91.2978 308.25 92.0273 311.51 cv
92.7568 314.77 95.2173 316.993 97.5229 316.478 cv
98.7236 316.298 li
98.8691 316.287 99.0142 316.266 99.1592 316.232 cv
101.465 315.717 102.743 312.656 102.013 309.396 cv
cp
.27451 .27451 .498039 rgb
f
128.926 342.59 mo
128.096 344.15 127.156 345.66 126.146 347.11 cv
123.236 351.3 119.636 354.99 115.525 358 cv
115.505 358.03 115.476 358.04 115.456 358.06 cv
115.186 358.26 114.916 358.46 114.636 358.64 cv
109.576 362.2 103.775 364.77 97.5156 366.08 cv
94.4155 366.74 91.1958 367.08 87.8955 367.08 cv
80.3257 367.08 73.1855 365.28 66.8657 362.07 cv
63.2158 360.23 59.8457 357.92 56.8257 355.22 cv
55.2056 353.76 53.6758 352.2 52.2656 350.53 cv
51.6255 349.78 51.0156 349.01 50.4355 348.22 cv
57.8457 339.3 64.3657 337.5 64.3657 337.5 cv
64.1558 337.27 61.8657 334.57 64.3657 329.71 cv
67.6558 323.29 77.8755 319.32 77.8755 319.32 cv
95.9155 318.25 li
95.9155 318.25 103.505 318.8 109.125 325.26 cv
113.775 330.58 112.946 333.96 112.505 334.99 cv
112.426 335.21 112.346 335.32 112.346 335.32 cv
112.346 335.32 120.136 337.88 128.926 342.59 cv
cp
.466667 .447059 .827451 rgb
f
112.508 334.988 mo
108.765 337.355 102.77 340.319 94.3115 342.176 cv
78.4917 345.669 64.3657 337.499 64.3657 337.499 cv
64.1538 337.269 61.8638 334.574 64.3657 329.705 cv
67.6562 323.287 77.8755 319.322 77.8755 319.322 cv
95.9184 318.254 li
95.9184 318.254 103.501 318.803 109.13 325.26 cv
113.778 330.581 112.951 333.958 112.508 334.988 cv
cp
.576471 .576471 .898039 rgb
f
80.4951 331.174 mo
80.4951 331.174 73.3467 327.442 73.7744 325.261 cv
74.2021 323.079 81.1387 321.616 85.5825 322.454 cv
90.0259 323.293 100.534 323.424 100.534 327.247 cv
100.534 330.627 95.7119 333.879 95.7119 333.879 cv
85.5825 330.957 li
80.4951 331.174 li
cp
.466667 .447059 .827451 rgb
f
80.2466 319.987 mo
80.4951 331.174 li
80.4951 331.174 82.584 334.345 89.1401 334.731 cv
94.0239 335.02 95.7119 333.879 95.7119 333.879 cv
94.9062 328.229 li
94.1138 322.719 li
82.2388 320.382 li
80.2466 319.987 li
cp
.988235 .639216 .592157 rgb
f
82.2388 320.382 mo
82.2739 320.687 82.3979 321.045 82.5879 321.454 cv
85.2153 326.986 92.0854 328.039 94.9062 328.229 cv
94.1138 322.719 li
82.2388 320.382 li
cp
0 0 0 rgb
f
96.0415 297.165 mo
96.0415 297.165 102.224 311.061 100.083 318.904 cv
97.9414 326.748 90.7998 325.563 86.522 324.079 cv
82.2436 322.594 80.2451 319.99 80.2451 319.99 cv
80.2451 319.99 76.2676 321.368 73.5762 317.679 cv
70.8843 313.989 72.498 309.721 74.7676 308.73 cv
77.0376 307.739 79.7554 309.365 79.7554 309.365 cv
77.6069 305.329 li
77.6069 305.329 86.395 284.687 96.0415 297.165 cv
cp
.988235 .639216 .592157 rgb
f
95.5171 314.933 mo
95.4683 314.933 95.4184 314.926 95.3691 314.91 cv
95.1055 314.829 94.958 314.549 95.0395 314.285 cv
95.8227 311.753 93.9204 308.996 93.9009 308.968 cv
93.7427 308.742 93.7969 308.431 94.0229 308.271 cv
94.248 308.113 94.5596 308.167 94.7187 308.393 cv
94.8096 308.521 96.9248 311.574 95.9946 314.58 cv
95.9282 314.795 95.7305 314.933 95.5171 314.933 cv
cp
0 0 0 rgb
f
79.1631 315.938 mo
79.0351 315.938 78.9077 315.888 78.813 315.787 cv
75.0273 311.775 li
74.8452 311.582 74.854 311.277 75.0474 311.096 cv
75.2407 310.913 75.5449 310.922 75.7275 311.115 cv
79.5132 315.127 li
79.6953 315.32 79.6865 315.625 79.4932 315.807 cv
79.4004 315.895 79.2817 315.938 79.1631 315.938 cv
cp
f
75.1553 314.863 mo
74.9214 314.863 74.7163 314.692 74.6802 314.454 cv
74.6401 314.191 74.8208 313.946 75.0835 313.906 cv
77.7021 313.51 li
77.9692 313.472 78.2104 313.65 78.25 313.913 cv
78.29 314.176 78.1094 314.421 77.8467 314.461 cv
75.228 314.857 li
75.2036 314.861 75.1792 314.863 75.1553 314.863 cv
cp
f
79.7554 309.365 mo
79.7554 309.365 81.1938 310.309 82.2388 308.674 cv
83.2842 307.038 80.9971 302.205 80.9971 302.205 cv
80.9971 302.205 85.312 303.185 87.9795 301.757 cv
90.6465 300.33 91.9556 296.403 91.9556 296.403 cv
91.9556 296.403 93.9189 300.493 99.8086 298.693 cv
105.699 296.895 106.821 288.877 100.534 287.241 cv
94.2461 285.605 90.8101 288.387 90.8101 288.387 cv
90.8101 288.387 90.0132 282.568 82.2388 285.441 cv
75.1558 288.06 73.9585 296.933 73.9585 296.933 cv
73.9585 296.933 69.7046 297.131 68.8867 301.757 cv
68.0684 306.384 73.4814 309.731 73.4814 309.731 cv
73.4814 309.731 76.5542 307.929 79.7554 309.365 cv
cp
f
89.2017 309.734 mo
88.9536 309.734 88.7383 309.55 88.706 309.298 cv
88.375 306.701 li
88.3403 306.427 88.5337 306.177 88.8076 306.142 cv
89.0854 306.104 89.3325 306.301 89.3672 306.574 cv
89.6982 309.171 li
89.7329 309.445 89.5395 309.695 89.2656 309.73 cv
89.2441 309.733 89.2226 309.734 89.2017 309.734 cv
cp
f
96.9106 309.115 mo
96.6665 309.115 96.4531 308.937 96.4165 308.688 cv
96.0351 306.099 li
95.9951 305.825 96.1836 305.571 96.457 305.53 cv
96.728 305.497 96.9844 305.68 97.0244 305.952 cv
97.4058 308.542 li
97.4458 308.815 97.2573 309.069 96.9839 309.11 cv
96.9595 309.113 96.9346 309.115 96.9106 309.115 cv
cp
f
86.7822 304.757 mo
86.7051 304.757 86.6269 304.739 86.5542 304.701 cv
86.3086 304.575 86.2119 304.273 86.3379 304.028 cv
87.3027 302.153 89.6704 302.642 89.77 302.664 cv
90.0395 302.722 90.21 302.986 90.1528 303.256 cv
90.0957 303.526 89.8325 303.697 89.5605 303.642 cv
89.4888 303.624 87.8389 303.296 87.2275 304.485 cv
87.1387 304.658 86.9639 304.757 86.7822 304.757 cv
cp
f
94.3096 303.152 mo
94.2124 303.152 94.1138 303.124 94.0278 303.064 cv
93.7998 302.909 93.7417 302.598 93.8975 302.37 cv
94.2939 301.791 94.8052 301.458 95.417 301.383 cv
96.6514 301.224 97.8008 302.235 97.8491 302.278 cv
98.0557 302.461 98.0752 302.775 97.8931 302.982 cv
97.7104 303.189 97.395 303.208 97.1875 303.027 cv
96.9487 302.818 96.1841 302.297 95.5371 302.376 cv
95.2192 302.416 94.9526 302.599 94.7226 302.935 cv
94.626 303.076 94.4692 303.152 94.3096 303.152 cv
cp
f
88.2241 343.919 mo
73.395 343.09 67.6362 339.689 67.3984 339.545 cv
67.1626 339.401 67.0874 339.095 67.23 338.858 cv
67.373 338.622 67.6782 338.546 67.9165 338.689 cv
67.9731 338.724 73.7456 342.107 88.2515 342.92 cv
88.5273 342.936 88.7383 343.171 88.7226 343.447 cv
88.708 343.713 88.4873 343.919 88.2241 343.919 cv
cp
.27451 .27451 .498039 rgb
f
88.6294 360.787 mo
88.3359 360.777 88.1196 360.546 88.1294 360.271 cv
88.5371 348.262 li
88.5464 347.985 88.7793 347.786 89.0537 347.778 cv
89.3296 347.788 89.5459 348.02 89.5361 348.295 cv
89.1284 360.304 li
89.1196 360.574 88.8975 360.787 88.6294 360.787 cv
cp
f
108.203 357.155 mo
108.032 357.155 107.865 357.067 107.772 356.91 cv
101.785 346.785 li
101.644 346.547 101.723 346.24 101.96 346.1 cv
102.198 345.962 102.505 346.039 102.645 346.275 cv
108.632 356.4 li
108.773 356.639 108.694 356.945 108.457 357.086 cv
108.377 357.133 108.289 357.155 108.203 357.155 cv
cp
f
108.203 337.996 mo
108.023 337.996 107.849 337.899 107.76 337.729 cv
107.631 337.484 107.725 337.183 107.969 337.054 cv
112.111 334.873 li
112.356 334.745 112.659 334.838 112.787 335.082 cv
112.916 335.327 112.821 335.629 112.577 335.758 cv
108.435 337.938 li
108.361 337.978 108.281 337.996 108.203 337.996 cv
cp
f
82.8286 313.477 mo
83.2534 316.789 81.6977 319.719 79.354 320.019 cv
77.0107 320.319 74.7666 317.877 74.3418 314.563 cv
73.917 311.251 75.4726 308.321 77.8164 308.021 cv
80.1601 307.721 82.4038 310.163 82.8286 313.477 cv
cp
f
77.8164 308.021 mo
76.1948 308.349 li
77.7324 320.347 li
79.354 320.019 li
81.1245 318.115 li
81.6387 311.463 li
77.8164 308.021 li
cp
f
81.207 313.804 mo
81.6318 317.117 80.0762 320.046 77.7324 320.347 cv
75.3887 320.646 73.145 318.204 72.7202 314.892 cv
72.2954 311.578 73.8511 308.649 76.1948 308.349 cv
78.5386 308.048 80.7822 310.49 81.207 313.804 cv
cp
1 1 1 rgb
f
75.019 293.157 mo
75.019 293.157 73.23 295.3 72.727 297.188 cv
72.2241 299.076 75.1558 310.997 75.1558 310.997 cv
78.8564 310.158 li
75.019 293.157 li
cp
f
92.2017 318.86 mo
90.477 318.86 89.2358 317.591 88.772 316.807 cv
88.6313 316.569 88.71 316.264 88.9468 316.123 cv
89.1826 315.981 89.4888 316.06 89.6318 316.296 cv
89.6807 316.379 90.8608 318.297 92.8843 317.771 cv
93.1475 317.697 93.4243 317.861 93.4941 318.128 cv
93.5635 318.396 93.4033 318.668 93.1362 318.737 cv
92.8115 318.822 92.4995 318.86 92.2017 318.86 cv
cp
0 0 0 rgb
f
595.346 365.83 mo
591.896 366.65 588.306 367.08 584.605 367.08 cv
583.815 367.08 583.035 367.06 582.266 367.02 cv
575.416 366.68 568.966 364.87 563.216 361.89 cv
568.996 331.1 li
580.796 325.56 li
594.466 327.42 li
595.346 365.83 li
cp
.988235 .701961 .356863 rgb
f
574.136 325.12 mo
565.985 363.2 li
565.046 362.8 564.126 362.36 563.216 361.89 cv
561.695 361.11 560.226 360.24 558.815 359.3 cv
558.626 359.17 558.436 359.04 558.246 358.9 cv
556.546 357.75 554.926 356.48 553.405 355.09 cv
553.346 355.04 553.296 355 553.266 354.96 cv
553.146 354.86 553.025 354.75 552.905 354.63 cv
551.855 353.67 550.855 352.65 549.905 351.59 cv
549.865 351.54 549.815 351.49 549.775 351.44 cv
549.075 350.65 548.396 349.84 547.746 349.01 cv
552.025 340.48 560.535 333.53 563.315 331.11 cv
569.075 326.1 574.136 325.12 574.136 325.12 cv
cp
.466667 .447059 .827451 rgb
f
572.019 294.554 mo
572.019 294.554 572.199 285.996 584.943 284.827 cv
597.687 283.657 602.004 295.385 601.323 296.634 cv
600.642 297.883 599.57 298.341 599.57 298.341 cv
599.57 298.341 599.878 306.894 594.698 308.438 cv
589.518 309.982 583.724 306.665 583.724 306.665 cv
572.019 294.554 li
cp
.988235 .701961 .356863 rgb
f
587.317 315.67 mo
587.311 326.183 li
587.311 326.183 585.413 329.203 579.263 329.699 cv
574.682 330.068 573.072 329.032 573.072 329.032 cv
573.715 323.708 li
574.348 318.517 li
585.454 316.081 li
587.317 315.67 li
cp
.94902 .494118 .392157 rgb
f
585.454 316.081 mo
585.427 316.368 585.317 316.707 585.147 317.095 cv
582.792 322.345 576.36 323.473 573.715 323.708 cv
574.348 318.517 li
585.454 316.081 li
cp
0 0 0 rgb
f
572.019 294.554 mo
572.019 294.554 566.493 307.73 568.663 315.055 cv
570.834 322.379 577.518 321.122 581.506 319.641 cv
585.494 318.159 587.318 315.672 587.318 315.672 cv
587.318 315.672 591.083 316.887 593.536 313.366 cv
595.989 309.847 594.387 305.87 592.235 304.985 cv
590.083 304.101 587.563 305.683 587.563 305.683 cv
589.499 301.848 li
589.499 301.848 580.826 282.638 572.019 294.554 cv
cp
.94902 .494118 .392157 rgb
f
572.86 311.262 mo
572.651 311.262 572.456 311.129 572.386 310.92 cv
571.447 308.102 573.38 305.179 573.463 305.056 cv
573.617 304.827 573.925 304.766 574.156 304.92 cv
574.386 305.073 574.446 305.384 574.293 305.613 cv
574.275 305.64 572.553 308.257 573.335 310.604 cv
573.422 310.865 573.28 311.148 573.019 311.236 cv
572.966 311.254 572.913 311.262 572.86 311.262 cv
cp
0 0 0 rgb
f
588.243 311.893 mo
588.123 311.893 588.004 311.85 587.908 311.764 cv
587.703 311.578 587.688 311.263 587.872 311.058 cv
591.346 307.213 li
591.531 307.008 591.848 306.993 592.052 307.177 cv
592.257 307.362 592.272 307.678 592.088 307.883 cv
588.614 311.728 li
588.516 311.837 588.38 311.893 588.243 311.893 cv
cp
f
591.986 310.802 mo
591.965 310.802 591.943 310.801 591.921 310.798 cv
589.453 310.479 li
589.18 310.442 588.986 310.192 589.021 309.918 cv
589.058 309.645 589.302 309.446 589.582 309.486 cv
592.05 309.806 li
592.323 309.842 592.517 310.092 592.481 310.366 cv
592.448 310.618 592.233 310.802 591.986 310.802 cv
cp
f
578.688 306.251 mo
578.67 306.251 578.651 306.25 578.634 306.248 cv
578.359 306.219 578.16 305.973 578.189 305.698 cv
578.448 303.253 li
578.478 302.978 578.726 302.775 578.998 302.809 cv
579.272 302.838 579.472 303.084 579.442 303.358 cv
579.184 305.804 li
579.156 306.061 578.939 306.251 578.688 306.251 cv
cp
f
571.435 305.826 mo
571.413 305.826 571.393 305.825 571.371 305.822 cv
571.098 305.788 570.903 305.538 570.938 305.264 cv
571.243 302.823 li
571.277 302.549 571.531 302.349 571.802 302.39 cv
572.075 302.424 572.27 302.674 572.235 302.948 cv
571.93 305.389 li
571.898 305.642 571.683 305.826 571.435 305.826 cv
cp
f
580.858 301.526 mo
580.682 301.526 580.51 301.432 580.419 301.265 cv
579.832 300.182 578.308 300.519 578.243 300.534 cv
577.974 300.596 577.706 300.431 577.643 300.162 cv
577.58 299.894 577.745 299.625 578.013 299.562 cv
578.108 299.538 580.344 299.029 581.298 300.788 cv
581.43 301.031 581.34 301.334 581.097 301.466 cv
581.021 301.507 580.939 301.526 580.858 301.526 cv
cp
f
570.232 301.001 mo
570.114 301.001 569.996 300.96 569.901 300.876 cv
569.695 300.693 569.675 300.379 569.857 300.172 cv
570.434 299.517 571.867 298.547 573.153 299.558 cv
573.371 299.729 573.408 300.043 573.238 300.26 cv
573.067 300.479 572.754 300.514 572.536 300.345 cv
571.667 299.662 570.649 300.785 570.606 300.833 cv
570.508 300.944 570.37 301.001 570.232 301.001 cv
cp
f
584.426 328.25 mo
584.325 327.99 584.035 327.85 583.775 327.95 cv
578.365 330 573.266 328.57 573.216 328.55 cv
573.075 328.51 572.936 328.53 572.815 328.6 cv
572.695 328.68 572.615 328.79 572.586 328.93 cv
565.426 362.95 li
565.605 363.04 565.796 363.12 565.985 363.2 cv
566.115 363.26 566.235 363.31 566.365 363.36 cv
573.456 329.64 li
574.945 329.97 579.365 330.68 584.126 328.89 cv
584.386 328.79 584.516 328.5 584.426 328.25 cv
cp
1 1 1 rgb
f
589.701 306.621 mo
589.701 306.621 585.54 305.858 584.218 302.918 cv
582.245 298.533 584.873 296.662 584.873 296.662 cv
584.873 296.662 581.854 297.339 579.369 296.032 cv
576.295 294.416 575.782 291.965 575.782 291.965 cv
572.019 294.554 li
572.019 294.554 570.903 289.001 574.375 287.978 cv
577.847 286.955 581.906 290.14 581.906 290.14 cv
594.63 299.813 li
593.435 305.868 li
593.435 305.868 592.722 305.593 589.701 306.621 cv
cp
0 0 0 rgb
f
575.729 313.586 mo
575.979 313.862 576.354 314.186 576.793 314.272 cv
577.141 314.342 577.486 314.249 577.848 313.985 cv
578.748 313.327 579.007 312.474 579.065 311.878 cv
575.729 313.586 li
cp
577.02 315.295 mo
576.878 315.295 576.735 315.281 576.593 315.252 cv
575.354 315.003 574.572 313.727 574.54 313.672 cv
574.468 313.554 574.449 313.41 574.487 313.277 cv
574.524 313.144 574.616 313.032 574.74 312.969 cv
579.313 310.628 li
579.453 310.558 579.619 310.556 579.759 310.623 cv
579.9 310.691 580.001 310.822 580.031 310.976 cv
580.05 311.07 580.469 313.309 578.438 314.792 cv
577.979 315.127 577.504 315.295 577.02 315.295 cv
cp
f
577.024 288.167 mo
577.024 288.167 582.634 288.81 586.049 296.284 cv
588.839 302.393 589.701 306.621 589.701 306.621 cv
594.698 308.438 li
596.188 296.456 li
584.734 287.368 li
584.734 287.368 580.012 285.776 577.024 288.167 cv
cp
.988235 .701961 .356863 rgb
f
624.735 344.2 mo
623.775 345.83 622.706 347.39 621.546 348.89 cv
621.075 349.51 620.586 350.11 620.065 350.7 cv
617.186 354.1 613.815 357.08 610.065 359.52 cv
609.065 360.17 608.046 360.79 606.996 361.36 cv
600.346 365.01 592.726 367.08 584.605 367.08 cv
583.815 367.08 583.035 367.06 582.266 367.02 cv
580.956 349.44 580.936 328.47 587.315 322.32 cv
590.936 318.83 611.016 326.94 624.735 344.2 cv
cp
.466667 .447059 .827451 rgb
f
590.123 306.981 mo
589.877 306.981 589.662 306.799 589.629 306.548 cv
589.592 306.274 589.784 306.022 590.058 305.986 cv
590.089 305.981 593.23 305.533 595.529 303.172 cv
597.73 300.911 598.765 298.77 598.775 298.748 cv
598.895 298.498 599.193 298.393 599.441 298.512 cv
599.691 298.631 599.797 298.929 599.678 299.178 cv
599.634 299.271 598.562 301.492 596.246 303.869 cv
593.698 306.485 590.332 306.958 590.189 306.978 cv
590.167 306.98 590.146 306.981 590.123 306.981 cv
cp
.27451 .27451 .498039 rgb
f
588.64 302.146 mo
588.428 302.146 588.231 302.01 588.163 301.798 cv
588.079 301.535 588.225 301.254 588.487 301.169 cv
588.534 301.154 593.245 299.637 595.663 298.027 cv
598.257 296.303 600.703 296.178 600.807 296.173 cv
601.058 296.168 601.314 296.375 601.327 296.65 cv
601.34 296.926 601.126 297.159 600.851 297.172 cv
600.828 297.174 598.567 297.297 596.218 298.859 cv
593.683 300.547 588.99 302.059 588.792 302.122 cv
588.741 302.138 588.69 302.146 588.64 302.146 cv
cp
f
586.387 296.529 mo
586.242 296.529 586.099 296.467 586 296.346 cv
585.825 296.132 585.856 295.817 586.07 295.643 cv
586.307 295.449 591.953 290.919 599.825 292.267 cv
600.098 292.313 600.28 292.572 600.234 292.844 cv
600.188 293.117 599.921 293.298 599.657 293.253 cv
592.224 291.978 586.758 296.371 586.703 296.416 cv
586.61 296.492 586.498 296.529 586.387 296.529 cv
cp
f
581.907 290.64 mo
581.748 290.64 581.593 290.564 581.495 290.424 cv
581.338 290.197 581.395 289.887 581.621 289.729 cv
581.866 289.56 587.709 285.592 596.054 287.629 cv
596.322 287.694 596.486 287.965 596.421 288.232 cv
596.355 288.501 596.082 288.666 595.817 288.6 cv
587.925 286.681 582.248 290.512 582.19 290.551 cv
582.104 290.61 582.005 290.64 581.907 290.64 cv
cp
f
209.037 54.5103 mo
209.037 54.5103 192.11 40.7881 177.19 67.4443 cv
162.271 94.1001 177.164 110.851 196.133 103.594 cv
215.102 96.3374 210.092 62.2939 210.092 62.2939 cv
209.037 54.5103 li
cp
0 0 0 rgb
f
228.435 63.2227 mo
228.435 63.2227 231.475 56.1372 230.893 53.0273 cv
230.312 49.9175 217.987 40.7695 207.66 45.7368 cv
197.333 50.7041 196.8 64.3677 199.209 69.9873 cv
205.416 84.4585 217.868 77.6133 217.868 77.6133 cv
217.868 77.6133 237.765 71.2852 228.435 63.2227 cv
cp
f
243.605 112.69 mo
240.576 115.61 237.136 118.12 233.396 120.13 cv
230.426 121.72 227.275 123.01 223.966 123.94 cv
223.746 124 223.516 124.06 223.295 124.12 cv
219.486 125.13 215.476 125.67 211.346 125.67 cv
208.025 125.67 204.795 125.32 201.676 124.66 cv
199.775 124.27 197.916 123.75 196.105 123.12 cv
196.786 107.23 197.846 91.3999 199.505 89.5898 cv
199.786 89.2798 200.186 88.9702 200.686 88.6602 cv
200.795 88.6001 200.855 88.5698 200.855 88.5698 cv
205.476 85.8901 218.016 83.7402 228.466 87.1001 cv
231.176 87.9702 233.706 89.1899 235.926 90.8501 cv
239.956 93.8599 242.486 102.66 243.605 112.69 cv
cp
.988235 .701961 .356863 rgb
f
226.831 79.6924 mo
226.844 79.9741 li
226.893 85.2959 li
226.948 89.4683 li
226.948 89.4683 227.355 90.417 222.493 90.3633 cv
215.974 90.2666 212.93 87.4165 212.93 87.4165 cv
212.93 77.8457 li
214.919 78.1152 li
226.831 79.6924 li
cp
.94902 .494118 .392157 rgb
f
226.844 79.9741 mo
226.893 85.2959 li
223.716 85.0825 217.899 84.0249 215.312 79.1855 cv
215.112 78.7915 214.974 78.4351 214.92 78.1353 cv
226.82 79.895 li
226.844 79.9741 li
cp
0 0 0 rgb
f
227.537 54.4541 mo
227.537 54.4541 234.32 67.9526 232.562 75.8359 cv
230.803 83.7188 223.662 82.8765 219.347 81.603 cv
215.033 80.3291 212.929 77.8384 212.929 77.8384 cv
212.929 77.8384 209.046 79.3921 206.204 75.8569 cv
203.361 72.3218 204.762 68.0112 206.968 66.9224 cv
209.174 65.833 211.947 67.3193 211.947 67.3193 cv
209.626 63.415 li
209.626 63.415 217.383 42.5234 227.537 54.4541 cv
cp
.94902 .494118 .392157 rgb
f
227.823 72.1055 mo
227.782 72.1055 227.74 72.1006 227.699 72.0898 cv
227.435 72.0215 227.276 71.7524 227.345 71.4883 cv
228.004 68.938 225.987 66.29 225.967 66.2637 cv
225.8 66.0483 225.839 65.7378 226.055 65.5713 cv
226.271 65.4038 226.58 65.4438 226.747 65.6587 cv
226.842 65.7813 229.083 68.7104 228.3 71.7354 cv
228.243 71.958 228.042 72.1055 227.823 72.1055 cv
cp
0 0 0 rgb
f
211.644 73.8857 mo
211.52 73.8857 211.396 73.8398 211.301 73.7471 cv
207.357 69.9434 li
207.161 69.7539 207.155 69.4414 207.345 69.2451 cv
207.535 69.0503 207.847 69.0439 208.042 69.2329 cv
211.986 73.0366 li
212.183 73.2261 212.188 73.5386 211.999 73.7344 cv
211.902 73.835 211.773 73.8857 211.644 73.8857 cv
cp
f
207.617 73.0059 mo
207.387 73.0059 207.18 72.8438 207.133 72.6089 cv
207.08 72.3413 207.253 72.0815 207.521 72.0278 cv
210.1 71.5122 li
210.371 71.4585 210.627 71.6323 210.681 71.8994 cv
210.734 72.167 210.561 72.4268 210.294 72.48 cv
207.714 72.9961 li
207.682 73.0029 207.649 73.0059 207.617 73.0059 cv
cp
f
222.745 74.1592 mo
223.367 75.0918 224.278 76.2339 225.126 76.6094 cv
225.417 76.7378 225.59 76.6782 225.696 76.623 cv
226.11 76.4072 226.406 75.729 226.563 75.2314 cv
222.745 74.1592 li
cp
225.447 77.6729 mo
225.211 77.6729 224.97 77.6196 224.728 77.5117 cv
222.931 76.7173 221.306 73.7061 221.238 73.5786 cv
221.145 73.4038 221.165 73.1904 221.289 73.0366 cv
221.413 72.8823 221.616 72.8164 221.807 72.8701 cv
227.297 74.4126 li
227.545 74.4824 227.698 74.7305 227.648 74.9839 cv
227.609 75.1821 227.234 76.9365 226.151 77.4995 cv
225.929 77.6152 225.691 77.6729 225.447 77.6729 cv
cp
f
218.681 62.4165 mo
218.612 62.4165 218.543 62.4019 218.477 62.3721 cv
218.228 62.2588 218.119 61.9658 218.232 61.7178 cv
219.1 59.8159 221.471 60.1895 221.57 60.2061 cv
221.839 60.251 222.02 60.5044 221.976 60.7729 cv
221.931 61.041 221.68 61.2266 221.409 61.1797 cv
221.338 61.168 219.682 60.917 219.13 62.1274 cv
219.048 62.3091 218.868 62.4165 218.681 62.4165 cv
cp
f
227.062 60.4736 mo
226.974 60.4736 226.884 60.4497 226.803 60.3999 cv
226.571 60.2563 226.5 59.9521 226.643 59.7207 cv
227.009 59.1274 227.5 58.7744 228.103 58.6709 cv
229.316 58.4624 230.505 59.4053 230.555 59.4453 cv
230.767 59.6157 230.8 59.9253 230.631 60.1377 cv
230.461 60.3506 230.151 60.3857 229.937 60.2153 cv
229.69 60.019 228.905 59.5327 228.267 59.6445 cv
227.952 59.6997 227.696 59.894 227.482 60.2393 cv
227.39 60.3906 227.228 60.4736 227.062 60.4736 cv
cp
f
228.934 66.2681 mo
228.702 66.2681 228.496 66.105 228.45 65.8696 cv
227.951 63.3179 li
227.924 63.1826 227.956 63.042 228.037 62.9312 cv
228.96 61.6719 li
229.122 61.4512 229.43 61.4038 229.65 61.5654 cv
229.871 61.7271 229.917 62.0356 229.757 62.2554 cv
228.961 63.3408 li
229.418 65.6797 li
229.471 65.9478 229.297 66.2065 229.029 66.2593 cv
228.997 66.2656 228.965 66.2681 228.934 66.2681 cv
cp
f
221.314 67.2427 mo
221.079 67.2427 220.871 67.0737 220.828 66.8345 cv
220.378 64.2729 li
220.352 64.1211 220.397 63.9658 220.502 63.8525 cv
221.873 62.3701 li
222.058 62.1689 222.37 62.1567 222.57 62.3428 cv
222.77 62.5278 222.783 62.8403 222.597 63.04 cv
221.393 64.3428 li
221.801 66.6636 li
221.848 66.9321 221.668 67.188 221.4 67.2354 cv
221.371 67.2402 221.342 67.2427 221.314 67.2427 cv
cp
f
211.947 67.3193 mo
211.947 67.3193 217.836 63.9419 219.814 59.4927 cv
221.793 55.0435 221.771 52.8599 221.771 52.8599 cv
221.771 52.8599 222.79 55.6689 225.021 56.2363 cv
227.253 56.8032 228.625 56.8149 228.625 56.8149 cv
230.22 60.8008 li
228.851 51.1826 li
228.851 51.1826 222.738 48.2769 221.94 48.3145 cv
221.142 48.3521 211.157 50.6313 210.603 51.2651 cv
210.049 51.8989 207.243 59.8696 207.243 59.8696 cv
207.189 63.4131 li
211.947 67.3193 li
cp
f
201.676 124.66 mo
199.775 124.27 197.916 123.75 196.105 123.12 cv
189.525 120.85 183.605 117.14 178.736 112.35 cv
185.906 96.7998 199.036 89.52 200.686 88.6602 cv
200.795 88.6001 200.855 88.5698 200.855 88.5698 cv
200.855 88.5698 199.666 114.01 201.676 124.66 cv
cp
.988235 .701961 .356863 rgb
f
213.164 289.63 mo
213.164 289.63 203.967 288.253 197.377 292.384 cv
190.787 296.515 193.771 307.51 193.771 307.51 cv
193.771 307.51 183.213 315.776 182.64 324.851 cv
182.066 333.924 190.328 337.251 190.328 337.251 cv
212.098 333.924 li
213.164 289.63 li
cp
0 0 0 rgb
f
253.275 342.28 mo
251.826 345.02 250.116 347.59 248.166 349.97 cv
246.966 351.44 245.676 352.83 244.306 354.14 cv
243.275 355.13 242.196 356.07 241.076 356.96 cv
239.736 358.03 238.335 359.03 236.875 359.93 cv
233.045 327.14 li
233.045 327.14 236.846 327.94 245.636 335.57 cv
249.466 338.89 251.826 340.97 253.275 342.28 cv
cp
.313726 .470588 .286275 rgb
f
241.076 356.96 mo
239.736 358.03 238.335 359.03 236.875 359.93 cv
236.335 360.28 235.786 360.61 235.226 360.93 cv
228.406 364.84 220.505 367.08 212.076 367.08 cv
210.326 367.08 208.596 366.98 206.906 366.79 cv
205.886 366.68 204.875 366.54 203.875 366.36 cv
201.766 365.99 199.706 365.47 197.706 364.81 cv
197.275 364.67 196.846 364.53 196.426 364.37 cv
196.056 347.85 195.956 331.33 196.936 329.94 cv
198.516 327.69 203.946 325.39 210.085 324.46 cv
211.686 324.21 213.326 324.05 214.966 324.02 cv
222.906 323.85 233.045 327.14 233.045 327.14 cv
241.076 356.96 li
cp
f
212.096 343.42 mo
206.906 366.79 li
205.886 366.68 204.875 366.54 203.875 366.36 cv
201.766 365.99 199.706 365.47 197.706 364.81 cv
197.275 364.67 196.846 364.53 196.426 364.37 cv
190.766 362.37 185.616 359.3 181.206 355.39 cv
179.366 353.77 177.656 352 176.096 350.11 cv
189.576 324.69 210.036 324.01 210.036 324.01 cv
210.085 324.46 li
212.096 343.42 li
cp
f
209.986 325.276 mo
209.986 325.276 213.785 330.854 218.222 334.211 cv
222.659 337.567 224.687 337.963 224.687 337.963 cv
224.403 327.14 li
209.986 325.276 li
cp
.898039 .392157 .270588 rgb
f
210.205 314.126 mo
210.02 324.851 li
210.02 324.851 211.9 327.967 218.166 328.585 cv
222.833 329.045 224.493 328.017 224.493 328.017 cv
223.935 322.574 li
223.384 317.266 li
212.098 314.579 li
210.205 314.126 li
cp
.988235 .639216 .592157 rgb
f
212.098 314.579 mo
212.12 314.872 212.226 315.22 212.392 315.619 cv
214.699 321.018 221.24 322.285 223.935 322.574 cv
223.384 317.266 li
212.098 314.579 li
cp
0 0 0 rgb
f
226.197 292.862 mo
226.197 292.862 231.593 306.405 229.246 313.838 cv
226.898 321.271 220.103 319.866 216.061 318.282 cv
212.019 316.698 210.203 314.128 210.203 314.128 cv
210.203 314.128 206.341 315.298 203.902 311.662 cv
201.464 308.026 203.17 303.999 205.382 303.136 cv
207.594 302.272 210.136 303.933 210.136 303.933 cv
208.23 299.985 li
208.23 299.985 217.428 280.545 226.197 292.862 cv
cp
.988235 .639216 .592157 rgb
f
209.646 309.788 mo
209.542 309.788 209.438 309.756 209.348 309.688 cv
204.576 306.131 li
204.355 305.966 204.309 305.653 204.474 305.432 cv
204.64 305.21 204.953 305.164 205.174 305.33 cv
209.946 308.888 li
210.167 309.053 210.213 309.365 210.048 309.587 cv
209.95 309.719 209.799 309.788 209.646 309.788 cv
cp
0 0 0 rgb
f
205.244 309.652 mo
205.018 309.652 204.813 309.498 204.758 309.269 cv
204.694 309 204.859 308.73 205.128 308.666 cv
208.324 307.902 li
208.592 307.836 208.862 308.004 208.926 308.272 cv
208.99 308.541 208.825 308.811 208.556 308.875 cv
205.36 309.639 li
205.321 309.648 205.282 309.652 205.244 309.652 cv
cp
f
217.123 298.437 mo
217.013 298.437 216.903 298.4 216.811 298.327 cv
216.595 298.154 216.56 297.84 216.732 297.624 cv
218.248 295.729 220.225 296.114 221.061 296.585 cv
221.301 296.721 221.386 297.025 221.25 297.266 cv
221.115 297.505 220.812 297.59 220.572 297.458 cv
220.502 297.42 218.868 296.554 217.514 298.249 cv
217.415 298.372 217.27 298.437 217.123 298.437 cv
cp
f
227.534 298.112 mo
227.419 298.112 227.303 298.073 227.209 297.992 cv
226.138 297.076 224.979 297.694 224.93 297.721 cv
224.69 297.854 224.385 297.767 224.251 297.527 cv
224.117 297.287 224.2 296.985 224.439 296.85 cv
224.513 296.809 226.245 295.85 227.859 297.232 cv
228.069 297.412 228.094 297.728 227.914 297.938 cv
227.815 298.053 227.675 298.112 227.534 298.112 cv
cp
f
225.553 308.283 mo
225.527 308.283 225.502 308.281 225.476 308.277 cv
225.203 308.235 225.016 307.98 225.058 307.707 cv
225.582 304.304 224.083 301.832 224.067 301.807 cv
223.922 301.572 223.995 301.264 224.229 301.119 cv
224.465 300.974 224.772 301.046 224.918 301.281 cv
224.988 301.394 226.626 304.096 226.046 307.859 cv
226.008 308.106 225.795 308.283 225.553 308.283 cv
cp
f
227.397 303.264 mo
227.174 303.264 226.971 303.113 226.913 302.887 cv
226.284 300.416 li
226.252 300.292 226.27 300.16 226.332 300.049 cv
227.098 298.681 li
227.232 298.438 227.537 298.354 227.778 298.488 cv
228.02 298.623 228.105 298.928 227.971 299.169 cv
227.302 300.363 li
227.882 302.641 li
227.95 302.908 227.789 303.18 227.521 303.248 cv
227.479 303.259 227.438 303.264 227.397 303.264 cv
cp
f
219.607 303.279 mo
219.384 303.279 219.181 303.129 219.124 302.902 cv
218.495 300.432 li
218.456 300.281 218.49 300.121 218.587 299.999 cv
219.68 298.615 li
219.852 298.398 220.167 298.362 220.382 298.532 cv
220.599 298.704 220.636 299.019 220.465 299.234 cv
219.524 300.425 li
220.092 302.656 li
220.161 302.924 219.999 303.195 219.731 303.264 cv
219.69 303.274 219.648 303.279 219.607 303.279 cv
cp
f
210.136 304.248 mo
212.098 306.843 li
212.098 306.843 216.285 301.038 216.273 297.803 cv
216.262 294.567 216.273 293.442 216.273 293.442 cv
216.273 293.442 220.478 294.977 223.935 294.875 cv
227.393 294.772 229.573 292.931 229.343 291.294 cv
229.114 289.658 227.071 284.646 216.273 286.282 cv
205.475 287.919 205.272 300.528 210.136 304.248 cv
cp
f
229.838 339.725 mo
229.35 339.695 218.511 338.88 209.6 325.122 cv
209.45 324.891 209.516 324.581 209.748 324.431 cv
209.979 324.282 210.289 324.347 210.439 324.579 cv
219.059 337.887 229.762 338.719 229.869 338.726 cv
230.144 338.743 230.354 338.98 230.336 339.256 cv
230.319 339.521 230.1 339.725 229.838 339.725 cv
cp
1 1 1 rgb
f
224.686 338.463 mo
224.416 338.463 224.193 338.248 224.186 337.976 cv
223.903 327.152 li
223.896 326.877 224.114 326.647 224.39 326.64 cv
224.65 326.629 224.896 326.851 224.903 327.127 cv
225.186 337.95 li
225.193 338.226 224.975 338.455 224.699 338.463 cv
224.695 338.463 224.69 338.463 224.686 338.463 cv
cp
f
448.493 46.7485 mo
448.493 46.7485 460.66 35.8877 472.108 41.9136 cv
483.556 47.9399 480.309 62.4482 480.309 62.4482 cv
480.309 62.4482 494.196 65.2275 497.363 82.4053 cv
500.53 99.5835 484.296 104.005 484.296 104.005 cv
459.664 91.6318 li
448.493 46.7485 li
cp
0 0 0 rgb
f
471.605 118.76 mo
471.166 124.25 li
468.405 124.95 465.546 125.4 462.615 125.58 cv
462.376 125.6 462.126 125.61 461.886 125.62 cv
461.166 125.65 460.436 125.67 459.706 125.67 cv
459.346 125.67 458.976 125.67 458.605 125.66 cv
453.136 125.53 447.896 124.47 443.056 122.61 cv
441.496 122.02 439.976 121.34 438.496 120.58 cv
436.636 119.63 434.846 118.56 433.146 117.37 cv
435.166 106.28 439.296 87.4502 444.615 84.3701 cv
445.025 84.1299 445.426 83.98 445.836 83.9399 cv
454.105 83.0698 461.405 84.1699 461.405 84.1699 cv
471.605 118.76 li
cp
.27451 .27451 .498039 rgb
f
490.596 113.95 mo
489.235 115.17 487.796 116.3 486.285 117.35 cv
484.096 118.87 481.766 120.22 479.315 121.35 cv
478.726 121.63 478.136 121.89 477.535 122.14 cv
475.476 122.99 473.355 123.7 471.166 124.25 cv
468.405 124.95 465.546 125.4 462.615 125.58 cv
461.865 103.6 460.065 84.8301 460.065 84.8301 cv
445.836 83.9399 li
447.896 83.23 449.275 82.8301 449.275 82.8301 cv
458.065 82.9502 li
458.065 82.9502 472.075 84.71 480.766 89.73 cv
480.806 89.7598 480.855 89.7798 480.916 89.8198 cv
482.216 90.5698 483.376 91.3901 484.365 92.2998 cv
484.376 92.3101 484.396 92.3198 484.405 92.3398 cv
486.426 94.21 488.605 102.49 490.596 113.95 cv
cp
.968627 .45098 .309804 rgb
f
445.815 83.9502 mo
445.565 84.2798 441.506 89.8701 438.985 116.08 cv
438.855 117.41 438.686 118.91 438.496 120.58 cv
436.636 119.63 434.846 118.56 433.146 117.37 cv
432.605 117 432.075 116.62 431.565 116.22 cv
430.766 115.62 429.985 114.99 429.235 114.34 cv
429.046 114.18 428.855 114.01 428.676 113.84 cv
427.936 113.18 427.216 112.5 426.516 111.8 cv
427.206 102.18 427.876 95.3999 428.466 94.0298 cv
429.105 92.5698 430.716 91.1299 432.775 89.8101 cv
432.796 89.79 432.815 89.7798 432.836 89.77 cv
436.336 87.5298 441.115 85.6099 444.615 84.3701 cv
445.046 84.2202 445.445 84.0801 445.815 83.9502 cv
cp
f
439.484 67.5977 mo
439.484 67.5977 435.391 63.5479 436.137 56.8799 cv
436.643 52.3594 438.555 50.7993 438.555 50.7993 cv
438.555 50.7993 435.181 44.854 444.238 44.7241 cv
453.296 44.5942 458.859 48.7373 458.859 48.7373 cv
458.859 48.7373 462.878 46.48 464.997 51.1938 cv
467.116 55.9082 465.657 63.1167 465.657 63.1167 cv
439.484 67.5977 li
cp
0 0 0 rgb
f
459.736 73.9458 mo
460.02 85.9263 li
460.02 85.9263 458.174 88.229 451.728 88.9497 cv
446.925 89.4868 445.326 87.0601 445.326 87.0601 cv
446.199 77.3579 li
457.792 74.438 li
459.736 73.9458 li
cp
.988235 .639216 .592157 rgb
f
459.699 73.2729 mo
459.681 73.5752 459.576 73.9351 459.41 74.3486 cv
457.105 79.9414 448.476 82.501 445.703 82.834 cv
446.199 77.3579 li
459.699 73.2729 li
cp
0 0 0 rgb
f
442.975 52.2515 mo
442.975 52.2515 437.596 66.2778 440.114 73.9043 cv
442.632 81.5308 449.615 79.9927 453.758 78.3066 cv
457.901 76.6206 459.738 73.9482 459.738 73.9482 cv
459.738 73.9482 463.732 75.1025 466.197 71.3237 cv
468.661 67.5454 466.849 63.4185 464.559 62.5586 cv
462.268 61.6987 459.671 63.4429 459.671 63.4429 cv
461.582 59.3506 li
461.582 59.3506 451.845 39.4443 442.975 52.2515 cv
cp
.988235 .639216 .592157 rgb
f
459.671 63.4429 mo
459.671 63.4429 453.826 64.9624 449.356 58.6128 cv
444.887 52.2627 445.114 49.5405 445.114 49.5405 cv
441.399 56.5571 li
441.399 56.5571 440.224 51.8999 441.94 48.7944 cv
443.657 45.6885 445.647 46.2026 445.647 46.2026 cv
458.859 48.7373 li
462.869 58.9927 li
459.671 63.4429 li
cp
0 0 0 rgb
f
444.386 69.7573 mo
444.183 69.7573 443.991 69.6323 443.916 69.4297 cv
442.843 66.5103 444.772 63.3872 444.854 63.2554 cv
445.003 63.0225 445.31 62.9526 445.544 63.0981 cv
445.777 63.2446 445.849 63.5532 445.702 63.7871 cv
445.685 63.8149 443.953 66.6309 444.855 69.085 cv
444.95 69.3438 444.817 69.6313 444.559 69.7266 cv
444.501 69.7476 444.443 69.7573 444.386 69.7573 cv
cp
f
460.57 69.9214 mo
460.456 69.9214 460.341 69.8823 460.247 69.8027 cv
460.036 69.6235 460.011 69.3081 460.189 69.0977 cv
463.716 64.9448 li
463.896 64.7354 464.21 64.7095 464.42 64.8872 cv
464.631 65.0664 464.656 65.3818 464.478 65.5923 cv
460.951 69.7451 li
460.853 69.8613 460.712 69.9214 460.57 69.9214 cv
cp
f
464.469 68.6538 mo
464.419 68.6514 461.815 68.3955 461.815 68.3955 cv
461.541 68.3687 461.34 68.124 461.366 67.8491 cv
461.394 67.5742 461.642 67.3789 461.913 67.4004 cv
464.517 67.6563 li
464.791 67.6831 464.992 67.9277 464.966 68.2026 cv
464.94 68.4609 464.723 68.6538 464.469 68.6538 cv
cp
f
441.116 58.6475 mo
440.889 58.6475 440.683 58.4912 440.629 58.2603 cv
440.566 57.9912 440.734 57.7227 441.004 57.6602 cv
443.422 57.1006 li
443.688 57.0391 443.959 57.2065 444.021 57.4751 cv
444.084 57.7441 443.916 58.0127 443.646 58.0752 cv
441.229 58.6348 li
441.191 58.6436 441.153 58.6475 441.116 58.6475 cv
cp
f
451.351 59.6885 mo
451.283 59.6885 451.215 59.6748 451.149 59.6465 cv
447.035 57.8408 li
446.782 57.7295 446.668 57.4346 446.778 57.1816 cv
446.89 56.9297 447.186 56.8159 447.438 56.9248 cv
451.552 58.7305 li
451.805 58.8418 451.919 59.1367 451.809 59.3896 cv
451.727 59.5767 451.543 59.6885 451.351 59.6885 cv
cp
f
441.429 64.2896 mo
441.39 64.2896 441.349 64.2847 441.309 64.2749 cv
441.04 64.2085 440.877 63.9375 440.943 63.6694 cv
441.504 61.4058 li
440.871 60.7134 li
440.685 60.5093 440.699 60.1934 440.903 60.0068 cv
441.108 59.8213 441.424 59.8354 441.609 60.0386 cv
442.423 60.9287 li
442.535 61.0522 442.579 61.2241 442.539 61.3862 cv
441.914 63.9097 li
441.857 64.1372 441.653 64.2896 441.429 64.2896 cv
cp
f
448.851 64.4292 mo
448.812 64.4292 448.771 64.4243 448.73 64.4146 cv
448.463 64.3481 448.299 64.0771 448.365 63.8091 cv
448.923 61.5532 li
447.993 60.5815 li
447.803 60.3818 447.81 60.0654 448.009 59.8745 cv
448.208 59.6831 448.524 59.6909 448.716 59.8901 cv
449.836 61.0605 li
449.954 61.1841 450.001 61.3599 449.96 61.5264 cv
449.336 64.0493 li
449.279 64.2769 449.075 64.4292 448.851 64.4292 cv
cp
f
498.146 105.43 mo
496.666 107.59 495.006 109.61 493.186 111.49 cv
492.615 112.08 492.035 112.65 491.436 113.2 cv
491.155 113.46 490.876 113.71 490.596 113.95 cv
489.235 115.17 487.796 116.3 486.285 117.35 cv
484.096 118.87 481.766 120.22 479.315 121.35 cv
480.766 89.73 li
480.806 89.7598 480.855 89.7798 480.916 89.8198 cv
481.325 90.1001 482.586 90.9399 484.365 92.2998 cv
484.376 92.3101 484.396 92.3198 484.405 92.3398 cv
487.796 94.9302 493.065 99.3901 498.146 105.43 cv
cp
.968627 .45098 .309804 rgb
f
450.446 89.8423 mo
446.291 89.8423 444.8 87.3315 444.733 87.2168 cv
444.596 86.9771 444.679 86.6714 444.918 86.5342 cv
445.157 86.397 445.462 86.478 445.601 86.7188 cv
445.658 86.8179 447.128 89.1938 451.377 88.7979 cv
455.454 88.4224 459.694 85.543 459.736 85.5142 cv
459.967 85.3564 460.276 85.416 460.432 85.6436 cv
460.588 85.8711 460.53 86.1821 460.303 86.3384 cv
460.121 86.4629 455.81 89.394 451.469 89.7939 cv
451.111 89.8267 450.771 89.8423 450.446 89.8423 cv
cp
1 .74902 .411765 rgb
f
111.045 240.13 mo
104.065 244.31 95.8955 246.71 87.1655 246.71 cv
85.3857 246.71 83.6157 246.61 81.8857 246.42 cv
81.6455 246.4 81.4155 246.37 81.1855 246.34 cv
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
78.9258 246.04 76.7656 245.6 74.6655 245.01 cv
72.1958 244.33 69.8057 243.44 67.5254 242.38 cv
67.1758 242.22 66.8257 242.05 66.4756 241.88 cv
64.2256 240.77 62.0854 239.48 60.0757 238.03 cv
59.9858 231.16 59.9355 225.74 59.9355 225.74 cv
77.6958 212.56 li
86.4155 206.09 li
86.5254 206.09 86.6357 206.09 86.7456 206.1 cv
91.5454 206.2 95.5957 207.18 98.7856 208.36 cv
99.2954 208.56 99.7856 208.75 100.255 208.95 cv
104.686 210.83 107.085 212.94 107.085 212.94 cv
107.085 212.94 109.166 226.72 111.045 240.13 cv
cp
.486275 .376471 .32549 rgb
f
84.436 196.738 mo
84.8066 206.663 li
84.8066 206.663 86.7031 209.45 92.5273 209.705 cv
96.8662 209.895 98.3491 208.86 98.3491 208.86 cv
97.5581 203.856 li
96.7808 198.976 li
86.2095 197.061 li
84.436 196.738 li
cp
.988235 .639216 .592157 rgb
f
84.436 196.264 mo
84.4712 196.535 84.5864 196.851 84.7602 197.211 cv
87.1665 202.087 95.0518 203.726 97.5581 203.856 cv
96.7808 198.976 li
84.436 196.264 li
cp
0 0 0 rgb
f
98.1489 176.27 mo
98.1489 176.27 103.823 188.52 102.028 195.51 cv
100.232 202.501 93.8779 201.546 90.0605 200.285 cv
86.2436 199.025 84.4346 196.74 84.4346 196.74 cv
84.4346 196.74 80.9228 198.017 78.4844 194.779 cv
76.0459 191.54 77.4204 187.73 79.4219 186.82 cv
81.4233 185.91 83.8574 187.316 83.8574 187.316 cv
81.896 183.763 li
81.896 183.763 89.4194 165.324 98.1489 176.27 cv
cp
.988235 .639216 .592157 rgb
f
99.9805 181.387 mo
99.956 181.387 99.9316 181.385 99.9067 181.381 cv
97.4849 181.022 li
97.2114 180.981 97.0229 180.727 97.0635 180.454 cv
97.1045 180.181 97.3603 179.996 97.6313 180.033 cv
100.053 180.392 li
100.327 180.433 100.515 180.687 100.475 180.96 cv
100.437 181.208 100.224 181.387 99.9805 181.387 cv
cp
0 0 0 rgb
f
90.9473 182.388 mo
90.7519 182.388 90.5669 182.272 90.4863 182.082 cv
90.3794 181.827 90.499 181.534 90.7534 181.427 cv
93.5644 180.246 li
93.8193 180.141 94.1118 180.259 94.2192 180.513 cv
94.3262 180.768 94.2065 181.061 93.9521 181.168 cv
91.1411 182.349 li
91.0776 182.375 91.0122 182.388 90.9473 182.388 cv
cp
f
98.0742 191.433 mo
98.0576 191.433 98.0405 191.432 98.0234 191.43 cv
97.7485 191.402 97.5483 191.157 97.5762 190.882 cv
97.9629 187.071 96.3862 185.153 96.3701 185.135 cv
96.1924 184.924 96.2173 184.609 96.4268 184.431 cv
96.6377 184.251 96.9507 184.274 97.1294 184.484 cv
97.206 184.573 99.0044 186.715 98.5713 190.983 cv
98.5449 191.241 98.3276 191.433 98.0742 191.433 cv
cp
f
93.0767 193.81 mo
93.229 194.109 93.4814 194.41 93.8955 194.528 cv
94.311 194.646 94.7007 194.503 95.0054 194.31 cv
93.0767 193.81 li
cp
94.2114 195.573 mo
94.0225 195.573 93.8252 195.548 93.6211 195.49 cv
92.0391 195.038 91.8613 193.227 91.8545 193.149 cv
91.8403 192.988 91.9053 192.829 92.0293 192.724 cv
92.1528 192.619 92.3208 192.58 92.478 192.622 cv
96.1509 193.573 li
96.3125 193.615 96.4429 193.735 96.4976 193.893 cv
96.5527 194.051 96.5249 194.226 96.4238 194.359 cv
96.3809 194.416 95.4853 195.573 94.2114 195.573 cv
cp
f
83.874 192.453 mo
83.8052 192.453 83.7349 192.439 83.6675 192.408 cv
78.6802 190.141 li
78.4287 190.027 78.3179 189.73 78.4321 189.479 cv
78.5459 189.228 78.8408 189.116 79.0942 189.231 cv
84.0815 191.498 li
84.333 191.612 84.4438 191.909 84.3296 192.16 cv
84.2461 192.344 84.0644 192.453 83.874 192.453 cv
cp
f
79.4311 193.605 mo
79.3022 193.605 79.1733 193.556 79.0757 193.457 cv
78.8813 193.261 78.8833 192.944 79.0796 192.75 cv
81.2778 190.577 li
81.4746 190.382 81.791 190.385 81.9849 190.581 cv
82.1792 190.777 82.1772 191.094 81.9809 191.288 cv
79.7827 193.461 li
79.6851 193.558 79.5581 193.605 79.4311 193.605 cv
cp
f
90.9473 176.991 mo
90.9473 176.991 93.7876 176.56 96.751 178.351 cv
99.7143 180.142 100.323 181.888 100.323 181.888 cv
100.323 181.888 102.156 177.263 98.1382 173.183 cv
94.1211 169.102 86.4136 167.971 81.9702 172.798 cv
77.5268 177.626 77.7988 181.888 77.7988 181.888 cv
83.8574 187.316 li
83.8574 187.316 93.2143 185.515 90.9473 176.991 cv
cp
f
80.8892 174.87 mo
80.8892 174.87 75.1728 164.014 69.3789 168.601 cv
63.5845 173.188 70.0366 182.448 75.792 183.124 cv
81.5469 183.799 80.8892 174.87 80.8892 174.87 cv
cp
f
81.8857 246.42 mo
81.6455 246.4 81.4155 246.37 81.1855 246.34 cv
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
78.9258 246.04 76.7656 245.6 74.6655 245.01 cv
77.6958 212.56 li
77.7954 211.53 li
84.5654 203.62 li
84.6455 203.53 li
84.6455 203.53 84.6558 203.55 84.6855 203.6 cv
84.8555 203.87 85.5557 204.95 86.7456 206.1 cv
89.0254 208.31 93.1255 210.8 98.7656 208.37 cv
99.6958 207.97 100.156 208.21 100.255 208.95 cv
100.775 213.03 89.9956 232.48 81.8857 246.42 cv
cp
.486275 .376471 .32549 rgb
f
111.536 239.83 mo
111.375 239.93 111.206 240.03 111.045 240.13 cv
110.835 240.26 110.616 240.39 110.396 240.51 cv
112.565 229.18 108.125 222.69 108.076 222.62 cv
107.916 222.39 107.956 222.06 108.176 221.89 cv
108.406 221.72 108.716 221.77 108.875 222 cv
109.076 222.28 113.416 228.58 111.536 239.83 cv
cp
.988235 .701961 .356863 rgb
f
94.1108 209.864 mo
87.5893 209.864 84.249 203.847 84.209 203.771 cv
84.0776 203.529 84.1684 203.226 84.4111 203.095 cv
84.6533 202.963 84.957 203.053 85.0889 203.296 cv
85.2729 203.636 89.71 211.578 98.5776 207.904 cv
98.8325 207.798 99.1255 207.92 99.2309 208.175 cv
99.3369 208.43 99.2153 208.723 98.9604 208.828 cv
97.1865 209.563 95.5684 209.864 94.1108 209.864 cv
cp
f
328.175 296.589 mo
328.175 296.589 334.633 283.527 345.548 289.822 cv
356.462 296.116 347.321 308.855 363.817 312.219 cv
372.406 313.97 377.774 321.069 375.564 329.4 cv
373.416 337.496 363.844 337.889 363.844 337.889 cv
363.844 337.889 353.391 352.893 341.455 348.467 cv
329.519 344.042 323.966 337.003 324.956 325.728 cv
325.946 314.452 328.175 296.589 328.175 296.589 cv
cp
.898039 .392157 .270588 rgb
f
316.536 308.104 mo
316.536 308.104 309.592 298.258 323.261 290.233 cv
336.929 282.209 347.119 292.811 347.313 298.583 cv
347.508 304.355 344.26 307.074 344.26 307.074 cv
344.26 307.074 345.716 319.563 333.688 318.871 cv
321.66 318.178 316.536 308.104 316.536 308.104 cv
cp
f
334.81 316.847 mo
335.204 326.948 li
335.204 326.948 333.495 329.923 327.604 330.634 cv
323.216 331.163 321.631 330.228 321.631 330.228 cv
322.045 325.088 li
322.456 320.075 li
333.035 317.313 li
334.81 316.847 li
cp
.988235 .639216 .592157 rgb
f
334.773 316.366 mo
334.759 316.644 334.667 316.973 334.518 317.353 cv
332.454 322.486 324.579 324.762 322.045 325.088 cv
322.456 320.075 li
334.773 316.366 li
cp
0 0 0 rgb
f
319.307 297.139 mo
319.307 297.139 314.499 310.01 316.863 316.965 cv
319.227 323.921 325.601 322.458 329.377 320.883 cv
333.153 319.308 334.812 316.849 334.812 316.849 cv
334.812 316.849 338.475 317.873 340.698 314.397 cv
342.922 310.922 341.231 307.161 339.13 306.394 cv
337.028 305.625 334.667 307.241 334.667 307.241 cv
336.381 303.482 li
336.381 303.482 327.317 285.354 319.307 297.139 cv
cp
.988235 .639216 .592157 rgb
f
320.519 312.514 mo
320.281 312.514 320.07 312.344 320.027 312.102 cv
319.258 307.808 320.914 305.497 320.985 305.4 cv
321.149 305.179 321.463 305.131 321.685 305.295 cv
321.906 305.458 321.954 305.77 321.792 305.992 cv
321.777 306.012 320.323 308.084 321.012 311.926 cv
321.061 312.197 320.88 312.457 320.607 312.506 cv
320.578 312.511 320.548 312.514 320.519 312.514 cv
cp
0 0 0 rgb
f
335.009 312.447 mo
334.833 312.447 334.662 312.354 334.57 312.188 cv
334.438 311.946 334.525 311.643 334.768 311.509 cv
339.653 308.821 li
339.892 308.688 340.198 308.776 340.333 309.019 cv
340.466 309.261 340.378 309.564 340.136 309.698 cv
335.25 312.386 li
335.174 312.428 335.091 312.447 335.009 312.447 cv
cp
f
339.607 313.272 mo
339.493 313.272 339.378 313.233 339.284 313.154 cv
336.885 311.12 li
336.674 310.941 336.648 310.626 336.826 310.415 cv
337.007 310.204 337.321 310.181 337.531 310.356 cv
339.931 312.391 li
340.142 312.569 340.167 312.885 339.989 313.096 cv
339.89 313.213 339.749 313.272 339.607 313.272 cv
cp
f
316.536 308.104 mo
316.536 308.104 317.266 304.204 320.932 299.725 cv
324.597 295.246 324.597 295.246 324.597 295.246 cv
324.597 295.246 324.754 303.183 328.551 306.323 cv
332.348 309.463 334.667 307.241 334.667 307.241 cv
340.988 300.788 li
328.093 290.609 li
328.093 290.609 314.586 291.124 316.536 308.104 cv
cp
.898039 .392157 .270588 rgb
f
352.626 364.12 mo
347.525 366.04 342.016 367.08 336.255 367.08 cv
335.525 367.08 334.795 367.06 334.076 367.03 cv
325.426 366.63 317.386 363.88 310.596 359.39 cv
309.525 358.69 308.496 357.95 307.496 357.16 cv
307.045 355.03 306.636 352.3 306.456 348.94 cv
306.196 344.27 307.726 339.7 309.416 336.18 cv
310.846 333.18 313.255 330.81 316.206 329.41 cv
317.216 328.92 318.286 328.55 319.406 328.31 cv
322.355 327.67 li
322.355 327.67 343.985 325.78 347.916 327.57 cv
347.916 327.57 347.936 327.58 347.966 327.59 cv
348.315 327.76 348.506 327.96 348.525 328.19 cv
348.726 330.71 350.926 349.69 352.626 364.12 cv
cp
.988235 .701961 .356863 rgb
f
374.716 346.8 mo
373.325 348.84 371.775 350.75 370.075 352.54 cv
365.416 357.46 359.686 361.36 353.266 363.87 cv
353.046 363.96 352.836 364.04 352.626 364.12 cv
347.525 366.04 342.016 367.08 336.255 367.08 cv
335.525 367.08 334.795 367.06 334.076 367.03 cv
333.826 365.68 li
347.916 327.57 li
347.916 327.57 347.936 327.58 347.966 327.59 cv
348.886 327.94 367.525 331.31 374.716 346.8 cv
cp
f
321.883 327.097 mo
318.079 328.596 li
318.079 328.596 317.344 336.156 326.313 335.933 cv
335.727 335.698 342.529 326.839 342.529 326.839 cv
334.24 326.152 li
321.883 327.097 li
cp
.988235 .639216 .592157 rgb
f
325.893 336.439 mo
323.188 336.439 321.089 335.707 319.641 334.256 cv
317.336 331.945 317.568 328.693 317.58 328.556 cv
317.602 328.28 317.844 328.075 318.117 328.098 cv
318.393 328.119 318.598 328.36 318.576 328.635 cv
318.574 328.664 318.375 331.579 320.355 333.557 cv
321.812 335.011 324.077 335.623 327.11 335.391 cv
336.468 334.657 342.062 326.637 342.116 326.556 cv
342.273 326.328 342.587 326.271 342.812 326.425 cv
343.039 326.581 343.098 326.892 342.942 327.12 cv
342.706 327.467 337.034 335.615 327.188 336.387 cv
326.742 336.422 326.31 336.439 325.893 336.439 cv
cp
1 1 1 rgb
f
323.711 316.104 mo
323.506 316.104 323.313 315.977 323.24 315.772 cv
323.147 315.513 323.281 315.228 323.54 315.134 cv
323.553 315.129 324.789 314.661 325.567 313.304 cv
325.704 313.063 326.01 312.981 326.25 313.119 cv
326.489 313.256 326.572 313.562 326.435 313.802 cv
325.467 315.491 323.943 316.051 323.88 316.074 cv
323.824 316.094 323.767 316.104 323.711 316.104 cv
cp
0 0 0 rgb
f
347.145 301.733 mo
346.858 301.729 346.64 301.5 346.645 301.224 cv
346.832 291.399 338.749 288.431 338.404 288.31 cv
338.145 288.218 338.008 287.933 338.099 287.672 cv
338.19 287.412 338.476 287.273 338.735 287.366 cv
338.827 287.397 347.847 290.68 347.645 301.243 cv
347.64 301.516 347.416 301.733 347.145 301.733 cv
cp
.988235 .701961 .356863 rgb
f
341.093 70.5356 mo
341.589 70.8027 342.026 70.9438 342.227 70.8398 cv
342.389 70.7524 342.542 70.6592 342.686 70.5645 cv
341.093 70.5356 li
cp
342.082 71.8652 mo
340.922 71.8652 339.453 70.666 339.125 70.3853 cv
338.965 70.248 338.908 70.0249 338.982 69.8276 cv
339.058 69.6309 339.256 69.5029 339.459 69.5054 cv
344.074 69.5898 li
344.273 69.5938 344.452 69.7148 344.527 69.8989 cv
344.604 70.0835 344.563 70.2949 344.425 70.438 cv
344.395 70.4683 343.692 71.1875 342.699 71.7207 cv
342.512 71.8218 342.302 71.8652 342.082 71.8652 cv
cp
0 0 0 rgb
f
324.042 179.882 mo
324.042 179.882 319.581 183.625 319.159 187.38 cv
318.738 191.135 318.738 191.135 318.738 191.135 cv
318.738 191.135 313.391 192.842 311.776 199.303 cv
309.584 208.074 315.563 211.124 315.563 211.124 cv
361.999 216.138 li
361.999 216.138 367.456 211.354 366.364 203.669 cv
365.271 195.983 360.773 193.538 360.773 193.538 cv
360.773 193.538 361.515 188.597 359.027 183.634 cv
356.158 177.905 350.267 177.849 350.267 177.849 cv
324.042 179.882 li
cp
f
372.226 228.83 mo
366.186 236.54 357.766 242.3 348.065 245 cv
344.075 246.12 339.865 246.71 335.525 246.71 cv
333.875 246.71 332.246 246.63 330.636 246.46 cv
329.585 246.35 328.545 246.2 327.516 246.02 cv
326.375 245.82 325.255 245.58 324.146 245.3 cv
323.936 245.25 323.716 245.2 323.505 245.14 cv
321.726 244.67 319.976 244.09 318.286 243.41 cv
315.306 242.23 312.466 240.74 309.826 238.99 cv
309.926 236.5 310.096 235.09 310.096 235.09 cv
317.625 211.34 li
318.366 209 li
318.806 207.6 319.706 206.43 320.896 205.65 cv
321.505 205.24 322.196 204.94 322.936 204.78 cv
324.315 204.46 326.036 204.11 327.986 203.78 cv
328.596 203.69 329.206 203.59 329.855 203.5 cv
331.875 203.22 334.096 203 336.386 202.9 cv
337.766 202.84 339.146 202.83 340.535 202.88 cv
341.155 202.9 341.775 202.93 342.396 202.97 cv
343.115 203.03 343.825 203.1 344.546 203.18 cv
345.346 203.28 346.136 203.4 346.926 203.56 cv
348.726 203.9 350.485 204.38 352.155 205.03 cv
356.586 206.76 360.436 210.32 363.605 214.31 cv
367.646 219.4 370.586 225.2 372.226 228.83 cv
cp
.313726 .470588 .286275 rgb
f
342.538 200.744 mo
342.538 200.744 345.803 201.814 346.792 203.334 cv
347.902 205.037 345.826 209.522 339.92 213.011 cv
335.606 215.559 331.963 216.46 331.963 216.46 cv
331.963 216.46 328.207 211.264 327.486 208.104 cv
326.766 204.946 329.41 200.803 329.41 200.803 cv
342.538 200.744 li
cp
.988235 .701961 .356863 rgb
f
325.25 185.72 mo
325.25 185.72 321.322 179.722 321.353 176.78 cv
321.384 173.838 331.192 163.472 341.451 166.354 cv
351.711 169.236 354.404 181.662 353.104 187.197 cv
349.757 201.45 337.249 197.192 337.249 197.192 cv
337.249 197.192 318.007 194.609 325.25 185.72 cv
cp
0 0 0 rgb
f
329.377 200.542 mo
329.41 200.803 li
330.225 205.684 li
330.848 209.514 li
330.848 209.514 330.627 210.448 335.072 209.614 cv
341.025 208.473 342.647 205.659 342.647 205.659 cv
341.809 196.607 li
340.03 197.175 li
329.377 200.542 li
cp
.94902 .494118 .392157 rgb
f
329.41 200.803 mo
330.225 205.684 li
333.099 204.976 338.256 203.068 339.844 198.219 cv
339.963 197.826 340.031 197.478 340.033 197.194 cv
329.419 200.726 li
329.41 200.803 li
cp
0 0 0 rgb
f
324.657 177.545 mo
324.657 177.545 320.624 191.001 323.507 197.936 cv
326.39 204.87 332.793 202.947 336.538 201.084 cv
340.283 199.222 341.809 196.601 341.809 196.601 cv
341.809 196.601 345.614 197.397 347.647 193.701 cv
349.68 190.005 347.7 186.284 345.505 185.643 cv
343.309 185.001 341.01 186.81 341.01 186.81 cv
342.504 182.86 li
342.504 182.86 332.029 164.98 324.657 177.545 cv
cp
.94902 .494118 .392157 rgb
f
327.164 193.803 mo
326.975 193.803 326.793 193.694 326.709 193.51 cv
325.497 190.849 327.085 187.788 327.152 187.659 cv
327.282 187.414 327.585 187.321 327.827 187.45 cv
328.071 187.579 328.165 187.881 328.037 188.125 cv
328.022 188.152 326.613 190.886 327.619 193.096 cv
327.733 193.347 327.623 193.644 327.371 193.758 cv
327.304 193.789 327.233 193.803 327.164 193.803 cv
cp
0 0 0 rgb
f
342.268 192.821 mo
342.165 192.821 342.063 192.79 341.974 192.726 cv
341.75 192.563 341.701 192.25 341.863 192.027 cv
344.86 187.908 li
345.022 187.684 345.336 187.636 345.559 187.797 cv
345.782 187.96 345.831 188.272 345.669 188.496 cv
342.672 192.615 li
342.574 192.75 342.422 192.821 342.268 192.821 cv
cp
f
345.813 191.366 mo
345.801 191.366 343.355 191.31 343.355 191.31 cv
343.08 191.304 342.861 191.075 342.867 190.798 cv
342.874 190.523 343.097 190.302 343.379 190.31 cv
345.824 190.366 li
346.1 190.373 346.318 190.602 346.313 190.878 cv
346.306 191.15 346.084 191.366 345.813 191.366 cv
cp
f
328.957 196.434 mo
329.199 196.889 329.567 197.396 329.934 197.51 cv
330.041 197.543 330.19 197.561 330.417 197.41 cv
331.103 196.95 331.727 195.831 332.144 194.901 cv
328.957 196.434 li
cp
330.074 198.533 mo
329.927 198.533 329.779 198.51 329.633 198.464 cv
328.532 198.118 327.898 196.555 327.83 196.377 cv
327.735 196.134 327.844 195.859 328.079 195.746 cv
332.858 193.447 li
333.04 193.36 333.255 193.391 333.404 193.522 cv
333.556 193.654 333.612 193.863 333.551 194.053 cv
333.509 194.182 332.503 197.215 330.974 198.24 cv
330.686 198.434 330.38 198.533 330.074 198.533 cv
cp
f
333.972 183.455 mo
333.813 183.455 333.656 183.379 333.56 183.238 cv
332.872 182.237 331.384 182.748 331.368 182.753 cv
331.104 182.844 330.822 182.709 330.729 182.449 cv
330.638 182.188 330.774 181.902 331.034 181.811 cv
331.126 181.778 333.265 181.044 334.384 182.672 cv
334.54 182.899 334.482 183.21 334.255 183.367 cv
334.169 183.427 334.069 183.455 333.972 183.455 cv
cp
f
323.044 183.404 mo
322.927 183.404 322.809 183.363 322.714 183.279 cv
322.507 183.097 322.486 182.783 322.668 182.575 cv
322.768 182.461 323.676 181.461 324.819 181.457 cv
325.397 181.457 325.925 181.712 326.355 182.196 cv
326.539 182.402 326.521 182.718 326.314 182.902 cv
326.108 183.085 325.792 183.066 325.609 182.861 cv
325.366 182.588 325.114 182.448 324.826 182.457 cv
324.236 182.458 323.61 183.019 323.419 183.235 cv
323.32 183.347 323.183 183.404 323.044 183.404 cv
cp
f
341.01 186.81 mo
341.01 186.81 335.072 184.667 332.542 180.913 cv
330.012 177.158 329.679 175.154 329.679 175.154 cv
329.679 175.154 329.2 177.891 327.248 178.771 cv
325.295 179.65 324.042 179.882 324.042 179.882 cv
323.224 183.79 li
322.925 174.761 li
322.925 174.761 328.054 171.114 328.791 171.019 cv
329.528 170.925 339.039 171.4 339.649 171.891 cv
340.259 172.382 344.114 179.229 344.114 179.229 cv
344.735 182.464 li
341.01 186.81 li
cp
f
333.901 186.58 mo
333.712 186.58 333.531 186.471 333.447 186.288 cv
333.249 185.857 333.009 185.619 332.712 185.56 cv
332.121 185.444 331.347 186.012 331.101 186.242 cv
330.898 186.43 330.582 186.419 330.394 186.218 cv
330.206 186.017 330.216 185.701 330.417 185.512 cv
330.545 185.392 331.713 184.345 332.902 184.578 cv
333.334 184.663 333.937 184.956 334.355 185.872 cv
334.471 186.123 334.36 186.419 334.109 186.534 cv
334.042 186.565 333.972 186.58 333.901 186.58 cv
cp
f
323.916 186.61 mo
323.856 186.61 323.797 186.6 323.738 186.578 cv
323.479 186.479 323.351 186.19 323.449 185.932 cv
323.816 184.966 324.315 184.453 324.933 184.407 cv
325.938 184.329 326.632 185.545 326.71 185.684 cv
326.846 185.924 326.761 186.228 326.521 186.364 cv
326.281 186.5 325.976 186.414 325.84 186.176 cv
325.652 185.849 325.258 185.371 325.007 185.404 cv
324.87 185.415 324.625 185.653 324.383 186.289 cv
324.308 186.488 324.117 186.61 323.916 186.61 cv
cp
f
342.251 201.384 mo
342.251 201.384 335.895 207.377 332.172 207.411 cv
328.449 207.446 328.971 204.351 328.971 204.351 cv
329.585 211.492 li
332.874 212.57 li
341.095 209.257 li
345.708 204.093 li
342.251 201.384 li
cp
.988235 .701961 .356863 rgb
f
335.527 212.932 mo
335.527 212.932 338.314 216.745 338.881 222.728 cv
339.448 228.71 335.975 235.434 335.975 235.434 cv
335.975 235.434 330.405 229.118 329.668 224.352 cv
328.931 219.584 331.482 212.815 331.482 212.815 cv
331.482 212.815 328.958 218.558 328.334 222.071 cv
327.71 225.585 326.849 230.102 326.849 230.102 cv
326.849 230.102 323.47 225.622 323.672 220.304 cv
323.874 214.985 329.585 211.492 329.585 211.492 cv
335.527 212.932 li
cp
f
330.92 207.95 mo
330.688 207.95 330.622 208.042 330.588 208.089 cv
330.169 208.668 330.582 210.534 331.141 212.162 cv
331.607 210.708 331.956 208.959 331.523 208.249 cv
331.411 208.065 331.25 207.974 331.002 207.953 cv
330.973 207.951 330.945 207.95 330.92 207.95 cv
cp
334.814 214.688 mo
333.279 214.688 331.301 214.153 331.019 214.074 cv
330.982 214.063 330.964 214.057 330.946 214.048 cv
330.834 213.998 330.741 213.907 330.69 213.787 cv
330.354 212.992 328.729 208.954 329.777 207.503 cv
329.981 207.222 330.368 206.893 331.084 206.957 cv
331.651 207.003 332.099 207.271 332.378 207.729 cv
333.213 209.102 332.282 212.011 331.822 213.248 cv
332.902 213.507 334.742 213.853 335.592 213.606 cv
336.491 213.347 337.001 210.25 336.642 208.502 cv
336.586 208.231 336.76 207.967 337.03 207.912 cv
337.294 207.854 337.565 208.029 337.621 208.301 cv
337.945 209.878 337.733 214.027 335.869 214.567 cv
335.57 214.653 335.207 214.688 334.814 214.688 cv
cp
.968627 .45098 .309804 rgb
f
334.226 216.393 mo
333.899 218.501 333.751 220.913 334.335 221.641 cv
334.423 221.749 334.51 221.793 334.636 221.793 cv
334.762 221.793 334.814 221.752 334.863 221.682 cv
335.336 221.004 334.869 218.581 334.226 216.393 cv
cp
334.635 222.793 mo
334.206 222.793 333.832 222.611 333.556 222.267 cv
332.228 220.613 333.461 214.917 333.606 214.273 cv
333.654 214.057 333.841 213.898 334.062 213.884 cv
334.273 213.859 334.487 214.003 334.563 214.212 cv
334.949 215.271 336.813 220.634 335.684 222.254 cv
335.438 222.604 335.078 222.791 334.642 222.793 cv
334.64 222.793 334.638 222.793 334.635 222.793 cv
cp
f
324.146 245.3 mo
323.936 245.25 323.716 245.2 323.505 245.14 cv
321.726 244.67 319.976 244.09 318.286 243.41 cv
315.306 242.23 312.466 240.74 309.826 238.99 cv
309.005 238.45 308.196 237.88 307.416 237.29 cv
305.855 236.11 304.375 234.84 302.976 233.47 cv
302.996 233.34 303.025 233.21 303.056 233.08 cv
305.605 221.54 310.446 214.44 314.446 210.32 cv
318.065 206.6 321.532 205.28 321.532 205.28 cv
321.492 205.4 320.936 205.52 320.896 205.65 cv
320.505 207.09 320.326 209.14 320.315 211.63 cv
320.286 220.22 322.246 233.98 324.146 245.3 cv
cp
.313726 .470588 .286275 rgb
f
85.1084 196.264 mo
85.1084 197.246 84.3125 198.042 83.331 198.042 cv
82.3496 198.042 81.5537 197.246 81.5537 196.264 cv
81.5537 195.283 82.3496 194.487 83.331 194.487 cv
84.3125 194.487 85.1084 195.283 85.1084 196.264 cv
cp
.466667 .447059 .827451 rgb
f
92.3525 187.485 mo
92.0762 187.485 91.8525 187.262 91.8525 186.985 cv
91.8525 184.81 li
91.8525 184.679 91.9043 184.553 91.9966 184.459 cv
92.9595 183.482 li
93.1533 183.286 93.4697 183.284 93.6665 183.478 cv
93.8633 183.671 93.8652 183.988 93.6714 184.185 cv
92.8525 185.015 li
92.8525 186.985 li
92.8525 187.262 92.6289 187.485 92.3525 187.485 cv
cp
0 0 0 rgb
f
99.499 187.485 mo
99.2226 187.485 98.999 187.262 98.999 186.985 cv
98.999 184.81 li
98.999 184.679 99.0508 184.553 99.1431 184.459 cv
100.105 183.482 li
100.298 183.286 100.615 183.283 100.812 183.478 cv
101.009 183.671 101.011 183.988 100.817 184.185 cv
99.999 185.015 li
99.999 186.985 li
99.999 187.262 99.7754 187.485 99.499 187.485 cv
cp
f
591.004 54.5044 mo
591.004 54.5044 604.229 50.9458 614.066 62.9937 cv
623.904 75.0415 617.791 89.8726 602.206 89.4468 cv
586.62 89.021 582.996 73.0933 582.996 73.0933 cv
591.004 54.5044 li
cp
f
609.266 118.16 mo
607.056 119.6 604.706 120.85 602.256 121.91 cv
596.615 124.33 590.405 125.67 583.886 125.67 cv
578.006 125.67 572.376 124.58 567.195 122.59 cv
563.506 121.18 560.056 119.31 556.886 117.06 cv
557.775 103.72 559.195 90.9199 561.426 88.1099 cv
564.686 83.9902 568.516 82.4702 573.025 81.6401 cv
575.426 81.2002 577.976 80.96 580.726 80.6201 cv
584.766 80.1299 589.636 80.23 593.985 80.6699 cv
598.306 81.1001 602.075 81.8701 604.075 82.73 cv
606.146 83.6201 608.126 101.05 609.266 118.16 cv
cp
.988235 .701961 .356863 rgb
f
573.986 72.2573 mo
573.433 74.7847 571.915 76.5991 570.597 76.3105 cv
569.277 76.022 568.657 73.7393 569.21 71.2119 cv
569.764 68.6851 571.281 66.8701 572.6 67.1587 cv
573.918 67.4478 574.539 69.73 573.986 72.2573 cv
cp
.313726 .470588 .286275 rgb
f
625.966 99.1401 mo
622.246 106.91 616.436 113.49 609.266 118.16 cv
607.056 119.6 604.706 120.85 602.256 121.91 cv
591.846 80.6699 li
591.846 80.6699 592.626 80.6099 593.985 80.6699 cv
599.466 80.9302 614.016 83.1899 625.966 99.1401 cv
cp
.988235 .701961 .356863 rgb
f
571.147 64.4199 mo
571.147 64.4199 567.388 60.4219 568.327 54.0962 cv
568.964 49.8076 570.84 48.3877 570.84 48.3877 cv
570.84 48.3877 567.829 42.6084 576.462 42.7959 cv
585.094 42.9839 592.166 42.2471 596.013 49.6719 cv
598.278 54.0464 597.377 63.5483 597.377 63.5483 cv
571.147 64.4199 li
cp
0 0 0 rgb
f
590.22 71.1631 mo
590.158 81.6973 li
590.158 81.6973 588.241 84.7144 582.075 85.1792 cv
577.482 85.5254 576.043 83.1592 576.043 83.1592 cv
577.208 73.9478 li
588.351 71.5649 li
590.22 71.1631 li
cp
.94902 .494118 .392157 rgb
f
590.207 70.5205 mo
590.179 70.8081 590.068 71.147 589.896 71.5352 cv
587.508 76.7832 579.2 78.9248 576.547 79.147 cv
577.208 73.9478 li
590.207 70.5205 li
cp
0 0 0 rgb
f
575 49.9229 mo
575 49.9229 569.395 63.0981 571.53 70.4492 cv
573.667 77.7998 580.372 76.5747 584.376 75.1113 cv
588.38 73.6475 590.222 71.1655 590.222 71.1655 cv
590.222 71.1655 593.987 72.4014 596.464 68.8872 cv
598.94 65.3726 597.355 61.3794 595.204 60.4819 cv
593.052 59.584 590.519 61.1563 590.519 61.1563 cv
592.479 57.3237 li
592.479 57.3237 583.889 38.0283 575 49.9229 cv
cp
.94902 .494118 .392157 rgb
f
590.519 61.1563 mo
590.519 61.1563 584.899 62.4028 580.859 56.2007 cv
576.82 49.999 577.131 47.4141 577.131 47.4141 cv
573.351 53.9697 li
573.351 53.9697 572.392 49.4932 574.134 46.5938 cv
575.876 43.6948 577.753 44.2529 577.753 44.2529 cv
590.25 47.1206 li
593.718 57.0273 li
590.519 61.1563 li
cp
0 0 0 rgb
f
575.76 66.6694 mo
575.55 66.6694 575.354 66.5356 575.284 66.3252 cv
574.358 63.4961 576.31 60.5781 576.394 60.4551 cv
576.549 60.2271 576.859 60.1689 577.087 60.3228 cv
577.315 60.4775 577.375 60.7886 577.221 61.0171 cv
577.203 61.043 575.463 63.6567 576.235 66.0137 cv
576.321 66.2764 576.178 66.5586 575.915 66.6445 cv
575.863 66.6616 575.812 66.6694 575.76 66.6694 cv
cp
f
591.17 67.3818 mo
591.05 67.3818 590.929 67.3384 590.833 67.251 cv
590.629 67.0649 590.614 66.7485 590.801 66.5444 cv
594.303 62.71 li
594.488 62.5073 594.806 62.4922 595.009 62.6782 cv
595.213 62.8643 595.228 63.1807 595.041 63.3848 cv
591.539 67.2192 li
591.44 67.3271 591.306 67.3818 591.17 67.3818 cv
cp
f
594.927 66.3081 mo
594.904 66.3081 594.882 66.3066 594.859 66.3037 cv
592.388 65.9707 li
592.113 65.9336 591.922 65.6821 591.959 65.4082 cv
591.995 65.1343 592.251 64.9414 592.521 64.9795 cv
594.992 65.3125 li
595.267 65.3496 595.458 65.6011 595.421 65.875 cv
595.388 66.126 595.173 66.3081 594.927 66.3081 cv
cp
f
573.026 55.9746 mo
572.792 55.9746 572.583 55.8086 572.536 55.5698 cv
572.484 55.2988 572.661 55.0361 572.933 54.9839 cv
575.254 54.5342 li
575.512 54.4819 575.786 54.6582 575.84 54.9297 cv
575.892 55.2007 575.715 55.4634 575.443 55.5156 cv
573.122 55.9653 li
573.091 55.9717 573.059 55.9746 573.026 55.9746 cv
cp
f
582.739 57.3179 mo
582.666 57.3179 582.592 57.3018 582.522 57.2681 cv
578.665 55.4072 li
578.416 55.2876 578.312 54.9883 578.432 54.7397 cv
578.552 54.4907 578.853 54.3872 579.099 54.5068 cv
582.956 56.3677 li
583.205 56.4873 583.31 56.7866 583.189 57.0352 cv
583.104 57.2139 582.925 57.3179 582.739 57.3179 cv
cp
f
573.131 61.3594 mo
573.086 61.3594 573.039 61.353 572.993 61.3398 cv
572.728 61.2642 572.574 60.9873 572.65 60.7217 cv
573.258 58.5972 li
572.688 57.9253 li
572.509 57.7148 572.534 57.3994 572.745 57.2207 cv
572.956 57.0415 573.271 57.0674 573.449 57.2778 cv
574.193 58.1538 li
574.302 58.2813 574.339 58.4546 574.293 58.6152 cv
573.611 60.9971 li
573.549 61.2163 573.349 61.3594 573.131 61.3594 cv
cp
f
579.77 61.8682 mo
579.725 61.8682 579.678 61.8618 579.632 61.8486 cv
579.366 61.7729 579.213 61.4961 579.289 61.2305 cv
579.895 59.1133 li
579.052 58.1655 li
578.868 57.959 578.886 57.6431 579.093 57.4595 cv
579.297 57.2754 579.614 57.2939 579.798 57.5005 cv
580.824 58.6538 li
580.938 58.7817 580.979 58.959 580.932 59.124 cv
580.25 61.5059 li
580.188 61.7251 579.987 61.8682 579.77 61.8682 cv
cp
f
577.664 70.0898 mo
577.348 70.0898 577.037 70.0244 576.742 69.8696 cv
576.497 69.7417 576.402 69.4399 576.53 69.1948 cv
576.66 68.9502 576.964 68.856 577.205 68.9839 cv
578.224 69.5137 580.099 67.8931 580.673 67.2817 cv
580.863 67.0801 581.179 67.0708 581.38 67.2598 cv
581.581 67.4487 581.591 67.7651 581.401 67.9663 cv
581.166 68.2173 579.349 70.0898 577.664 70.0898 cv
cp
f
576.298 81.1479 mo
571.045 82.0649 li
571.045 82.0649 571.155 89.1045 581.037 89.9932 cv
590.918 90.8823 597.554 81.0361 597.554 81.0361 cv
587.177 79.7778 li
576.298 81.1479 li
cp
.94902 .494118 .392157 rgb
f
595.36 72.8486 mo
595.521 75.4307 594.559 77.5918 593.211 77.6753 cv
591.864 77.7593 590.642 75.7339 590.481 73.1519 cv
590.32 70.5698 591.283 68.4087 592.631 68.3252 cv
593.978 68.2412 595.2 70.2666 595.36 72.8486 cv
cp
.313726 .470588 .286275 rgb
f
473.947 305.432 mo
473.947 305.432 474.756 307.186 473.792 307.925 cv
472.827 308.664 471.695 308.069 471.695 308.069 cv
473.947 305.432 li
cp
.968627 .45098 .309804 rgb
f
446.647 305.234 mo
446.647 305.234 445.699 306.917 446.601 307.731 cv
447.502 308.546 448.678 308.045 448.678 308.045 cv
446.647 305.234 li
cp
f
316.206 329.4 mo
316.206 329.41 313.815 358.75 313.815 358.75 cv
310.596 359.39 li
309.525 358.69 308.496 357.95 307.496 357.16 cv
303.706 354.19 300.386 350.64 297.666 346.64 cv
297.616 346.57 297.565 346.5 297.516 346.42 cv
299.835 343.4 303.386 339.09 306.986 335.94 cv
313.486 330.25 316.206 329.4 316.206 329.4 cv
cp
.988235 .701961 .356863 rgb
f
460.178 334.676 mo
451.809 334.676 447.148 308.704 446.952 307.587 cv
446.904 307.314 447.086 307.056 447.357 307.008 cv
447.624 306.955 447.889 307.141 447.937 307.413 cv
449.232 314.783 453.93 333.676 460.175 333.676 cv
460.248 333.676 460.321 333.674 460.396 333.668 cv
469.176 333.044 472.685 307.345 472.719 307.086 cv
472.756 306.812 473.013 306.617 473.28 306.655 cv
473.555 306.692 473.747 306.943 473.711 307.217 cv
473.565 308.31 470.054 333.983 460.466 334.666 cv
460.369 334.673 460.273 334.676 460.178 334.676 cv
cp
.968627 .45098 .309804 rgb
f
465.985 366.75 mo
465.615 366.8 465.226 366.84 464.846 366.87 cv
458.346 357.35 459.855 335.21 459.936 334.13 cv
459.956 333.86 460.195 333.65 460.466 333.67 cv
460.746 333.69 460.945 333.93 460.926 334.2 cv
460.905 334.47 459.306 357.83 465.985 366.75 cv
cp
f
75.1152 72.8271 mo
74.9365 72.8271 74.7637 72.7314 74.6738 72.563 cv
74.5434 72.3193 74.6357 72.0161 74.8789 71.8862 cv
77.5596 70.4536 li
77.8027 70.3237 78.1069 70.415 78.2363 70.6587 cv
78.3667 70.9023 78.2744 71.2056 78.0312 71.3354 cv
75.3506 72.7681 li
75.2754 72.8081 75.1948 72.8271 75.1152 72.8271 cv
cp
0 0 0 rgb
f
307.271 356.627 mo
307.042 356.627 306.836 356.47 306.783 356.237 cv
303.451 341.55 310.646 334.123 310.954 333.814 cv
311.148 333.618 311.464 333.618 311.661 333.813 cv
311.856 334.007 311.857 334.323 311.663 334.52 cv
311.592 334.592 304.555 341.896 307.758 356.017 cv
307.819 356.285 307.65 356.554 307.381 356.614 cv
307.344 356.623 307.307 356.627 307.271 356.627 cv
cp
1 1 1 rgb
f
350.981 364.969 mo
350.735 364.969 350.521 364.786 350.487 364.535 cv
349.805 359.456 li
349.768 359.183 349.96 358.931 350.233 358.895 cv
350.498 358.844 350.759 359.049 350.795 359.323 cv
351.478 364.402 li
351.515 364.676 351.322 364.928 351.049 364.964 cv
351.026 364.968 351.004 364.969 350.981 364.969 cv
cp
f
317.806 302.466 mo
317.577 302.466 317.371 302.309 317.318 302.076 cv
317.257 301.808 317.426 301.539 317.695 301.479 cv
320.126 300.927 li
320.397 300.861 320.662 301.034 320.724 301.304 cv
320.785 301.572 320.616 301.841 320.347 301.901 cv
317.916 302.453 li
317.879 302.462 317.842 302.466 317.806 302.466 cv
cp
0 0 0 rgb
f
327.051 302.781 mo
326.998 302.781 326.945 302.773 326.893 302.756 cv
323.948 301.776 li
323.687 301.689 323.545 301.406 323.632 301.144 cv
323.72 300.882 324.001 300.738 324.265 300.827 cv
327.209 301.807 li
327.471 301.894 327.612 302.177 327.525 302.439 cv
327.455 302.648 327.261 302.781 327.051 302.781 cv
cp
f
318.646 307.226 mo
318.616 307.226 318.586 307.223 318.556 307.218 cv
318.284 307.168 318.104 306.907 318.153 306.636 cv
318.486 304.814 li
317.854 304.078 li
317.675 303.869 317.699 303.554 317.909 303.373 cv
318.117 303.195 318.434 303.219 318.614 303.428 cv
319.401 304.345 li
319.499 304.459 319.54 304.611 319.514 304.76 cv
319.138 306.815 li
319.093 307.057 318.883 307.226 318.646 307.226 cv
cp
f
325.392 307.444 mo
325.361 307.444 325.331 307.441 325.301 307.437 cv
325.029 307.387 324.849 307.126 324.898 306.854 cv
325.226 305.065 li
324.5 304.38 li
324.3 304.19 324.291 303.874 324.48 303.673 cv
324.671 303.474 324.986 303.463 325.188 303.653 cv
326.11 304.525 li
326.233 304.642 326.289 304.813 326.259 304.979 cv
325.883 307.034 li
325.838 307.275 325.628 307.444 325.392 307.444 cv
cp
f
248.835 106.73 mo
247.275 108.87 245.516 110.86 243.605 112.69 cv
240.576 115.61 237.136 118.12 233.396 120.13 cv
228.466 87.1001 li
229.226 87.2202 240.266 89.2402 248.835 106.73 cv
cp
.988235 .701961 .356863 rgb
f
222.438 90.8413 mo
222.149 90.8413 221.849 90.8369 221.535 90.8281 cv
215.403 90.6528 211.555 87.1826 211.394 87.0347 cv
211.19 86.8481 211.177 86.5327 211.363 86.3291 cv
211.55 86.1255 211.865 86.1113 212.07 86.2979 cv
212.106 86.3315 215.819 89.6641 221.563 89.8281 cv
227.111 89.9932 228.334 88.6187 228.346 88.6055 cv
228.52 88.3989 228.83 88.3628 229.043 88.5308 cv
229.254 88.6987 229.3 88.9966 229.139 89.2134 cv
229.01 89.3877 227.772 90.8413 222.438 90.8413 cv
cp
.466667 .447059 .827451 rgb
f
90.9697 70.0259 mo
88.5903 70.0259 li
87.2417 70.0259 86.1484 68.9321 86.1484 67.5835 cv
86.1484 65.1152 li
86.1484 64.6167 86.5527 64.2124 87.0513 64.2124 cv
92.5088 64.2124 li
93.0073 64.2124 93.4116 64.6167 93.4116 65.1152 cv
93.4116 67.5835 li
93.4116 68.9321 92.3184 70.0259 90.9697 70.0259 cv
cp
0 0 0 rgb
f
101.17 70.1494 mo
98.7905 70.1494 li
97.4419 70.1494 96.3486 69.0557 96.3486 67.7075 cv
96.3486 65.2388 li
96.3486 64.7402 96.7529 64.3359 97.2515 64.3359 cv
102.709 64.3359 li
103.208 64.3359 103.612 64.7402 103.612 65.2388 cv
103.612 67.7075 li
103.612 69.0557 102.519 70.1494 101.17 70.1494 cv
cp
f
93.4121 68.082 mo
93.2827 68.082 93.1538 68.0322 93.0561 67.9331 cv
92.8633 67.7368 92.8643 67.4229 93.0591 67.229 cv
93.1269 67.1611 94.7598 65.5747 97.5415 66.1909 cv
97.811 66.2505 97.9814 66.5176 97.9219 66.7871 cv
97.8618 67.0562 97.5933 67.2251 97.3257 67.1675 cv
95.0937 66.6743 93.8154 67.8882 93.7622 67.9399 cv
93.665 68.0347 93.5386 68.082 93.4121 68.082 cv
cp
f
77.3071 65.9678 mo
77.0786 65.9678 76.8721 65.8101 76.8198 65.5776 cv
76.7593 65.3081 76.9287 65.0405 77.1977 64.98 cv
83.3442 63.5991 87.0942 64.9019 87.251 64.9575 cv
87.5102 65.0508 87.645 65.3359 87.5527 65.5957 cv
87.46 65.855 87.1738 65.9907 86.9141 65.8994 cv
86.8779 65.8867 83.2554 64.6421 77.4175 65.9556 cv
77.3804 65.9639 77.3433 65.9678 77.3071 65.9678 cv
cp
f
431.565 116.22 mo
430.766 115.62 429.985 114.99 429.235 114.34 cv
429.046 114.18 428.855 114.01 428.676 113.84 cv
427.936 113.18 427.216 112.5 426.516 111.8 cv
426.115 111.39 425.716 110.97 425.325 110.54 cv
424.945 110.12 424.565 109.7 424.206 109.27 cv
423.075 107.95 422.016 106.56 421.035 105.11 cv
423.336 99.4199 427.105 92.7402 432.775 89.8101 cv
432.796 89.79 432.815 89.7798 432.836 89.77 cv
432.865 89.7598 432.886 89.7402 432.916 89.73 cv
437.916 87.2002 434.336 104.81 431.565 116.22 cv
cp
.968627 .45098 .309804 rgb
f
448.916 72.1372 mo
448.75 72.1372 448.587 72.0547 448.492 71.9038 cv
448.345 71.6699 448.415 71.3613 448.648 71.2144 cv
449.483 70.6875 450.372 69.8452 450.363 69.4316 cv
450.357 69.1558 450.577 68.9272 450.853 68.9214 cv
451.135 68.9214 451.357 69.1382 451.363 69.4111 cv
451.389 70.6104 449.55 71.8286 449.182 72.0605 cv
449.099 72.1123 449.007 72.1372 448.916 72.1372 cv
cp
0 0 0 rgb
f
327.981 72.1055 mo
327.981 73.4116 326.922 74.4707 325.616 74.4707 cv
324.31 74.4707 323.251 73.4116 323.251 72.1055 cv
323.251 70.7993 324.31 69.7407 325.616 69.7407 cv
326.922 69.7407 327.981 70.7993 327.981 72.1055 cv
cp
1 1 1 rgb
f
464.48 195.427 mo
464.48 195.427 470.534 195.697 474.021 187.247 cv
477.508 178.797 473.146 172.187 473.146 172.187 cv
465.545 176.167 li
461.415 191.26 li
464.48 195.427 li
cp
0 0 0 rgb
f
485.436 238.97 mo
482.096 241.18 478.466 242.98 474.605 244.28 cv
469.926 245.85 464.916 246.71 459.706 246.71 cv
450.376 246.71 441.686 243.97 434.396 239.25 cv
434.396 225.2 434.806 209.22 436.655 205.99 cv
437.876 203.85 441.376 202.37 445.386 201.35 cv
452.646 199.5 461.546 199.15 461.546 199.15 cv
461.546 199.15 471.355 198.82 478.476 202.67 cv
479.646 203.3 480.746 204.05 481.716 204.93 cv
485.266 208.15 485.775 224.21 485.436 238.97 cv
cp
.466667 .447059 .827451 rgb
f
464.266 191.775 mo
465.109 201.724 li
465.109 201.724 463.557 204.736 457.776 205.702 cv
453.471 206.423 451.864 205.571 451.864 205.571 cv
452.042 200.481 li
452.222 195.517 li
462.535 192.314 li
464.266 191.775 li
cp
.988235 .639216 .592157 rgb
f
462.535 192.314 mo
462.533 192.588 462.457 192.917 462.327 193.299 cv
460.522 198.458 454.527 200.045 452.042 200.481 cv
452.222 195.517 li
462.535 192.314 li
cp
0 0 0 rgb
f
448.081 173.027 mo
448.081 173.027 443.917 185.944 446.563 192.7 cv
449.208 199.456 455.432 197.726 459.087 196.002 cv
462.741 194.278 464.268 191.777 464.268 191.777 cv
464.268 191.777 467.928 192.622 469.965 189.093 cv
472.002 185.563 470.165 181.929 468.057 181.266 cv
465.948 180.603 463.691 182.303 463.691 182.303 cv
465.214 178.518 li
465.214 178.518 455.454 161.039 448.081 173.027 cv
cp
.988235 .639216 .592157 rgb
f
464.48 187.747 mo
464.34 187.747 464.199 187.688 464.101 187.572 cv
463.921 187.362 463.945 187.047 464.155 186.867 cv
468.364 183.264 li
468.575 183.086 468.891 183.108 469.069 183.319 cv
469.249 183.529 469.225 183.844 469.015 184.024 cv
464.806 187.627 li
464.711 187.708 464.596 187.747 464.48 187.747 cv
cp
0 0 0 rgb
f
468.563 187.346 mo
468.534 187.346 468.507 187.343 468.479 187.339 cv
465.462 186.829 li
465.189 186.783 465.006 186.525 465.052 186.252 cv
465.098 185.979 465.361 185.806 465.628 185.843 cv
468.645 186.353 li
468.917 186.399 469.101 186.657 469.055 186.929 cv
469.014 187.173 468.802 187.346 468.563 187.346 cv
cp
f
456.825 177.672 mo
456.69 177.672 456.555 177.618 456.456 177.51 cv
455.135 176.067 453.762 176.875 453.611 176.973 cv
453.381 177.119 453.07 177.055 452.921 176.823 cv
452.772 176.592 452.836 176.285 453.065 176.135 cv
453.819 175.642 455.65 175.149 457.194 176.834 cv
457.381 177.038 457.366 177.354 457.163 177.541 cv
457.067 177.629 456.946 177.672 456.825 177.672 cv
cp
f
447.136 178.022 mo
447.006 178.022 446.876 177.972 446.778 177.872 cv
446.585 177.675 446.589 177.358 446.786 177.165 cv
448.168 175.813 449.24 176.156 449.356 176.201 cv
449.615 176.298 449.747 176.586 449.65 176.844 cv
449.556 177.098 449.275 177.229 449.021 177.143 cv
448.976 177.13 448.386 176.999 447.485 177.88 cv
447.388 177.975 447.262 178.022 447.136 178.022 cv
cp
f
449.408 188.197 mo
449.182 188.197 448.977 188.042 448.922 187.812 cv
447.9 183.502 450.428 181.409 450.536 181.322 cv
450.752 181.15 451.065 181.183 451.239 181.398 cv
451.412 181.613 451.379 181.926 451.165 182.1 cv
451.077 182.172 449.025 183.91 449.895 187.582 cv
449.958 187.85 449.792 188.12 449.523 188.183 cv
449.484 188.192 449.446 188.197 449.408 188.197 cv
cp
f
447.587 182.799 mo
447.557 182.799 447.526 182.796 447.496 182.791 cv
447.224 182.741 447.044 182.48 447.094 182.208 cv
447.481 180.099 li
446.862 179.325 li
446.69 179.109 446.725 178.794 446.94 178.622 cv
447.158 178.45 447.471 178.484 447.644 178.7 cv
448.405 179.652 li
448.496 179.765 448.532 179.912 448.507 180.055 cv
448.078 182.389 li
448.033 182.63 447.823 182.799 447.587 182.799 cv
cp
f
453.335 190.576 mo
453.589 190.681 453.876 190.738 454.114 190.643 cv
454.418 190.52 454.663 190.145 454.832 189.557 cv
453.335 190.576 li
cp
453.852 191.691 mo
452.934 191.691 452.13 191.012 452.089 190.977 cv
451.972 190.875 451.907 190.725 451.916 190.57 cv
451.925 190.415 452.005 190.272 452.134 190.185 cv
455.253 188.06 li
455.413 187.95 455.622 187.944 455.79 188.043 cv
455.957 188.143 456.052 188.331 456.031 188.524 cv
455.859 190.205 455.339 191.23 454.483 191.572 cv
454.271 191.656 454.059 191.691 453.852 191.691 cv
cp
f
454.894 182.389 mo
454.863 182.389 454.833 182.386 454.803 182.38 cv
454.53 182.331 454.351 182.07 454.4 181.798 cv
454.784 179.709 li
453.973 178.831 li
453.785 178.628 453.798 178.312 454.001 178.125 cv
454.203 177.937 454.521 177.95 454.707 178.152 cv
455.688 179.214 li
455.795 179.33 455.842 179.489 455.813 179.644 cv
455.385 181.979 li
455.34 182.22 455.13 182.389 454.894 182.389 cv
cp
f
463.691 182.303 mo
462.535 183.644 li
463.113 181.712 li
463.113 181.712 460.39 181.694 456.826 179.441 cv
453.262 177.188 452.415 171.717 452.415 171.717 cv
452.415 171.717 450.87 172.44 449.182 173.755 cv
447.493 175.07 447.136 176.478 447.136 176.478 cv
447.136 176.478 442.669 164.099 452.042 162.49 cv
461.415 160.88 468.067 168.826 468.067 168.826 cv
468.067 168.826 473.432 169.571 473.968 174.828 cv
474.504 180.085 470.831 184.162 470.831 184.162 cv
470.831 184.162 468.435 179.801 463.691 182.303 cv
cp
f
451.864 205.571 mo
451.304 210.045 li
451.304 210.045 463.657 204.872 464.48 202.55 cv
465.305 200.228 452.415 203.849 452.415 203.849 cv
451.864 205.571 li
cp
.988235 .639216 .592157 rgb
f
451.304 210.545 mo
451.204 210.545 451.105 210.516 451.021 210.458 cv
450.876 210.358 450.794 210.19 450.805 210.016 cv
451.282 201.969 li
451.298 201.693 451.53 201.476 451.811 201.499 cv
452.087 201.516 452.297 201.752 452.28 202.027 cv
451.853 209.235 li
454.48 207.99 463.121 203.771 464.694 201.443 cv
464.85 201.215 465.161 201.155 465.389 201.31 cv
465.617 201.464 465.678 201.774 465.522 202.004 cv
463.517 204.972 452.001 210.275 451.512 210.499 cv
451.445 210.53 451.375 210.545 451.304 210.545 cv
cp
1 1 1 rgb
f
491.785 216.84 mo
490.186 217.5 487.916 218.36 485.155 219.24 cv
478.916 221.25 470.176 223.36 461.136 223.36 cv
460.216 223.36 459.296 223.33 458.365 223.29 cv
448.596 222.8 440.386 220.11 434.876 217.71 cv
433.176 216.98 431.735 216.27 430.586 215.66 cv
430.966 214.72 431.376 213.79 431.806 212.89 cv
432.706 213.37 433.815 213.92 435.105 214.5 cv
440.365 216.88 448.666 219.8 458.516 220.29 cv
468.296 220.77 478.206 218.32 484.896 216.14 cv
487.046 215.44 488.865 214.77 490.235 214.22 cv
490.756 215.04 491.275 215.92 491.785 216.84 cv
cp
.988235 .701961 .356863 rgb
f
496.155 227.62 mo
493.905 228.56 490.126 230.06 485.525 231.55 cv
477.976 234 468.216 236.45 459.336 236.45 cv
458.575 236.45 457.825 236.43 457.086 236.4 cv
448.155 235.95 440.226 233.31 434.445 230.74 cv
431.386 229.37 428.936 228.02 427.266 227.02 cv
427.476 226.02 427.706 224.98 427.966 223.92 cv
429.325 224.75 431.575 226.05 434.506 227.42 cv
440.115 230.05 448.206 232.95 457.235 233.4 cv
466.516 233.87 477.436 231.06 485.506 228.37 cv
489.775 226.96 493.246 225.58 495.256 224.74 cv
495.586 225.67 495.886 226.62 496.155 227.62 cv
cp
f
437.785 221.85 mo
435.556 239.97 li
435.246 239.79 434.936 239.59 434.626 239.39 cv
436.796 221.73 li
436.825 221.45 437.086 221.26 437.346 221.29 cv
437.626 221.33 437.815 221.58 437.785 221.85 cv
cp
.27451 .27451 .498039 rgb
f
481.466 241.33 mo
481.166 241.49 480.865 241.64 480.556 241.79 cv
478.626 235.58 li
478.535 235.32 478.686 235.04 478.956 234.96 cv
479.216 234.87 479.496 235.02 479.575 235.29 cv
481.466 241.33 li
cp
f
224.021 312.03 mo
223.029 312.03 221.827 311.162 221.424 310.848 cv
221.207 310.678 221.168 310.363 221.338 310.146 cv
221.508 309.929 221.821 309.888 222.04 310.059 cv
222.788 310.643 223.854 311.171 224.166 311.005 cv
224.409 310.875 224.712 310.966 224.843 311.208 cv
224.974 311.451 224.883 311.755 224.64 311.886 cv
224.452 311.987 224.241 312.03 224.021 312.03 cv
cp
0 0 0 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2112.w037.n003.72B.p1.72-temp_01.eps)
%%CreationDate: 12/13/2021 6:49 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3-$DdkL]K^<bL4+G!,(LmahC:'q8:P7/:unK88`ULXOT]cWj'r`3$S)<J]$]a?:Y$>E,']5go\QBj;6G-tGPhILAND^Dd/
%L8ekngL1EUYQ%g1H;Q^0R[ka&)ZFeg5s;'TR`.q_C5$gWW4%^*[6i5VAo$L3UUcZ2rq*7J"9/S>nItACEk1lgOX^0]4/eA"ZS(jG
%EfdI^.XimVV_eGnQW3cT'5Bf8pfYE,WeGK*(`YpATX\'Sn!is/F%Hn?6)t/VKjJmAdE-8Q3Z+A0rjVa_,e,9\>7J>IW`;9c@F=_=
%br\&tl9>4L)M<4k^K(%aOUJ>jG.GR^P6agta4=DqRoiH+eIg6*=uLJudsmh]O$Dm3!m(C"FSn?Sf)#b<Z\4GpGsB?i3UDCg!k+CK
%/bkck$@5JQ#[*uiiYnBlQ$V,%"gjtX@Ag3F#1GDRMa#5!YWGg'_m*.3jghVeY*WT(a)k7KWNcRiM8CD?"Q)kgO0-?Y^b5m$Z-hf*
%la69pCoBZ>^`i7(8\5s!hGd-"=?N'\*oE!1=tqGsm1aEub<Bf_FG]Lj/90f2DLrY^D6;U5h:P?0WgCVHA`*M*1n(^9n+*Cu<6o=B
%1tiBhj][\H-O^iaB%REUEkI(nkse!PN[_H_ET'c<9H,OOa0r2ufnY3lFUVr/e0s.;W`pFRAu7].1nc9O-KfEY;(@<6$^BiF5L`!A
%NP%CL&jqG.BXNGlS;YZFZNjo3Y_NHRU5uY8G3,ahQZ+)cZu7<s**NQFTUPIVrYD/ic"u%8^D!$-/YX[>F2Pf.[Z,c"&-$7J&o&9Y
%%N&^9?i8J/pp^&]<ThnK)iNB-51qh0ZY_7*g\JKueFTo'k@#5=r_[ga_d]3m`UFQ?`F@LO(<^<pC,V"-A@#AbT>tmAH/#4]q)fG6
%kBS@;BKfrj,2O^I(9>UH%0NWj)]$>:iEn-jo9-HAhr1C#0:'FGiEr%c>Rk'XkCnEU#q(FVYpmCh]P3lMrh[0c#6a)"YZJQ9Hj!O[
%VhT]+9KnLk\P"c(^=%B\q,60Y?Brj.:OitJO,is1K9odgMsu3u%-NFrYpmDLI-1>gZ#TO>Mr>Z;:@k=@Q#ViZ(S>Yu*"VPB(d*E>
%0,DGcia9Ef**r@!ne#9%&f56N&sMD-nKIJ2a'sGdjP'+Vo*Ne%q9XB4]PY2r]SQK@AT3567ra,[S^3gUNH<%Q=H)9$cB5:<YDdt9
%$r.A69.ZEo`0ZPZ_(f5iZU>^gG;OQ)1)q_gOiY5tX3\i,f:M`\(QSbR2b))R%j-_Ord"+J!WG7^-O.m'Q")`0HbMbXM*1asW#S]"
%Y63<$onIQ8(Fu9`Np2]26;43?+Z;p7%sM6\FgrAM-FoXG4^8U[>WH?J1N/X^eTK;l1jg+@;A]?Mj'RN/r1@]okO>&BKBecA6/ap*
%k;`B"I-:N7QTr*blJ33TdV8\\ps/nN1Aj.[kPq3$0#p9:49)dr_k4hjr_HJm"J<^t`4p\Lq6PJ.ml3gLAkaeF::p7MTb.*TC(jo:
%Xi&="ohO&t(%(b@X8c)JJ$X?$%nE]ojBXBDT<I7eA+a313mQSr:%WDdJ*AgPeL-,[a'X6S.:J'[&hN%t4UJR/8doktXNH(M7opQs
%YkbX6OueTkZuk^9C6S-L<KC/u8>)[aQDO-m)`O^Q)l]"hm@oAA:_hAF52Unr4^AJk3*HX]Oqe1!>\*@c<au]G3WeX<Gphe-(;n!u
%pk,T&Br)i.0mF;a?nXmJKMB$e24WO>%q?L9B'EG&ru#j'""B864DkrFPW:GJDZ&]F=C/tgj`?lYVo8rSUgF@%%]X$nbfRKl+*0gl
%IB2l"d]P,oeb^I[a>!HG$$mJ\60]Q+Gm5lkA>d&>i1->XXFe\E`^`VthPYrMYYBmEM;f0J3_)RtcZ_48[MT^5<Nm<IiBDl1GR<EW
%R$K,$;a]eVV%9he4\DL39Iausrb$Tb`QEC)_=)%eG2<CMeI]_pT&.>s&K%7p+PX/@RsH"al('L8>.1C@$`i@mrH0nJfaL620f+h9
%&])]\61n:C:J./:*8GhDO7G8(q,JM/FMmo1pu=dJhcVqW4WKYq!LBRq1t-,:<I(\&;h[4k%bOoM$a?m^2l6-:MW0/8^b!A(R2I^)
%BJ%.Z\n2tZ$')A9pBFU46!?=UWUKgKf9KkuYRY<$ea0pobMEU("XWQ;JcF[a'>6p4m\4U!!bgU+UEU>FBfS(AT2'!`O.n4.\EPP;
%_Zn3dlt%GjjEoMr^7,u[-r-iWhBCd]<JdeReB7o#^qK/+LMD]l,$568"M@4I)S"?](`0Ig^*3cIL4ut<1Ko'!9AN9-D@gW\QcT;k
%$I6OdW0>tXkmimVKF.h=XK36+Ol1AP[]j<CEH8:i/<cnf8;BVY1aomD<ej[q/KNHobhr\:,HZ/G-pB'jf%iW`CC@4B.+;+^d)JBl
%:igj2mQ1L5\ZX;?+fKh9Ods;N6aR.+0J?QdU8bgn$Q:40LLQpVCDuf7*'@u]%eCNr18:.Y<Y>*2UX6<jjLgN5>$(5*4Zt?ba^uDg
%J<rd?-od79`GGfNH,2T\@#e`/$!kH.bBK)JPjci9I\CsNCA?l_ir_oS"SCJhns8OUHeO[U6NlWp;qAhmn\G;?i;>?51P<':A6tU3
%!$fjs/nm8'hMKjpn=S<.60K\'!R@&?463-R#*BZb_LVMtNt/8pYpV>%h72*%X9=$>S2T(/h_Jib11BlI6k6lu-m$`4%]^NsU!5-K
%_F1"@6XfA--mhc@7B5k)nJ.]5T=Z.iZ!M"<T<nh3Kb_D6]9X&CS/nHNFif$d'4@?5>]oBAHflKaIT9eU4e+Ol5ib)s\;oS?>m&!4
%B/4ikAsTV'?O`]KpR"9m25!,d_/&qJ$DBour)U.Doa)oQrf/Y:in]n'^duK87I]l=n$j:Lg'-G$L9Ep3b!]PS-n7IlEYS:O]\m.-
%6R.68O:h+*"c16+[A]!k,qk2EJ,$=.62GcUPPa586@s0&WsCn^n,PnQ7"lX*N1MMhccORfGQ9D#^F^\`6GHU*HGFO"RlqmrbPdL9
%>6_A*6/I5H$5B]CG!/iLG*'0?k$ScfoQ(5HUqES"(d[[.dcQNa?D:9FlSfTpLMlcmY`"(I4#n!`+YA6$+aDgNIt8uP5chTLTdE/2
%ZpG11P->S;-lbZqrONPpR+rNrdf9gcR"4+:$9'u],#chn<>k-'T\dN[cT)L7m3]k>0,0m$3kGRfTGLE,KB?;q]O,e9!ZI+hid"q<
%ZFU\i<$0CDgm[GP%:Tn5Gh$<<-DGg9C**?1Z1@X=mmF>>msQmtocr*rN_]5NMu13f42$]L\6jVXAbEPI2hGm7X2j9TdIR%.p\`t+
%IpiD@l@T0U*K>/CqL&ZnGa5uG/$!b\#6rU;0,m@cdNbf7ps=<^+j=[$#t58$nkfqk:\Hgg3rBj_$!(*Sdn],3)TFD*#M*<A.":tX
%T#t_lE]/LNjImIFf1Rkub7M)jqSLVK[D56JDP[@gK5bRGjYa>9e"`t*?V<E7dP<:/Zkm`dO9;r;R%f-H^9ZNTes1:<$9P[L_s#P3
%Q2b4dM:8.GZ%q1hO.(7EMjduTiroeIaM26Hh2(No[s7,SZuk`^i_GiEI#g"VWYi)M9KFNsGL8XBW$n4KfQ$!n$Vc^rTJ'RGBGF%+
%J`p-m7`>.G+\2eXb:5D[F6@$kh;NU7HECE_b[4TaoH%[dMs)\)IhhUG8cuJbA4HGGeC%2^`8SF!FEn?+AVSDpj*i1;>USh7%(umO
%0o%U0+(f0=H0L"Ik71>i2<",3\[rZXB]LBU:kb5`D`YJBYTH262p0+6'Bu2\JRB8RSl1RFgn?ka`2UHbNs)MOkVkomW?-3V%1$iZ
%1^*?#]7/!]q/XB4)q58,Z-fs3M1rCFZO7WWV(+7NOO5S^=BLVudR>qMVI<:)2[[V=qTTqENeB/I<^Bj.#uil_e"JngFZ>Q-4cA&e
%qh6ORM$8]V?kpMrd(ubU,'Ic?:lA?\V4!7:Tr:AtIdZ9D"+1ojD]fER`1[:)+rPtn,JK(2q#LTjC_VtK+1tDn%M902o:a5:-6,KA
%\fFe@ORo-9cTPkEa<'u5]7"1^TnWZN!lJ=]:4dU2O+NVb4j$P*agdK.1j5Tt."rL,6?,;1dlKp===)55"e#Of!r7aLT2:bF&_X!Z
%OHP]Hcta#A[To+cglQal'!u*aC!SOdb;-CAPeu2b`aG/hXH`*M>L:.L+N[^i-jQ@(!#dmjZEWQJqs"q?_'6LAj^8q*"!XG#Xhq3C
%.Sc#7dd8<+7t>1C$"taRK1\/IFjO?^a-E;6UUbSKO_e3F>[._srP6$rI[)P.&!mc?8U@-cI"NJE+NVp[esBN]77&`oBJD]#q$n6"
%J6Cg+`S>2,H0Gc3ZeiKp&g2Q2d,h,Z9O6RL@IZljO+'AI+,tY9YTZ7Y\MQbd0ohJq9@m+]M>B\M.qrMq.sgC87sE!CCl&Jr*S/,K
%C__9_1.GM8M(ZOkpC#+\<2Y2]'4R(HJ3;1'/W`:8OPZ3/(p[]q*WTO-LfjbMkdW&).4%+Bd4[&f"Z[LIK=)8c_mp04gL0u3LH,Y[
%oM3WGhCVD<kYXlijh4u]3V0c$S<'a=]:a^q/C7hfKG]S3qDp`M7*LcgF(?-i3OEn#.Y)^T9L)nhrKp_J\:0lH5;U7",(KBG179p=
%m)$W@V]Hl8_1"aP_;?!LoQ;g=ZA9@50`h+qHiQ&3064Amamt$`@)V_Op@L\q!/@c-3seb)8Al_RQ0(@H1TT<`6Tc/JqE3kdl(,#6
%<R^Q6\b?;,BP)[n+D-;:J/U:n`)+C6.M<iY0W<E4n<'%L##I"lKO[]^5(i=%>sqWr*OQbV,\]E!#Q5hk'Mrdi&eAu;Hc]C(s!;^s
%*(10h`.CY"=i4W+"P57W9Ne(.TRbHea!Ue`$&pa#nh'5=aXQVCYWWWNm9]UNY/Rd&Z1<=q7JGXLHB,4fm]&FM_16_ipe[+aSk))o
%RA`75^9=5mRf:iI"F'^JMu15#VtrYn)u/8;OF!PnJHS(6h?Qn^g5Q`HgBecu-!Ga/],4FW.(e]G17W2PG0u9^1#jKUD]on_FZ0hW
%;411EGSHkBEY/Q(BQc[1,NaO*J+2a"7amhJf#'6I;OgA)Ek*j9J*ob$\o_rQKm.i>Q"YI)qAAR[N4dYrGV5el5.F5'R@fekiMuOo
%]t\OK5"d9D]fMN\)r:63<R>L=NZ#2V\i-aM@-)!_B7RTs6=T3I6M@";Xq1.KFCaV0Xb'iO9a0g^-7l.4<Vhgfh^.OTj2liS:N"6J
%-+>e/m?sA5G$huk,5osMGt0unU^J\6,9tVQ''AcF8e4$Y,2fhMk^#O1*>ZOi<FY/.Ocp0?S'QNAkd^u`XfI=(&W!Um\UDgl4-4$`
%EZI9V(3ifoP;jKWW;BQ1rC*nm7oFL8rJ+K&=bNBgUAkeP!^fV5pg,&*$"FRkED>S'mO1RTPuHL-NKW/g9?QBT1MP"<*1[#QiTLuL
%"F-MaQcYo8]jE[AoR)`jmS7l@U59e2ZjpIWR"h(Vq[tK\mL]o[0#HGr&MnAP?mf%^mq!<Pc&S14aHk%r!\\kF]a?*,e3KWWASC[W
%]TD=NUNn;"1j!'p"c8+l8<m"fjO(MsmU[%n8pBpabq?T\6mS\"0-;4_a66;`4s/`7@;lNEKkIi(l)9*G.mB+2/&>023U=H]7lq8g
%i\5>(C$',%M%>fd#KK?=3]V=<=l/_B.fDe[7'e*+J4?f3:/eW#F<^gE/:[*]Ym76RTkM@l7,*f3nFK(3J^gVT`PnT>.(WfHZ7/eF
%.q\U]$3lDr.p3SHHc*IdbfYo_(f/#gFTD>k:W&@#WH[=HcS9P-)<ciL]D\*c'Y/GgN84:ID,Zk'"08*DK-,GZCpNU,`qAhfLoLLi
%EM2P)3Bm"2^=+n4*cW_Lj(YH"(rJgofq5bKW:CR<<#)[\+QG9lrDOIRXsX*i?%J%"BcY=r+;u$cBI6TOX%H\*2<"6P,4JutdetsU
%S:Y&Wb\L0LUcYh*,>jRsH+008Dr<^&:./FZJ>4.5*Q-JQoN>V\\&0%SbC_-(=5FVV&1.[<8+8ol'cGt'@8SF;T6Cb'!('aopI'7O
%Eddo*PQ/N7F3DE?p.tc0VH]inZf2:ijE]mI\8kle,X4^!a]kbBfZIRA6/7%E_2p&t,a5MqP-eBDOV:m:&O!XY`:'pg:@G$\mY[bD
%4/cN&i*DpOgn./k03WWn]Tq1'.RRS)WHVEbU`Wh:.MZ.FB!L3!#RgL)AcK_jaEua5C!dX80$XJK"d>P-:A)Dd"7F*]cnjD+7=Xp$
%U/<9;bOIm4!se7U_Q(1dAIF/fmhg1hHhDcH%K0%=d#jJTHB'V_+hbdu!GG>35p_5'OXa+d;aHk@N(aLYK(Y[]O%)G(!ibabZ?V_8
%9)ZUTY$(or&JR)>O9G!/ltfr^#G.MM.&37[KB=d$*_qe?;Y3"9M-4:[]Z8V)Go]D4^AcOZQ9.lA(T6khMg:*h_25B%5/'dDmJ#$C
%-89GpWi&O'FiSO5q2amjan?6]FB@(Uq/H<[E4Si]?6\g738@NbLHY9X&X#/3=iI@,qr.5CW+/jK1&.\()**P9hSO)4L-"=?$^JnP
%:m9`(b2G7ikigk.^(6Yta4ppHfdLdtrMi9Cqh6pTV"[aY2YiJthcDr^`Vki#4!iFTC?,;@or&O5oXf-!a0-,(=4Y<n2=\_6cT1R!
%\>>a2&T8s1+1&?^hC4A,P4BPbNuPKIm7)IB51"MO6*";3cM">4!aHetTL,W8\"`lpIu!q`p[YiLL+d`i[<?u%H<pF6s&RUfg/X4o
%%goFBU\%>Y9H7>dKnm(S.buYG3,A9mBEOi+R?V'YYDm3L?hPF)Jq"/Nku#18WLjR$CQ1s=!/KuA^B`k(4jl#;(T574Z=!8D$2QtG
%\6o(BhtXEN@?XeIBYBDUB$b5B@9KND.aurIO91QJ@WdBkhDVBjSRMnK@6e`ubFJS$>D:i1dT&(uIp'Nk0&8A^qJE3na>DVqgVd6s
%<`XYAq-L12oK2mVCC]eIL44JTWYU4Vij<!+"^sX'8f_j0:7U2;FTdIG:[bQ+7ocYBD^'5L]&o)l[!8./',X5XW`Hm+i6,j"jg79'
%e$"hXY>d^f4Ft38`@;,C@T,/1+2`8ao5Ig5EW<+Fe]O_#,oge*EpP_gV*[1%rRkuj,FBY;ieb>u0d#HhNERO\DRO9pge>]MLR-RS
%^AP.Eg1>SkR?rEXjsAJ6VKn#ZX2'].fdtuZQ2"4Vg?-G`E&cDp#d1+6g=R5kZ?2(UH$[2o09oadWVWLgSCiFk[g2ec[:2CnF/8rp
%II9%CNqd?NZ2/[@>_Ogi@!`ihX*-"D]m9ebduB+>?)DRF.Mj$iPtJ:!jrVSOod0TOrC#N7#kr-'10q'?qNq%^@e1;&Y2479rU-$,
%U26egTM3n>n00Oj/G*ULPL27)C%O6"K@8"]/&kP!_/W0sc=Hp70os)i2h`/aB9D)K(d4X0U)!NeJJ`Io-p?7.pS1](h8YhF-o]7M
%pG9fGIOat/29neRM61s]C@iE$JnDV7LQ0B,j4[>":)cTF+W*?k?>JVd<9%JV&0!cnC:eLcB_gP<3'8HiG\g?Gd]CjF](2=V^(Ga.
%_f!Jf_63@hRU!7Dg+%Y.2gU'M.YkcN'5->d9#kI#K4^beS&&d3'qC8XZH0h:n&&89kd8oY'S9V."NO=BX)V+TlM+1nhuG!cW7?NT
%%i.NkWJ!^\ai3<,b95s"\M7peoKnS$-Fll\ONS^a"Y#M-#I'U(XqTPgA'13\;m(HsF&Qsob0<YkIT)Z(E`6Mk>rR-b<6C!(;KGlt
%\JW1u$B;S5hUK(f2n.o2[bTZ(S(ht)>HXSMQO1A2jjRGK=Sjfl_)ZS6/@l9K"#aGt4dcpu-f0m-[_6`^D@b`XdqJ3g0FjPR@P7F^
%no6dseBDUrEQsDWB]Q;m^&$DA[=DPth/&DTC1].0::B"a]=r.eXWbTS;%b@uiJGN.g730F&4b.aa!b]_ETUu/ockZGWMK)%\hn"3
%[`a+E>H9YdIPhV'pJr0$:8c('i6L6Q=uEhA"N)_LRNRXOW'+h<e&\:oA:?AiNGH9?S/2$C*1q+]n_)lHA!oe(/PXIh/_%qN`n$4*
%_4HYs`UmfUXlAH>eDSu`1bApLR;b5)9ZL8apa='<rYa`QoQ\j[]f,APdP6btV.sd1Sic/`T,YeL&:FA,$V[DF1OCl5p5C>)]ZaW*
%j.>+efo0rF)@%[W>'+_*L0-\L8U!,7g5F5Y$]WD7M_TuH"EMQ&:%,D%DtY-Henl^H`L4qL1$3i(bkj*UM'`-eI_uZ40diIcNAtu5
%Ak+gUUChmG^qmC&GRoDG9n4`Sj4_dpm`-Ci`B;?,pLX/2CUJ2[&Hr-Pn0lR\I/\!?ArPD:\7bCtEb[t6V*(VW<&E?T9JIMW;raa2
%irkircCTo5ke?!l9C4]$6P^ZF_r;3&?]AVT`DYBM'9N,l=2e:LhHH\'McU/'@!<8tL<S*!ZT'<Jk%nk^"O!<\c'd1e&pt,^jRdDp
%=ZAaS0al+9Yti#-LJMfFZXBur#f<PamMM.UGiG=2Zi)WL>,Ue)Ik3l@kusDh7h;1u:b]YWi6Q5e8IW(Sp=?EJKCW_QVH]VOGhIGD
%N!fg<1#084T3lN%Z15Uq8I8=p4N*W2`%)?S+dHMQ6o49,QSBS0M5-/-:#]rke?##86@ci>Eo>QI;WM*%0V,+sA^/($Ntib*M\1u@
%$;2b4&=IY>X!QhVM4TcSa2cSkV2oWGC0>N"4>)O^q[S@SjFm-6(q0/1n@'6uR<\]HkFD?)hH^aeq#"_/m\E]a[8r:GU[nkIG,7>I
%^(jq5B]07eg$;,0&go2gMN)Bmf.dpgY=mtt]G.jG(o?dG.2m?Z"ZN\W:6Z^L<#Pej&MY]3==iDa%E>(\<HMKPMBT')[5](@D1$Eo
%b<Pos0b=dNK9kDNWC-0<A)!:ddj`;IWJ[#\f/1XHC>d,l=&SP2KnER!irP::j-ipU`@&e;AES_)M:!lJZi!oW$bolF`)6RVrM^CQ
%^r:,D=is-h1RX(YDDp9q-H`M/1@n2(?@&!89U%N#R<[___+^(QQf:_F.S;6`1@\-&q%"Q2RcgEhF&Dqdr+8).V(bQQ-ugRin`n"c
%Lnts^c'7:``)91i\L@L?Nm(BR8t=!s4Nj1m>a/>WACC;BL]irf0$5I2[opjBM)1QVkAR\qM\8\X9Sj/OG=H;D0rH?6ThWX8:A<jq
%Z-r+'4#).B4A='jr6\B#Es/gmIpnB*n$r;?I]I1I?ZH"*drMe=XPN)'^L_$&f7&R[flOkC@gV:FD9gbqHu1A.g.h_mF*2?&Y"^ZU
%$P5nm>]%d:m`3l?b1^*'Rrbtt=.9r-(6&T*roQ%qBk2*9QJd7P@STo'E)&ms-R38!7PU3::.B:[l6`:ddbd@d\Es7.S:q'(s,Go)
%ZF#9",=.?Nod!Ru>bp_No"Q'U]VQ3>C'/CuR'oX`9%@Bi?)eD64jf9h_Kt.LEj;cfLm/q3eE6M9$n%mVhrg^]oPLHOF:8(_$$^=)
%B6`<g0+ra]gN\21bO7LS3uaO#2!]DRbNPp!eYOpo[#G%CNA$Km)I:>Y$1"S4h2aLcM76La"bV5^%fS]^1Q58oI[Dr5:oICZ[3fSD
%8*q-XT0@&'@+'Zu!seT?,"U/pjdVR"b#q;+;pPVZl1VM%hQXUXo8V#t$]WERM(scF<-$%!2i%9%R>GS"I\YE(XTYac/8P[HF)2la
%50S:]l$lO"\V#(Laeo)(l&?^)0P3gG:1GF+ShbIm/>2f1^IPUNs.+j*0'Dc^H2Mk-s..2[a.S"/j1gcus!=P!&R_JQa(1k7R-tlo
%Tc&^_cK#Lab[\Ap8b_l&A%n.?T?LfZ;rmJ9qNu3+FFDu*o4&;0_ZjSrB];$<%*tT6Cpm@J?*"rWH[9Fc:"bQCkLto2YVJu6?FS`f
%I)<kLUrTll#3Bmma68AE9/j=3.'QRa]5(nMWk6+N;\s(XERCtbFA05%C#WOg+e*i"jrUhcK6"<^+lcI/qkar.eSUCi_)>\2l)(of
%]i6KeXmJSSgo`O4lG*DTgiYLmY-[qBjA)lD/=&mcpRdFN=jl+C!<W:n;Pi1foK."4gEK:N$h*F!dg=1d'[uLb.6D-#9s-n(mQM97
%=E@D]h"okD'L&($*s56+oq2:GJ)_T1M;B`B'9;T1\FXnb9W!/20W[%4$-JCSeiAdngG\dSNR8pgjDb(Bm\IDRAaXg='9ehG?KR97
%1#a7c=h*K\G[\\n13^CT*A;KSbM;XY?ZNfDLY2,q(#Y]GOQI%Kq[MUcR-mo?6(1OJ_nBY>n^dPq?8qCEc81NF1JRUT'BN-XfIm\U
%T2$UMLiZ%4ddNT[F&mb<n!TQN+-DrDM^IF2m*78PR$9W/f.NI.X)OTd_DGEDE>EG#MQ_9L"lkgaP]PeC+gh8V'9:NYDnh'DSX-U<
%o@oTQrAB5:0:gtr`S-CK:[e5(eP"B4R:bebIZ,epk/Z.&7>+A5EVA,ZFYd^in/FYJk2o>H.E2&sb[QO'@AQ;S4GQ43TjnR^O)GNC
%59G*>1k.n=o3\j*IYCoubHB^J(mq\$q1GrAl.M<3Kf33Pg+6KhWuKd@k\8fVna`>P_/W1^6apMu-]Ynq7Wmb+EFH+i`kf;0V.-N*
%85X91nLfj)rc@MJQji#uT)17>8(!e&0d`<Qg_oTk`0nNuO"pB=9IdB9Q<g'Y0rBCuk'i8'nRJs(=@lI*n&:[7R:@dG+bmaHC/i>8
%PF6[&]l*V!Q<uhWQ/Z>lo6MW/Umdq.]:u=maq;kpH`S_(U4pXBCqhuECcoh,W>O55?2;_fh[$s(K5)Qi7FkIf>]Zss:0XPq@?@7g
%_e"J^c:[2#aOa:89%j3&?8N?(SZa!?8f[(j`Psd!q3=OVoSp+_R5CE-$u)[X^H^2I`DJa4j."!r?5tf:2e^Qc`d_o'*&ZtFG\tg"
%Er;H8)cuD^XS$Zr"_65cPAWS.Y6Toj5LXd=aP9WR)H"q0QQZIB*-BbMRf#pl2H*1SE@*J;q3lu$Y?6$.,q32@VD?m4?S12n1DE`#
%NRBS[bnhHHAS(.3nQJPS]<VAF2tl$mq]C(>gm\,L-T&<pk18<@=E?3-akW>S4M?&Yc-<B$\MZ=Tk5JSq<ACXSQpQ-P`iS=bgt\Eh
%Rr`XlDJmbEc+./%m\3`4hDG-i1bea6S2F6RgkJ#%k,-+dMhQFT@a2m0]@jXUB'_R5QtMa5S\`@NG,G%8M4$I#3kna*P'KB2fF7g:
%`YBj"JrKLoT9I:-Ia808j%5Z!pNsPO_l7+jBAsfZFW$-TrbKV[=(T-c\"2HM>2:ir>!KK*q/`%-TB/'#G#</$A<b+@:*gY"[.&"^
%-(NX++fr0^@d])E!ZIM-L\.D4\(Enj3AjJ^r_I$!3^\gFAVQRg[T96^>*!/4FOqA]lsf%82;=++^CZnNr-5eJ8+G7eJAs@(+1JL-
%+=L`A":ArRPJ5F)F]Xr<io6IZ0(sFPN[^/=9cDC@begba\e0S.q#?R.m9$V1<H;@9Z")Pq'pRZ+VT1brG0K5MY!d;D5@->Cd@VBa
%$-%D0T;GMUMo!p(&#A&LAa$6O2R8?/#'.(4J(JJdi*I'*X,P:I^X(6X:5qk0=7t^U?=UR3U:F#Uf89KR3mjo<7oQN(c)+1Jk7?BE
%\-SN`TD(JFH3-*XquQ[4@KS>9^:Q[BU@Z/ej-i=D3IVd"5jm:7l2?Ygmu?Kgcpk!W>7"d;[_Yotk4mo/HSOW=-(I93,TVPJ:A,Y3
%>o;0J#@fA+kJHcg\2ENf0ogdVFQ"&Y[H;LL9'j[1Cn)'js0'PaC%NOoIr'*#Q(H[aO$>[_WPjUT[rG*:,!:K:q97p'V#@P?(*C_9
%k4d)_@QhJnBKTM+$alHknk#^@O]QpD0#m8r;o-?>,AJTtg$&f;r7CD$JrH9MI>l&nAAPNTG3)of?l33F2Og)]Z[K0.9?)o.d8PNb
%`mH=ZPMM%g`_QHf&f\/r\\r<qd&-T$$$>LmVOYo^c,]Q4*@>)IS[m7]?]d5;%(h"]+2g-/3&M+1O7Q<7;lNRMO+U5d8=b'\)Rnhq
%FjS3r)RJM>qEojW)M>mYs!l;L9SFjT-"98PBYrqP]iuMRa379Km:tTj.bVlo+^)rZBSfk^Ze[X1N>p.7fk4obYpP6fM1b!XcPh8?
%Goc(7'IFCSE>I=I4_$P,rD_+Rs5W".d(PJYc!;Fk`jS^d>In)=1Rqhk/Y)]YaD#WH9O!D9*u_sYIfsI7]r,Y444U)%0dM?R#eE."
%<KEgg\h.G[^b`f$W>b`tYQ$\cds!GEm^V&,^IRqN1,,ACZ$$j-16$JK2K@YVrL9IB3,0.9N2+*\n8GX^\Ql`)HrUkDX4>@^n@)]5
%mIU#5=s>6s"I&$hc6&G-JFVS,#*!S]1/i9as(`Od,6.W@nU(2GFJEu92buA`*a_o_5H=@/7(N-pnA,@<p'FRY&C?)Dp9[euQNL5Y
%9,un4R72c.^%DtX!e4+.krB0ZoT\`f\nBFr%:J\Adra&Z7)cWLX<NjIhYtHkQgj5i^ja's,RtG/5&#l5?h!.`Oot>SKY^JS3214'
%G<K2iaL"F?c`pge>-3<NjS8"(,@CCg!\H65%<;rr9&VV`re%9'q8H_@G?fZ"-6/*3omRjf%ukaK:@G!(O^H$7+FX+WoOm9c<lV$9
%^F2b=Je%'3$p%H?Zn#NKjSTd$`R<kF"<d-j@u#R:5XbJAq0K7rJ\k$Jr*.GDVHsH]rM@]26@7s;Fh-5=r9cM4gES"&'ZMdq>/4l0
%c-FA/?`L/)'n=SHFB0KJKdAkk>)0I30pX=nr6[o+[L+p>S;EPIKtCaRAQUc%=nHn^`W*X`6hR1MbBSA>6C1J!b)!C9A)DZE$AEZ0
%<NH$`[P/<"]H?IoqAt-P=S?'gr^Th-X6HD)Kea>Z9mfY52sBCGF?7pd4eC=NjlZ5saVXE05UO`rWA$DMg][4eo-EhK6Y7>,QZ6^N
%Ol+/!s4g)iCh.]>msROb@lo!/F#@aoZss!,/.Em&8_NW0D^,`EN_HIM!W8IL.06p"e7un`F&d",#.5OX[uMB'S'h41)GG(GM,>IQ
%4)u,jrODH0BFuBB-=Rs[T]HtU^%r1jnc%^f//Er#,SnZo8onTT=b\6BOP]RAI\V$co,GXO?1"0/'3AUDRO!OXSusGO6]"^I<q]_u
%PRPWHm\2.H[>"//]&1;u]nr4JWL.@brX$10UUPT,o\BYR##au\GMRoCb9]_3VJ$hcPAM2Gj@sd3-k0,X3>Rl2ek;u[U2SUuX`+<i
%H\ljV<D/kWbuW0sB43NY\Ut]],oXoI*kCEAd?1Qf1]iA(Oo=e_Fh\tS@$rP4EgVY$UVY@TI9-U4^=I0fhmIVjm[U!ReN4[5D?S4W
%nNBF5"b3uo42k+@^FGLA/]ms6gMdVP[.FW9rT\UAGoCRN&iuG$&/:8-T)0OLM0sZ%l:pnd-&d&k[4B">'%G[tB"2TH[EiU\B\ed:
%BKF:I$+<:7T#eh?[t6*r"jOB=Lj4AJZaaHL61\,c'l@+5,QQ8-\,)$c.ibs$FkDDq<Q*&QNc![WhR*6N+E:YeX.AV-D*)=SBi'9;
%\"G$\2JDI=Re1`Pq4u1$f*ZsEBAQKH>2ft81$i*72.i^f.[mS_Qeoopb@N\ho:UXr"Q.?bFOfq%_ftbRVXZh%"`AC<fWask.qEuo
%aqAT6'TUUmS[_]>l;q2d"L&i[fr(JY.1!ji/ldNlZdl#1"jPnp@@*n-AGC`1=u#5M?b"bjNGp%I[sb'4`.%2=.*(\b"f0ZbQSYFi
%7+""eS5/(N?*=@e2A6o%>69YVmm3`*-q0Ilc6:nYK5bkk4"Mln57j&TB>K?5[88L+JQnf5ic!b*2mBd95!t3.WCtN6PJ_,F6=N2;
%'jQ9m2XqSL)O.q#D?<fr?NhTN_YOs]NFG`NdoKrLYh&+;?B+B[lITI4!0%rsO&-BW7Xs]Q%h@=T<XC+@(*'WJ/sh+r@&Xjln)TNk
%a/=bF/l#FucH3l@@0mK@6cuQ\3!bD<FsY!P5-8tt0C3QZdu$s(MF/YA1m1-ak=?bnKl#q^oQO+9K"DLZ3Zg@-RaePRku"umXbGDh
%-rgSK7.*X=iT"JGNF.`e9e:D9NF?#:*ZYPj3t#cIZ+A]Kgj8R^;b!X:18:UZd_cFX?"Jd$OI,/O?OuSG18c._C(phB0!H5I/"9m]
%="070W#><MamO1I=TC&D-<M5DB(N0)^Oh0L)qesHErdI:l2t4c<V+Dq&KNf\h):]fNH,Ed[4(2QEM!Ps#EeUhm:rhN>t[S=?8(:;
%g4o6,P\-u?LDD]j7_rgl\:u&^M6!8*>Q^d02"`(s*<\YX;U74ZPUU08GI^TT(-fbI>ZlMTkuOo-DF&3W!g`a]'1Ze-Pe6<2B=W3.
%*Su&dip^Ep[e37[_aAEt9%L.<j\aZ8%%=#^Wo$<Rl^8C=:iY*m$jt;l,XkBTnq7!o&;hDsOuW:]!KqOi\CXN;mG3Pr,B:f57f6>R
%B;O7RfgQ;BRi%G''-"6K=Gk/3jEd9k?j,_]_dLXH%G'jaR-Um^%O'DLYla2u3C7k@fj2!q5C.=JgdkF3h6Ls]8kNht[FVIsM14Lc
%71jB'7BkZc,OH3q5:+3R/X:e]'gH]NcQ&"Z:6=$7/<S$8;9lU,D%Q,DHVpg.?OZ!dZZCHu$neh*6X'&]eQQLL]f8?TUf,nd`Ys*D
%G-s#7AcJp2RR627TC5ZOEJ1(9e]%l2TTK@We:/b_18cd#1lA89UBJ`o81"KG<iB"aI^II312Iu8W)D&/Qkq#c=9D#X)VjiM@ErPI
%q)s%;+-o98\k+>?U(&YC7iGCD!W@mY7r58h/UedrR8g1_D>%Y*?2aKL<IL?OQ-+*t"(kC'lY<Fhru'=UWTL;n)GlJ0gJR75En?"N
%,<PlgX?E4h@')s5_i]I1DIQAq:qEN5S3r7r-<(cUCTGqlV0Rr$I9-Zs!e3_"/Lm_(%^jY[jP:=[Y,e[(YrmVR;aXW"bE".&Lh%>p
%\)"i6<;aaA'==^:.PZ/haMY4Z7W[4"LBGM-7qd7?Kfd=/WcV4,M_W&.On>7fRM$pne`/UBkgXtUDJc_.eJqSd=KXTcCS=a@oI#]?
%`#$p)05@Ae8n]gcVm:&Vj.di8'J4oW>9-QHZu;1c,:"HC>t<WBLPj_F(U0%A6C3*:;f"8pGsH_%CqX(M:1e9,HT++Toip<M$?.(o
%*:YgY#%2f>dP/=e'"*%Z2I_]^MX%[Y`]p4:C(Aum.T($&Z$H90<N0!gLCG6Hnj<:uC(tN/R$9>hYbQSQb33NQh$e>3!dR94)sq?B
%1MX?kU>5L4/a:j@b=+-YHL880A[gV7;5Hn[eY;R1G:uBQrlSFAkQcY#W><HFH>7Tr`B=M$mYk5*dG)?%$W37T2:O.T*$O.pH1\B8
%Gegu[hWoWuT52*Cqt5I.EL!PJj^nlK^Kk]!@EW!M/qIa*ID%_b;2d_\*%GTrL9UM_Y?Yt/":'kL[i+HjhW%l?;T?/"&5,Mj^lZ/O
%F=t`X!uC6WZ?,XL1/X2Tf()t=<&m31O&;4EbY3eHd]Y4^mJ?L%0[,Of>NK$;+Hs1\c>LJX:&'\j!@DnT)#FW$L3VFGRJ:b@<"i"+
%478GB:#Lc/;*DIlW/rA(-@X&I#=1R(p6nUdBi;k<\&mrY2#O]2:=R*.8CXXG0Ga0t)?t-P`\1=*V(/[8Lu?^V"E^^`W59T$=uC,p
%&0sm/7J@I,T@`ssO^D4_EiHi!N_MX/"9[M]k/`r*2TC(ZrP=d%F%t/e_Z?$kM0AP%%hYWB+L0]6BXuJ<eOKmR-uDjr_81mCV1qcM
%^tsSL`(&&NiS(LeRg2N(&R:lnJfc^>T*.)YGW]FL-P>`d(k-X`l\:[i@JC+7lu3Z]qK3jA0*T8D0A4i@X]d712JNs<VE_(C*P#6P
%%G;L<g;X,6[3[q&aMj0TJ9=b"lY@6m,7Z_M/atZnE9OJte`"6R&]9XJ8:Wj76Q9+FGbo21%@Cp52]V3+3e5[\25S:deWLW$OInWG
%HNcOu8$-bI$32m5%S$^D=f468Q3Q[Lb&?\E56JljLX3>K>C%V7B61AdC6;amHUZS_dWK8;0Ls\/gOfhs::(*6n$fqM_JOge-%9mT
%rVDQD0!hal'A_IfleLAu)M!ifl$ac8(l_OS@hmDG?F9e"X*]m3<#hI(0oAO2,[(!c`'/L%1%Q[YLCP=kAE]>&dbQUXUDo3Q,W4Dq
%Z)tsFb(em.!2I*+<$OZ"d4jRQ7mD*Um+!43@(1H.&WIkeCF!NMDhLOLg4llk/9su_*U.T3F`AJh_blut9/;LC2rc;NI!<j[8Y7`E
%DU<36G\9m'oglJemcWQuGfQc,X^R^I7H[MVLsK,5K*)4&4)J=JRF\C?':`1+FV%'`Imt2^31f)n]$P7AVo,M/Xl/QS?+I!3V/jL5
%!oJ&;bUS6dTXfDG6bDLo;"h=FH`=VR1Uo`/Vl/<UnFMkl[0E!-Qj-4.Da`*dbtL\Id-9$GhO\NE^kaVkD$3MRA9+U8*P]g'-Jpt7
%C?.:6??k4MJ#Vr`F*`8=\8Q1*-BjDs/\,]33-i5\oXs:Nncp9:EKAtaDtD/aqt5I<q'VS8qiXT!+0I.?PH->QTNTn#h`:N\r!2%'
%g%35L4WQ^KB].oRgA,hhL(?q\iQm+fRs?(Ane!J2@KGfjq58.Hn6om^*d>=4p0Qb=2EbX\GP`7A*q@*[mgE@p=J3^AqqA!dLXcQE
%r,LFRrd#$Get1g[)0E3sP"IrjLPJuHiFI/sma-J[Nt/Gk::AY7gVcT#Wg-5JCc(+gL/-XgZU*Uj5/+kRNL_^u^THK#+9$LcL>?/n
%k`O32K<a*1,qP/(?@R:lO8[q<hsOa?BaaaW\TU#Flp#i1A2ZB,dq@R,9DP.&6O)kiqJ#-X_:FCsou`2hgoImRR9#<udt$Rp#M.@^
%a]k(c1CdOT_1sW0bIN)mcTfVG#E@oTrN^NTT5D5fcZYHjREaL/dri2K:`\G,UN$\!>`11]Gk[d3,Mt[u_!3I'i**<k&eM)Gr$>$Z
%jje!ohj%a2Ke;)SUJ(Aomj&mW6V*DdIJV/F4s$Tnh9<M*-g?iSZfTEVk+YEl>#!h#qn/MIHM:r_\b>aUDW[_m-$-OqI.[?k]2Bu-
%;.6e$Li:pdA-n.:GMgi6g.a[/359ZJgTLtIg!Z'#>O+?Uqtfo&cO.toc@5c>2BK45s893Kp[V=)rFr=kLfLIhge+2&H="j^DMiZN
%KN%^A1^1PbRBuMa3hL]3FnkWIo@<NFku9k1Dn<r0YeAY9EO9e`4_gm%]j&.(rVX6ug$i<taR'`:<hQusq0CZ7Pc^c4a4Y98)sKh#
%:LCm.4s?UN]RC08n(6!cmH!Y\Aqs[\VY.sKqXa'r<SH8"/`a&n4rUuU_84UgN>4PO%jCO/ai-,c,It<eW$E1:0>8cs\I0(4[ujB3
%T=o("8/K4!XZcThOBakpq^qV_bBle$c?C(^#jP^oKMRO%eXEQ;@pa&:f:P"RDI!*S"-G^VS6T1q[$=mDPWMQ&@-^n9,mUAnq8nbQ
%<3W[)m3Yo,Ps6PGG"uhpLTe-ban=6nRH1.7cf`E0O#p^4WN2#djQ92$8Q)T/^J=&g-V,/6XTqFmrPhT9bE$!Wm73),PE(+F8@m+X
%N22e!?R3,;,X3Zc$ZqG&o#^HVPC36!j\bU%q3.</o;]Nrb\TGd-*n[/09\K@N<dT'n[I]'(JFF^ah=JG@e/&=4.Y1$QS+JWcdp^2
%a340_o(?"oPW[b`0U$F^[r7GmmB6o>\$\^fanM,tDR#[lDr3Orc`bM6P@)V:8'.h'PLF(4D>cck](gA3H!BlEah)-O7C'5lmTZu?
%PhJi\.pRHp[N;[i$ctQH]s(Vb*%WXR(7,h<Dr893=O01[(,hUS?P^!NIs]#Y%k>rNK(X9PjaqihZF[9R<W0GsFN&aBn@\;ZgHtW-
%jE)RFq3ALppM$hDYlF74dDAcN^g&iJ^TK3%Bq:kJ][NOIO6Q5P_W>M&EoF#"?!hO=Z%^UFBV;Y5s0PTeG5&51f#eqYET+:p?uakI
%G.Y7b]"2#!343*ElGbo0d98HZ(Ysu+>^ZH\qg.f.ak-9F\\jb(M_@i5r8R^ph35h<O0?gIZ`d._(>g^HXXnqll3iOLZ/8XlDGD^?
%?eMK`d*6%m,^[/U>Ya0==?(VMrF"_ap?'3fkM=ktg@hSN&$4i]aoh+mjgPIj?e(>NZ8m?p_$_L$n_dgR_Kp1lW;5Mj7;?W4_8jgl
%is5S7ieIcj#Hr"egjNnF+4ON,WMS[!q[%AN[/BW:IqcU0no75coW(W./%r[hpi-&n;F\8^?.uu?ICjUjlH.c.WKVYBoPUAqG3O)D
%mb:Y0CWToZHMQZIWIA-O/16@i\\)raI(c%RY1/e4B46.4lWF1kr4J8#Kl33#mIOE&#B0(2b@f"ZSh.X+]mI0RCF+&t-EoZb=*#1W
%jn?^J`QE5m@UisofR1;?SpsA7Cqnj+\<;,;1KX:1:5^XC+.k`$\L=T2=$F*3%p#k#GO$cErOpC>f%oq1a:24B5"VoSY._<F[V'N\
%55FKP<d4,hDc[I"8$8F`:R>-IIe4#K`L$8reT+-c='M(o$Yq8\TWkkm>sDY:p@k2^4o=#.XmLS\2:mjeGK$u!0=)I1?Y[\aCSdqA
%fZi-ZZ>2U.b'dKDQs0KnpsB#)qtBO4$hNfF$faPBnF^hHJ,$/^I"$<?p-1aR.t.9`YZ8=5YeIPho4ac+[EJ71(CO=1\M)\0qVe2S
%H2Za\D.DC/BJ-E:4`F?cXb@Dn\p:Z/\X7Z\np?.Q*cKOl4PFN3995)?c,E3A4rkT'$=Aa_8!U-eMiEGUg"jZfdaRjuB58a*OZr\d
%Z14iA?/%?J4rPAI5$f4Fgndb`2qg4Z[FBNb_a2FO^+-%Phq#'%e>r2kMq%S%is.%5eXIASo#kcnF5`tcG]Vp+jD*-q/m=atp5@7d
%7p@QToDP/FT/QckXj(e)T<GWPeb!@rGdDXm4gY(!p9JhRW1Di,0!q\2L8@nD@sr'0FW\3Bou"13rQ4<XXhNt6#PspY_t5HB>LTW+
%NmHD,[o/["-S+NLBl0cl?=c@9@rEHdG$-OZFkF2%`>)l7G?Qk?F7"mJ[D':.Nh+Bej-05q\aahB`\ePbN\ot>gh^QRbpSRCAb5#q
%o`asS_ZqbLGk[kF2N7r9C]3[0bOR9U"`$&d?*`='*j&S!N>p.=p?82[5CAiDB"Ro+(Nr!KH"rtBS6joNjjg[8c$Qqd4T&mHNji'5
%UP.D#r9CD*rfl5!`CB6gdk%5t3B4Th+2<%tG@+o;VYgAWp7Y]:p&(l"Gk@MO/9l=(AX:[.hWp`ea530@!DpN-psI[1d_"+8>PWsu
%Ych]O>OR0uqGukI8Ii>bIdj@BgGZCMq<_F)V7D#?qm=+D]Qgumh=@t3a4fgQp%Wh+C[(BZD.2n<ms\Mgr9a@ZQR<`uhIW<AI99a$
%Ep2BrSm7jOGkIm3dP@CXg3qLrqBU:Xl070-LO2fMh]EsJ4KXt8bKi()Z?OWd*]?2F40%`k5P+K-EmGYHhg<(_[(H,rm2.A":KNmG
%c\n(#H91ltdp:\s5EsSX`HO9*MjoXjo[aiX2RDuLmVBghh6(9pe[7m/F(TVN;f<B$Tpol`n=bt=Zi-fTdoPdGpA/Ou4SRcN]9mZ"
%%\("q8#]JUe&?/b=9!;[]!JsF['Z$:+0P"Dq3XkEPTEl^j]=(K2Y5[m[pK%f\9jFS3bgNrP?VfuG-)5JoBtJh+a13hBrQ'Uqe^b`
%nNuhRARFMY)g<slhX3LS;0c9Xfm@i7lKMW$D=-ZGRh(5>hH+X)nT(bV%UVC/(=uobT&"jAH$^SpIC4CnU&!uqqp4H/^d@dGH'VY2
%X)?tRrf^!0[qb<&Y,!0-hk#>mHEa7ocOZV51>.;d2^NY:27&i9>^(('&(C6tLVjL8naNdRpg`_?FcbKEb'hjnd>*GLUSD`hG:U`#
%emCPrHhO^mI+eAOHCatUh1"bRCC@>,][\=lk4SDY]lp]mH*!Q!1VPmtkO.K=PKMjRQ`$=hnse+ac',3WcUVdDZfK!DoeZ@/g#KF!
%Xjs2QS(@8_Rtl^h`Aa1qYI<<#5CNP-:#g'embI[:6pEoGI<oj]]tEt0@P)Y968o_FS*N!Ln(jgoMoPG=S[\<N:LE!#XflWW]t$3Q
%]NbF,^j2:Do]GGpV[q""TCbe.n$d3/T=mI9ZrMH[fid)0TO0W"IX#GZI/Zt?I.d-lg64ko@s4jDro;&"qU86^:T7phk0s%_f%$ZW
%Y>=mWe]u=_B@F=+59D3/?[j[g&)UWhhRqOPgfr="bJN#goe1+C?MdC(Wo&7#r1R-[+7*9]oUe92^[U,F5<ebpHcN=n[SMpEYKi'h
%a&e7U=!n1GY]UH3'Mb.oLI1CYSmSiHh0^fg/ng5Rjo!#"@(t-li:tFk9Mj#PT3N<g^(mf30&F%?n#i9%2[2)3DN7JY05p9I[H+I[
%]"3<:]NI80/`/E(-1g0NG3S[hXUh8niBA`g?gZmjhUg5;l]n[HS%U1nhK$/OGFhGhGKm=6^\i?>[9J+3eq;,^gWJ!fo>dbob%I#i
%=^>2'<iS53qT!>Z;gVDhjJ5teQS4;Ug?mG>a*"7"/_5tY0>H"PlcGL?br>C?;sW2WT"iWC)QBD"4S@sOEV[u7D6>HrHiNPK(cGug
%QoK;&-?=4PR!Xa61HZ9#YAD.GhsM.ANa-e[FjJbShUI:2o=lKY]ocZn?_40R]Ct`tj!Ag0-CAA\K8%\NX2"XPPtL)?@.%+<$;WTa
%rU.aOZ^1d;S<psCdX9p*,ntj(1+$t5Q[$+`?1[ga#7_q`Q^7rSFORPbW]d5)Smg%Pk1C)4QuYnkZTS$@36X/BKB[)D>V[/n`^"Z8
%"'oM8_-T"skA\4c"@,b_I-6\EHp)F?7KU.SMssAD>Hk4]^Nrfg[^Ie4=ba*IklZfS"*FFRP9.[sm*Jc#7FY>J\l\juQV5^6^Uf;p
%i)p?\!e#o0>=Q*&VL&l!.G0\ZZR6Wa]3MI8%2pUCZ.*ZGXkn7YqRq4&@e[b*nNME((;&2>fItOBKik%F/5p%G;<.$sp7dP69,c]:
%BpI]HHaMB&G$UE"q-.-YpSoN5."C(HnRPfK_["BPQbE^&[m"sB`h-U87k?_?ko+]?dL3fn/-h0PNnYF4b&h[A2DN-2E?<<S1us0J
%A#AFG&%4tJcsrXR_?!c4%KGo!;V1E*DA*E-%3suEQCZZI4D4pZ>6o8/PRbnXSs`0r:5T)82cts22gN:C:1PUW:ka21BG!WkcS?11
%i_N;V=HK\t0H^G\7`tD&MXI9VQc%#]K5L\)Qiu%o!:5rfS'e@&B(K3q8^t%EVObL,RE#>'atWmhVbEW`gm%-o>(H+:OI%^B@.0\%
%)FeTF^kI=PJ8$Gr-NMh["ITIZ0b"GnGU;12!1S2/l-Ll7);)W8VAqcMAmlQZ6f!bb6QOcP=`1SPK:S+M0Lsc`n9`e4W8]cc<t#o!
%G7oofQN`ri2rW\%3=8r.gJ']&;$I]@NKg7T!;a'1pR,8fAgF[3rLX7?B?90n':,20eUCXP@9IW7@1-ai/2O-o/p)jFAMI:5riG(O
%/3k#c$b3QC6gY7*M?hj&9%W.1@4+_cRm8L>"bp#NQk)\NfJ,<n+tFnnoO-Fk7ukhr?:$1FV_+#5E#?#_D$GJ8<+,h?3%-$VWo$N'
%"VTp8pr1!mUTg:k>t_iD&Cc!t^C_j2/[.<m1BbPHi=3.H5t7FL'8:'^AW%jG\0;*XUPgup(j(?0JK=g\$j$^gdtm.c(6$4q0NV$m
%^_C<rin>M?+KB#[:&m)7BEBke$N]2L&muR[Ya>PQ/ts9$$r(WH:1Z7P5+;r\5g+o!"ORr<$qK:jO;]gPPbh$+F('%g=_pfAUs5fk
%#iS=][\5>VOMHqd"87>_*ZL[rCRt32^t])2l\LCVWQp(3@!`b(R]T-+Ug!900a1]X#tkj^cj'UTmfJ#7kfnVt9h"Eq3CDeI,2@_M
%K/:_H%`2TSZm_8LYX=Eu!="K!pla]M^g/rVojDPLMud/T*5r(ijM9_:>7r1]p]u"Dm2sf5GIl`__bup0h#UhlaCR;d8p&uf@N)I0
%3n+3HAX\e5Tl5_.!?s:=AdYQ@6ma2V"9J^a!Q9*lTZQ;I$1a[(>OY*i]e58`Q5ga@h2=BG&e73taB_HC--cV0'j#2QO[b6E;.N6M
%F;+)7AJ57R$pDK#.T);nU2W!J)j;$IFqc4-!NRjVLk].R7qakIjrn/")()UiUQmWCodrUO5WW&LUoS?SOdZkikRml;J,im)nkqO;
%8X!]s)-Fb[@<_j-TJVT<`0K7<-qj@1?t2>u8fS3CBNqJS'?,`X;GCj1N*$J($je^,'f&c4^eOra,s:%N+W1j,D!VNF6^%LXR0YJT
%L%V/Ui2]aF/=_Gu*??Fa!+7Hc`GG;^!mD*^/erC@!&t2b"Dn-hKX5*49$Qm>#q]5A.]P>P$4(GsnMM!q3'`"NnGpdA<(L(O%FqbK
%Ag+QD!sH5E/*7(X#K\T`*/8Lf5_5Z:$]f3]noR7i%NB#2r7Y'8"p)Nu'LN"_O(uLSl\][J?\YTc7'$jO<;]8W5Jo2*J4(RE+fkhl
%1mGk0!'W'/h+6!$I+D7IT\p]BY,22(R,\jqQlCSg5k/@5+b8uL!*BUDA5,c+k0@3X:b3kW!sFLYQnd3T%;&*5KS+uq\UtM!(lrW?
%!k>a!?jhXtB;BA`W7#u)!#iM$=JW"rj%BYkD/"$SEQ*#UJj1mS"AkX#pP<6!bmRqe%7(1;W'@g"?u^^r!$$9,`E<1qBW.sTUH5Cg
%^efHIU+\Z-$^V9IKp(4$9N9VC1Tjsl?ojl,@3AV_+B]'X*p="-PbM^+jL#sb%3%/0"N\\h`+r1H;#k4U#Q^fj&uK/GQC9oA23.a?
%<2t46VGb?(D(n6'$1SL@i542uU_?c5bh!WJe"pr:Z3f]e.kV&H`Z]l>VDO.u=strL?;%M!!<<*L0`]Q8o@CHiJVnVac$9Tu83,Ye
%#SA1Q3<6i#Zb2U+C>#>CV#^Er8Jd;cJY7K`_pLpj!lPRa7$5\l$k.8TY0hMm[DC:aqgccJ>SoYlB&m)$it+W<)Gu*i"./-nMbsNt
%3B<!5;$*&mcm=;DXMD;%P[kd956R[q#MTX5aHclLa:LB4DCu`#UP1L4$QQRA?p#RIZm5X+KE0hmld&YLKEf>b[BL48[O/6bLtD9X
%#f`=-02V+Z-.'JI"+[856lSXp.kqH;MH<^@*e6qk#;sWd!T</EOHr%k&%D=!6"S2X"b\QqnIs&!$@$g(,n!4p(R7[.S8u)il0=/4
%C-YAt'@tl6P#9^q9im_d5\14_ne?3I!'$,q)57D?'rpnbQ5MM4.6_0Dn>n,fJVh#C/"oG.8JoYcGaMt3BV1d&>%*X.0!Brp4d9p\
%XG=(pf$@A82?NZRgNq@<JN[_inNkUR"QdPK+on\JYR\"X"GOd8\c?nUbN?2@[9dAaR\1q99&tQm1ef9=(f$0-R>=lVVSV++T'?]+
%FTAqOKI.MQ!5paZOFb,BCJa!lhG$fZFJZ-[\S)&X/*eNjL+38I"mfAnr7a[tTdj6aEJ9*3qKpA/JfE!%'K(Tc6'r?--E;VDW!JR.
%S&h-4?n:Sf7BOp0A+3Z^e9k)k_R$A'@_C-DlI_9CU\)@\=OK\%d_d?*;$&;rPGr(1.I@BP;b-gYcV3j0``J3M4W9"Z%S,c-aPpXQ
%8^3JN7d'XV9?B1$E-0#<?+'gY/c$<1Gnc(e0lEe"L"n^W=N/WQ&.2"G5p6?,(:mZ8T4R4E?jp,N'LNBsaK<[>NS)%CS:Srf)n(Q\
%AX(lT6T2"t;slEf_JSq-.c^S!Cu`Of''"*Y5s(go!*MQ);\:tApGOEB;K(0@Ec7W_:oZUUknYs^1Wg=]f8+G__?LCXUXi;`$2G5q
%5nfRO.,C;bE5>^k_(!W.a$Ns?`1['2&`9B/4N3W*+uBNOYSI#*&BPdim"bk_1!_U4+VJ3`@9/+>=jZEl7\1>qKHQ:6Q4s<#Xjf*S
%bem/Z,MGSre(dCFKaVlSca@-fKNq2\']`f9Vh"jW$fs(g^^gk9V+9B.[VJ/*'EmXnZrcC]pA_Y#*CgjUIrlA33(hJH/7L5t:oZdC
%F3)G1V:3U42W8<N?T_;Y'0tj<nc;M%h4p"+:ljhf0naFrO8-ZdD,g>Prc9>(nAr-JO,e#eA>(5.5!C`!hGZ#i<5=JURSq)N,F4\U
%$QrhNil6<8OnRIkeK$t'FJ1.>Q#J;5k/'Uj+&+aX^7L-@[Xd"`8<3$HF9KB8Y$L$32@o#qM#pe?LGWEF\j;#kJ)\k?*^*#d&S^c5
%Ck<*]c\?[&pnKD_9j,Ar,qLTV$,f/+YY3<4HI5pf,dBse9r9;+WQH89=DutI4.:d&5;EYnEKO*Y+JE$`1gLpI,_TmCB-Z#[Sm>1K
%a9q3u'pX8G<Zlfud);,OMFh)n'ElkcBG(l:'=t4PUDRp?jC&Obr+K2#cn0PmqM;m'9D;YB^J*,'.'.O-5iK$ujMgdiL4Td6\hG]R
%lD9LL!-;+LN9CQcW$_R'&hr_YG=XEdmh&"8*XN\Q0p;rY$@ktTBT6Lb!gq5JBnGq!%(P+WLY3#HH3pbJ97Ta_VL!DH,L?kdI?\]J
%:mIG7Xs0*L@d9hL"HiLrF-qdi"l,1Y/?n8MOt*^]Sl+iV6:T$?L/=K2):7*&7Mn=YZo!Fl$A9^!<<L1>Wsa2Dc_dWQp'Ve,.rFIj
%ZOqIPNoZ(".Y;((*D*aX8[FQ@g$2G`"j>I[20faNd]JA"2A<Gs8'h]$Bkn&$'f]Pg&/[qTSl%pA`nE1%`:1oD?H&/-@M6#TR?4u'
%_!"l%C"cG]7,%cX(FO8.<ZVg4-,"BD+H+F+gmh5""'&c]<?OW&d+!^^LbXs,884i-XAA#FPI/CBWI^r*=c=@q.X^<#'k<Q:R\Vg\
%(cU_r3=\Mf',OiZW$CmZRn7(Ic4,3de79CE1S`9bo].F8VaKUB$?PO+;OUH_Ld)]MJSkJr$"#O;_]A`X%2?h+6=ppc\`A+E/E+6Q
%BVF`+\`P5#0!M#nf5d"qrhbd`X-aJfP9%'=ghT<"-87oeaK\!H>QkN^CI6/eJoPTlC_R_=iBScAkU<AF!$7ofZDfOC1BX^3W#t;W
%YX.\%7UqO;N%"!1'*#K]!ccYn,c)@q9b-u\KnXJ34N.snMSn.?N&8okO?f%>+mX])!?*X^!D)3X][MeE0Eg$/(Vh^L!:5X!\C!W8
%A"`oh?g*!jjcE1X9a:<*BTf,uGSWGg]&XCs>LmKfWqA,lj;J_X0d'S"1c$gcad+FfL6(cF?idDh7p[4cHb%M%4=,*i;4G_T,D8p/
%aYksn-$LnKU[gR@aL0Yc[)k$.%278;3k:uN%/hEp[]#;L8V"n`VCKFV$fftS0hns>:l.(U^VDBLgD/ZUbS8tR!_0i5h9XG5YTb6.
%g_A$"!(]ut@?TJIfNW<J8>^rI)e%Z/(/cD-Rd$O+5KbrOc[3_kU+dYJFd3krJL-U9*,0F;fl2Ar!,U!jabt`4.7e>J5(]Il7qTK_
%c5SMg/OV<c*]%6?r1t)rqp,7SUBm-?3)(j9J1`NtMe!p+[kRdmOr"<V?)OHZo_&jX@am^Xr_;B`4Q+Dq#Z9SR^q_O%Mc&-S;FIN>
%)0Q]2%s3[P-tWc-#Gp(_'Qt/uN6I&Y18Md";EP?gNhU\dcU-Jtgm?'d.%*P&5K7P_l,Z9n#0\b&mOAZu081J<%#22$7LOoL+TDlS
%FG,fcOPCCu5Y[FrfF!T7$"X=&)IqYi/:p)0'+qW'M$(in1"'[V`?Ft1`TP1$%7MS7VZ[#50ZC/!>tQ5uA!nO+!pQ0FC/:9/R.B9*
%j&h6Fj.ZNF=WpJ#?Pps!"<*,`.k2%(=gF-`(thSA=oDP:XcSF80['_%"jN:[N2L\u:f`[.8l*;hQ`qnUKj7=e<5bV'k;L<kD+V\V
%pE+aZL_l^>a?0f*$'[@WMNiW/0!,UVfYSs>(j1ZT_"]Xi,k_ca!!GhO!$S']6VUJ"+IYV?(6S>LKq9PN@fc_8'WUmA;_q^UOI/)\
%75\LI,/E_ZHqKh>$sB#*!mXh]":"<kQmqjS7+B:VG(E)u6P(!+,fd-Ynu%6Ob-\NN/nUPG8j&<3==.LOR^cH.J;GjGD9AWHN2O$+
%MZ[dmj?H3uKNY=@@8S2IBR)$Jg6)6G-R3;Z9ZFon5m<n&kT+Q?Y#DET7>s]6`aurW/5h+U7U1d!(`cOp&Hq=+N0VJ$V]DUu5l$?>
%.qU1LoOL@A.5QaAK@N@g>+r5,!;%C[;E^,(%ngB7:9m%lKco(,mR7,u?r/OCmpX.&E.gc@:U,m5Ag1V+M2Gnkk]eN1#W[YB<6C;D
%fT)kV-@O5@L3u>j530e+3^.h"D>\,NFZ^4Q4C!KJ#06g1gfmS]0s\o7+R#MQYJ-dt*=rm?R9!VBTp1?!)<dVNL]QL"nIobe,\&sk
%6Ti<&'2CUM^6r5YE-0Go^N7FU6^C6k2-`gPe0nr8LZ`+.$Od_Q"SL7EjOleX;fc>u]p&4TjAaLk"tZXRkq7l6+38!@KgNCl;X:iK
%?Q9R>\)P;npO0IM"4idsip]fT[Va_#@Vds*##<Xr0Ska7WM&"_@\ET'C4,2QIFg=s^,M@38.42fC?e.[E]mYai^4b@8<Se#`gfF7
%qaQ(=kOJc\^?0EKc\TaD;TLJT=A]o-FaW?I@lR??,lj!TU129?"W/30UonTFTMJ^U5ei%J!*_JA2!uMqU&JdN6a9LsnZHu#\mgOc
%@ZgcP[1(#_0NB"ua[C)V#hupaNZuGr.d:i(GJS/>^f6=-'*4-AOdL)%JUsUV1r]!%4]IV])B_M3Q#4`4I5X-QFX[UtJS]En1F3A?
%?q:J(ie=]b>LSk#Mc#+[Km?B"J>!?mB.H-oidj15gps,-$LC-_]8>Kc!9b"R*VXVYJ>]skHm"0kV/&Lg@i4\C7AGP`ACOjR5Hb3W
%\:j'-%Q.@kk$"&ur6$?(9cdNG,sXh)[NeKS=@1"J@90=Y\EH7*LUU/I?lB<4@a>Y/0o0DKaUZ9A/PGJkNG>V-Kd'71XWh(/1a_EH
%<0eO7:^W@<.Oer",Wc^gPZc:.BgV:#E)iW#jU6"L9I,do=ND*5)V!b/o$E;t:jU8lY1Pup.jEqVVJER*+[Cmb&11tW$L(0^(P]A`
%BFKO)!Z(>.l'(FF(k5S]ed^lf`q3&ja)iO[Qi$]J:`^&;P+^Q9\qCMk`nq@TEnsHR467KV^g[L$7Kh*8a`An))+g`*;]Z4bjPU0e
%\`(lqOi?7?8@%:/Ig"+$!8Y5t3r2)AP63?>Y[oD(Ij9nl0>9E^A%=^@D5s15&W+>K$b*l)O.0!g9k47X'^#(a=cE&;kIG7M-kMK8
%-e!GPTOoV3b021%N/iB^0Im0EA7?OUY(O$>^2R;:Jo_d`&Df$5qIZ*s+``goYCM``ks!-]D4Y[!+2kaQY7gig@bG^<pkO'F6"%t`
%FI@]1VfR*q=I7@T=Cf8b3\Nm!P:Q5ActNLngQ@tZ/Cm??nh\W4iVKto2J@Z9qQJ(^0]GH^B2,ld'F=)9#N_-pH9@[)KM*kfacC:0
%Y6Ti:81khFTnGYta**0"*YMcnk+]Q+O9Z_FER<@IA@rifO5"+,gD5-q!>n92Y&mst),M\AZGci&;d*-K@Q[j-*p13]OXb`tnH>.,
%r$P$mg_7ROVo1)JG@\im&"X@uk;I.:k"(#8.hB-6/Ke2:`sR@;!OcrO+i#n0#@%s0*-\pugm%k#P@Y%j)]b=([?soTO@1gMR7W,_
%W!bJ(0g\<[aQP]V&="_b\-L?D+M\a"(st58Wb>9h5a^reGq(NXS%O.4g^XA?.ue2C**\RbZ8bXVS_8)t!"W0li>ahPo]/S!K\6hU
%\e69,RhV,XLBWkA*Y1Lp\YE73H,)!Tlu8X-Ee$fc@#;Z)3ku2/E=.I@i3m$lN4e&"d1`6o0<qEW!Mu7K[`Y'qkTjC9TZAX:8K)]9
%?-'!%goHO$aUP.<$Rr@nc1K@`*)cbXPG<FJ5F$NT-N]Z*I\MrH<%ZJ8(H*"sIkW"BgpS9p%\6LX3'^Ss\73>HKEiH9P<EVY;$to:
%6m#JjL^at%h3`Kea!30fjXJ"]KfKkGE+MoU*PjK[dNXo8;\P`^N3ijkN`mbF$5H*q:7+&=#TfYM_,#eGddfc%`8q43L!F:-"r871
%e<HWdnTSHT]%!?G4K@P#X:KE)e(HTGl63SZdMNRnR1eZ8r5>'J=g2KN^fERc]:MSB1FX!AO?1T4KF_hNgpRJ7<919?/0rR0'#5hZ
%7';AcMksqcO8`NLgf;gBq-b[I#m:tF;*$X#eg0kJ8\MKU$q(-+2\V5t3MF0;[5?PQXLrDu3??k?gLZ:fL*Hj7EZg,E=fRS&T2bo`
%p;/p=nq[]li\FR]bG*hU7KH*aKJ4PsB^T%lP(X2bMAt?#0<.a$a=NhF`qVOQ`n%p>2%mFoRL@7QH-N"f+=L1F8*"\n6gh>LLd^@^
%N^tiIpef/N//?3*mKc;6/H"'QJ`0!)TtM"[f)-THI?pLH&7JO**,CY)(&<>rITXIQr*'j!2bkWtLOAbmBg^#.nKSf98hrcDf'$q)
%BNiG4Q?\oeqW2!V0>^X26;$P.p^<*TUpFGcSrT"je\M>_*W\YQ$KbL^9h)mSap=a%0<P^DA$/"s%RsBN3$B4@CRJp]&;CQGP<BM.
%,;`D66_b;i=amGBA6F9#3sZKf:]f*t4cV%Qls(M7Eb(=hM)-N"GR=I:C[ZL)5o-a\RULLlf`@?Q`dPgpe:'*>e>-S`6>]#d0I)*e
%p?B"J(#u9`7@d1D+>km]4ZFQ[KsWS<>L]rXRLh]g'Y4Pf5OIJ[/V,qQ\<LVrE/5"Kfg<kOC,Ynk*4(,SQ7<DeKQ9*\'B]HL.<,eX
%$"dmLD'GrJ$/Ga5,tp7sO:\!1\J@#iVF]%5P&Sj:Ufnp,#[#AG&0M10)Qb17?MZMr/[ZN)+u1/.,b5gqBhglfe5XjF]ICNAPb3b%
%m4;<?/9,@L;GroX<L`8'$3YT#S]?r6SN;tq8.CQ+2i.3%g*3J*=9R!9[3rtl%!J+<4n'/X(>=mmLsK"SVMI[qb*#-l&=$Zre@R't
%=ZL8%BIk9H"OeV:JY2<#U:LT#if!(>`/Iuu%.QZMEZT2cfL4nc)R,#IUW0)\Ad`+&1,t6nQmFe4eQN9n&'C$P,Rd&KVG)`A<G07W
%49aY4!\lHA*#kESR7\%n6q./T[CEO[cOAM7<BP_d:n5\5a[LrhBj6c$OfF8p-a@->$R.7`SeJ"//YToCi_[$S5'.)uPXEX?PQ9^g
%[W2dk.1u6=G;G>uK9q^I:'^1u+Ok#Y2pR<j9;u2<+pJBHj_R4#Lc<p6f;Bce4Xr9W%F=**(gRG%>nSlcb/_CY,gMXskO>^bQmU0-
%a]h.#-RQun>)(Jk>o]Mp2rQPb(eT,9!1A(g0W(@DFFmA]k9dm(SjR_.-0!ObEa65`27cK6`0;X6U_,lU?;t'u>eqXVar*<C!CJ%;
%ogDcQoVef7A>Z)h*fg,14cD9KKLR>AO2>]NIh9mFKBHMrGt3qs(i&ScTHi-R6$G+m'N%d;+6.95*Y:WT9Ec$i*a64>]G^r4&.B#,
%.U&]9!tjZphEsuV7G"\ALP2u?!LiRXF'go`XPui'`:JqB0UrGJGmmR$+mhZc@Kaop#\/I<MPd+449]Fh8QM@51kakB$j"uo`XnuV
%6/Q#Nj+ZJ.+PRO-JK[?]3>68."o>\?ogr>iW>LWU\eIBW3sliLo2&P:QE,E,[a[r%7il"QnH[67<t]K@U1I!:KB>E[0Z'4:I!GY0
%[ZsB=8/$f8+E?fj6#sq0>D",saJg@QLipQ_Ke@Q$Z?7H(kmeeoBnfAf`WKpqqn//L<k?_J6Pef\))H@Wo1I5k4O)mu6sJXek#tq&
%Ae\)m]\ituCahha;%a_rOr%mFbbRSB<FK&.ad0I!fs6K3Ot=8oO9u:4Z:s+2P;:=u.$Hb0j9hfb5puZ]9kpKY=;9\X[<.PLM_J5C
%m6Ldb5aMJ7+%h^q%T;R\/PZ%+W+f>u!@HXmJT4Sef6Mt[>A/$`Wl@s\'F,@4J:*#=!K*Y+0Zj$-5OBk/<6-,$:F&d^C3bT)8d9RP
%fi]jV)cdj/+geA&!J8uSN_QN7Yu0GJpm&M^f?t\o6m`8iKo[F372j1%7'L_IXr2Oo^sU#_7B"a^VF"HUY\p:NJ$'L1Q(m05'P0^7
%]$tX\^?U:k9tCWWjCX?q8jT,H/R`n-K-`>-ktWXt?brF.Gf2r4h@NQ*+I+%rdugX5q/mAZ7N[Ap,fGtU%%Wk(nmI%mnfhprrtd+,
%b4H%98XQm=9ni%Fcor"t_oT`-"19=YK:697FR_:t/meGb>6rB278*\PT2(CZ1SE6RmK8--?U$e(r:gIb2)*KE!Z[(dlge4+`YC&)
%V-H+e5M<*\80'!>)?#U:if06R1.5gd._,^M732J_gC0-qn`ZMj&"cdlOc>,2mHDB<q-c_k4P>K)ZZJWd4Ierd]%JhaN4q+#=BD*]
%`^l9;G=;gJ%WXq?+o.2TcpqbgLT.>7Z2t0;eod40&9"Fbjm>kYXl;9PWnSN?Y@l6/cI.D9I^U;$MrX]G=":5,JIEJX#^WO.S'3&H
%D$'Gt,m..poV>qG$W&7%>Wdu(l/Z3YnC3/E$,A1>OLOIZ4[,XU'Et"d?>)eN1ne15&&L;fkOBU8@+aO1@N&VXJ1OAEegZLl&/@#J
%MaLba@h,T@7es642SlZn81577)6b1=Y(uQYeI`6AiXLj^^k+>u*aU)Wd=d'4GV6S@d"9\/"ORBK]Kt%A1t+]<ArG[i<kXFaF'.-N
%>,dsiHiHaiEP(7u^\H=br/YW%>u&)U'KGc%=.+qNe$J.9%!,M)+4D]2eao"c7d6`T#W%r8BYWRXetErJMm\VG4VHmF@&=r*ER:%E
%NS-)'(1AQMKcC9#\cF!/-8PYcba[Ii$G@BhCNNFkr]k'UR*s^E,R7kQK/1AF+:X(XEO1DErCRp0KH5%l<MC>;nF-S:$Ap2X.NE2M
%`)#TA4([%hmXlPC,^<o?9UN'AdTr>p/.d/ud:+4>q'A?J(SarCV7W,PO%QO0#rb*E"qnDa@t$=Tl#PY^Q&"l]]Yg7RqJSSMn\;m9
%m`tc!*GH`&XTE7/JmBS`!Xk?uU8Bq'`E`r!o`Qb^5J@4Jn9)`*hJn\E/4rHEO`gWU\"D>Um9cRkoM4+^#R0Z[11:&1SAff5BE=/K
%BGdAYqiVB4j_JRW!pfA_*FR't'BGLq8.Cr66q4u82,m:(?%endK#_.[>F9Ii\hpB=hM6km%MJEtXkLQ8Y>BjMN'm=f',2IDL,eA:
%4PX&ML"kZ,#&6CCLq98&<=B<cPS=0A?]ub,AJ,#Qi(c41,YPIdK0qL,9k52aLL$I'/GogOT=c;8@&2OjTQLhEP./Y$/^Qq7&64kL
%FWGc0$8[i.bqWfEaj:3!0Wr4-PGaXIRoTu.mi$oD0ftpS>Jhs04Z_/K:]h50&R*QW12P?W1dY$O-VY8e[ATW/Pg*UGXuUccr_&$t
%0[$#&adD3=KGs]V9q1J$\j7.5iZ\Cle$:c*ZR$p`bj[U+iXV/2"cP(@./4fh[).&s`AVurbJUHt]@C.5B[!bVhB&P3o8Rke`MYUd
%75@9XWK$a=-LN'%&I9om>t0-'PF3EU=d6(A2riB6?k/XNDij@VCLJ2&]`!1_[b[rhKeK2t;UKpVE7Iu8k.rgD7oNbc[I$kA%D,[`
%c;)#94R$0QW[,8R'L(K0*0oSn%Fj"uXn2NE%-pK:WQ^Q6PeES%^'@GWDt$*AJEBo>GDAfuSFHsAV5&L83OgR,N%%\R4j8qV(.PH4
%1:8[GS;ApgkI)08J1FM[q3nJ[<`+@Xk;%uX;lK"Dh]-&7RhSC\J4PU;WtVSKa\__!b$U<-ki*n:%hJ*'K;cY\d"E3d,08?F(IobM
%+ir*"-tU#2PE?P)eC*Qp#<_)*=<+,`)HSC_PW'QZ<t@,\DDbO'2HLZ:CiQ(7?&(-e0$/Q2`6hl2&Kja03J)uu4/+>@BoA3CC5Wk$
%HX>;^Ud@\r-b<1aiNmR8ZP`4fl&M8R2Rh#+]'^JG'eksiBAtqI#=[7ECJfSn#85(Y3@8)tgB&-fiR%Us]m&/Wj@HR5T4$Nlf**k%
%pWKiS[>\r]OR(QIJ_ge9^AZ].Ni9Mcmm0Dsk[\98$=-pP/i<IM9J<,\3HCpu]j=8V$L8's$;pPb;#S)q&)OY4]e/Vl559.Ki]2/G
%i$V1*iYO7Hh'`6a.;ON$!4s`5>Hi!<04hA1iQ=57X:'r8ZIis!W9%+em9UiA*%n/PZ_b!SGu,ZL4dhWW^F\)M3$PpW<RCVO@@W%U
%VB#o?Y_%R>aBF!T=:_2'i=cHR+WZ'rZGl4bE<;'6iKhV1bU(:BY;;-U\<dlDju\p<;ODcA&$Js.F+uE89(MB$ieS`FKXl]DakiCU
%DHj;eLN"h5o'3\>Fd.\g*f<&Zag]!16,rA7870*,9]+^8S54PdFQnO(]Gc?GQcg>lDoMrXIOBG'VB8!=8rr>c,9rV[)X1*([)SMo
%DQI%O>tQ5pkhMZ9eH+*(:/q-0_3<7'A]72!XD^7shl^s99qlfKQ/kTJ]@<@)PTrs8Q2B0fZErrK;sD@!ag]!s?qqquQ0n72XQ7"6
%XKMie/*$3jad1*n>#l3eUH=Vj:bJmJ8r?c#SIWi;bD`D5SR###D"`ES20#4mqQAl7hg9X_]D#DrQQ*Bo+7Vp/\Gede9h2Q_^p1l=
%W:5[&-;aW;<+4ibAo@UUC\@/&UEf(W:MkeDT"*XL/R:Mn2VpMWl5ni+h*:SAfjXN`,N?Lu"Q2:U05%o^_FrGI2ad7U9L"![(uu_&
%[F<2@_@,ZnN[/J9,JB/*Z<\b18rp%$N9lmUi&mDP:0LaUjuH5?ad\m.QW#8mQu\/!'aI>[QO<V+BkM0+bqhFk2eS++7Tu-9PkL&7
%VsWuFW!=:=*'D3L?J[qpaL/aJ7.hN\,o[PqO]gOC'XWq_GC`)Xh'8-].CnR5B!C-OlGos:"n.EpH_`Bs@7hPeB@L!\Kd*=8Z\sNf
%d5b6'PH5g+!9cC8=h/P0AWe()U"pp(MmFSU\?f85SQqmO-p=jW%@#i.d>RC4[V^OmeCGnjLs)Q0$;]hEm8_Eq"s#-&S=N]kn#R`d
%gJ)m$,c0.>=uqO`1II&<p=\k\Y8+;oSU3@FhXZU[\kXhA2;?,^fOhkT34#YK]J\Oul0*IWi"%X8]9E8%5AHnm6]`Tb8IVK19GCYV
%Q.Jos/i-)d!KsRB.];4C68[$?aeq?>Nn&Mq*@9^cQh=W8ZHJPbOrb8:Dg<s.A^3<d)8DJ@A:M1TXZF4N$'/4S(eXC>R=t68,ONnu
%B9m@Z$u[pI;sAKkgG;6uT6<c8+"a;#-Dt;$l7kpmgEh_#@"QWKJ2@dL4g<OqKCVYSSj>rkO3M]57'Le$/6oVni"OiKjtTPaf5pJ"
%d_%L/dsl`8eu1=WQX@(ZeJXFcULnM+Ej&OK:F78_JJt7F_QVsqm,D[gr(_T!?$;X8KR*B`:rP,]f'qk[^Pfu_s7O-V7udKA&*bor
%?.B4]DCinB9*6qlUkf3`DFQtRj_/i+$BE!)M<FNMpU3sNCtMt'/t_HM,!elCgV8e@;Wb6ik%l7R(^+IResUU_+e;ms)D+F&Nsf*Y
%8n;Z=nV_*M5sja"XMn)0S6WQ=W24i-NI+=QERc'%2Eu'"k_"5qmEaQ.>m:j<%Jm\AU@p9C&#8u&\4Km7K),YJQoLm6GMQ/6U2^7t
%K2;7(h(b7+\<D]4eQO\\NIQAbZsTgsL2b6nTrX8`4HL,.#Y`C/O[)tZbIeuUI9A:1K,0X$]1\l=cS:j$LH2*]D7n'Q5l5A+Mm$>T
%SJ"#Rn\MbhW8Z`,,SrMkb@RCQP,G@\Ur>@cAum$Xom>igcZ3/Nnk2+F&&3e&Bn(_AiY-OtS#MT(5YsY_2-Hk5Z*QhUE,lV&Lar#@
%o;?AAU:mABUlRVMTDVQAQ<,ZiWQO%@]+4G\`9X:D3k;-j/1L^QM=Tdo!JqX\/jWRgqjPAie5nS7<nRF\qV'3^fu/c??Rgf\['nb4
%=aE;X<T5)?7gA!KIFHRD*gF8O6d>_%AuPu\1Q-Aa_$asA/^5@Ro65#DV]Y+Y"-#h(Qq,MZN0Rl,J7Z]n(IcV,S54%]J-*mr:7n7o
%1IH1'#Ok_k<jNq:aSb$_6n!7R-"iXgeAV_dUi2)T#V$*B+BV'EFt-At\W@V>ER)bK:j[C(W8(7Q=6Bh'o&@ERm?Q(<g$^#:p:G/'
%<E8$:/hO*A$rMjSGAGFWV7<=m>0b>^IE@8NMD+!n*2!"h3cREPeueO0PYFm/\X)keo$a.Y]7sBi:i3Z,J8Uq`_EteXO`a,d;cB)O
%0'npne5jZ-,>>;mlco*iI,&+O9l?!7B[p2!-V1K_d`8isr)XF+LF10Ynl=!ZD/EH[3sS,N`-5>%FkZKqKObrj@ikl'k(mK&[&%)D
%Zej>+bm#4ZrR2i-omcK3s7fcq0,;kG.#>lH*c0,06$:iH#pQd?"/qlR?EpBHn8'sGg=Ds%S#dk(fGRF5V1-GV(p4iXAU+*>C0<-\
%Tqp/;D<7kQ>)lJnc7+[R"bL5*0,H3YfT41\:1A@Ai>4+^1sqTu>X$Hd2D30%bEg$&j#ijnOKE(`:D^mOZ$a@=c2-AT62^3'i)_GI
%%7I1;\MNG*G&tPhUnPb="L,!M8+_"f7=X:epn>q;!kA`g)crP\d!^?(q+<,o@>-Zdb0]XN+m0\t)VKs?->_ioY%\61P4Xm9k\sF^
%2Un!M1"In=S0?[PM*6GkHYil6['bb(81OWW;>'3Z8o8F%H;?]l/R:$)<He3#AqY&3e>"`ObGeZ+=@]MKkh2]R&Fc^Hq5M]`A&n.K
%!qZ6OSY&S11<7:?4cJYr]1ICRK,N@EXd)UIH6#]>PuPYfr#*$%4):@1Ds."U^J*(?];66P7JG(J(T&dq5bdN-Lme]=`UP]pMpRk,
%][5io6'Nii=p]R317*HHNI1IhgS3QbW`@<CJi&[ueT5cb[Q<aWl31fA&rjUme;BA2=poJno"E>gm3RR#ReMUQO%l*l4Ufr[\:4)"
%M%)F[==CiM>@CQ:BmmXWb-D"M@aVSZ,e?tTZm_+tr*j_nboZfNS)f]"]nL-mTQI@]S;8eIZe2[;c?b8rf'Camfs]d6KHeD'QJc5.
%7[i;$6$56J_V+JA&?XL]N&5ot;pIuTOaGlm(6sW1Oe)ZBa'S%U`u@Cl/ln\f(L;[WelbBMGDYW8q#ep9>Z\R/-caENcD;`p\u?FF
%MDDUlc?MemX%g$)chh/++"$3hf)YJlR-aYTSPme"<g1cMWN>Ao25rbY#a?.U..(DN(%4sN0b]afQ.bmds#',Kf_4We>0t"3OXShK
%Z-29D]'t)3d:Os1][7b'Og>_@8Fm\gfJQNS>WB[<cW&,u2`BM:)P#s#[p-<m%JT?`RWK%g)A`O[q`@DWcr=_HrX.uPdSqrIQYA6e
%Yb\VJg11GQFS,,:`J6[E$F+nXfd-3H.!i&2*qb<Qq04K1SU+]EdHk;qlX8;`bcdh6a;pEu>>/Q6*Sakd]el*=]"7S$84p@LLCOIp
%Wf+I=)_YcSAfe4*e1Kgn`.Y1]$f`ZHhg3sG,p]UbLSiRJ=B!b:-1=So2T_-AURs6l^>HB,F(=H4!+\C/FP=oBCqg,NFEsIe:%_cC
%2bT*(OhI,9=-JCkH??s]eb6QHg?\@T+;$kEojPc\VWP)7s47W3S"'jTq<Vt2nBYI;7;\Q=LqGgC2RfM=#XmFqai]KrQbKr."-BDE
%T`PX*D6B2e;ZO<42ESV.6BC.\73!]DJ-[C%9q.(S]ke!9;kFZAZj>_Vq9t?E?B3d!///8,cfUecGVu3uG7@iEj'1\iXBX"Q2CKH-
%iqLO-p=J?sIR$,Ha-%2TnVG?oFONdgG\d2A<6%iWB,^@OZKP_."<sk:pgbI0>S1,+T0o&VfGBWeKe6A_q&-RlM6;OSU)nT#"[Pe<
%\a;Y3&/c4UHS>=N;/bhQQ-mMF-(>RC>j$AK&Df;,9plR\L+ash2u=2^hi`8..G:KfK6o4Xf_8OZpJ=#3l/*F]@lNb1GkHsW90_[r
%U3fYSQATWVXsG^E5bdo9b5Pq/`@k.l?6bSeGrCX?*%fSQ<BtI\OG3TT,_Rs4CTPfqqcds:QK%Q(,!kua*9E=[0ah5C<R`U(\nh`F
%\EpN$oM[q(7cCd#>6L.,^:)A;/cD"=nU>.169cX$5j8@s7*hI&26?I<WZ<4LAl^@7_Ef02>GkkOmPZWTen2G%b/3@/5njo:k-R)-
%WlH^(Nj*Y,qrOqj9.R1q`A!?[GTG3g?=h0jf?,,STIniW$.cG+4<LIW'+mJBM3cJejtDXS<=e8l\IMO9r9QrccW-@0".G'48bZA4
%8[CcHj=Wi7:D&GUEW)s'"K(\/4d?l2gs<YkgKiAaqt9[(D[-3s%"6aaIONp94/-8no\cY[SqWe/aiPd8'8fegLogkDW==*.0"\=D
%+Ws(_Mm,S.knh!P>9m`"U<?LA;6'H+[k?c6@I5_kcb2/1%?X"&)3*#'hGisje!<u_l-P,p!GeKKns5cb!MQr1\:goKP6"ln).02M
%gKr#4=$jn-6<BnP,4T_0f.t-:2JC-BBe)%I3+YZ?WsUZ&Zh/RIOeIEY>K6Z5.XbWXrVcYAoZ8VT/HotS5?YHL%.J"S:mO='V8&lg
%Rhg^BBH@2iiYSPoaTi.<YfYd0QPF'bY47#kCV"(\Q',Yk;T]2A'hN<0)PBTs.I^HQ*NiaJ5MP`3k2J.CYH-5$E1fPu`[p'kI_pO:
%%/]YJ52mO#E2d+Nk>)i1r@+1K(so%[2f5fn^ci8`H.IFjeY>$TRpMg\GH2\(3el2eZ=r=>Eq`![+2KkGHB,VG':."Ga#/N9Y)t($
%AN*>>W_7;EUZjE!re)ISn=p7&>dHEdrA.nE;&PVQ.?TZG.Jc"1<+MJ2jhjHU<A18i+E?"jne>X#7CI<c]EPOeK+jVBTI<,A0$L&l
%cN4*5NW:F!IS-J*$=lnRekS<4=`dM_M8IO!Xrc9NXQAi]=toRlA%)5B(sf%GNBRU:$A"ao\>3m;2"7FkGbUp$<ADUEl]I/s@*%14
%q0]&N,ol.7INd)X^Zl5C!I*(;^JJ0Wo(j!77XqGL,k-$.o(o97RlK6=EZ$oW6CgnK.qJq!k,9:-R0;mm9F73k%`'N:1cC8Q5-(ZX
%EP&t0GI97k%rXa/#a89,nqtS\6t&oPi7_lZcd-S6d:aBJXEFesERE`I;L>IGp;F5'98SBD.]#pROr6!a^$kUrd6*_C^K6dRCru*V
%\>G]5T*;C[+NDmd!\`F.Z;3l8>4_^8GbnPpH9\ILZgt0/(p\PaQIlsoRm=_/61aN==JHj96Z;+/Lf(W`7B44mqE%-@<^bM.S,Ag0
%EF%?$Xe`^kMh'%.UR*5!!urLKBZApJnY7\%)G\5tRFMXAd3ZeOn@/E[G8R'L6UR&sCUM\T_-aLdqGQpY<>6Fk&)"ds\siLJS3FiJ
%Wqc&ZnolX('?*Y-PD\8Kmj5UJ)T(f,?D$oIfb=/G;]=1^<=bb#G=TI;*patFREfDBJ^MsjXMD>W(b7SMQS48,WqHi@_g%0?]&geB
%=A93NbAsneYNlOeO:uAqAO?'"(5`X^0sV/doOXNe`_R/cn["k$o=#psP61-A/UVfXhou:FKXXq4^T*n(:D/3A@u3GJ"@0op/JUbg
%G+`H+iC8nDa(%ZG"kWcm*k,V&4O^_!Y0LV>>#e?Cc'JL;6g[MNGrm9ua,^/qe3(CrJ&!W5L3',qm=(!4pYnHhlENgY!\qdUP_&7T
%Xa4ZBA[58AilmT"?jl((U%icJ),qCn``U]8!F>,P9qS`k[U)tSK<TIg&Y3-Pr/GG/#O;R-=nI);5p6JfCri>CkE`FH[uk1k%K2Mi
%.*I6gOo():Z-Lh1_>8"koG=MUlLIrq65:!7.et9a0F/RO]#:RVgJ!:;Zponu8KWLN\3<V:RWpqq;HFSXCal?="]Vnha.6q.1(rr(
%6>@"J'",'s6k0rg;,^#YWA(#OSO*JG-R(dWpap14gPED>D\2l%0JioN+7te%ls_a&I,tos,Kq&;bO"4@^4<37Qj#-jA34;9qQeN0
%?_N@@_G+$8K9o8b!0cgL30(`]S+nqp`BU(`BmVKQ4OrM3i]W&nh5?=<MBNV'M54Q(1c8C&Q4t]@Fa-nnjblB6(CMuq+Kf\#*`Ah_
%hmLSrs!2%[4BqL0,PfK`d?e+$R/aUhQPH$SinD7AkSUErcj2:^b;QH50<;Rj\B`:f"KoGrX"NdEFOa=p#g(qh\2o[X.dOfG<JRL[
%)LJLqAaOZL1QbNM9iCf):fZ&h#6Mcn\3TnEA<*tQNpte[q!]+(/[8k?%+P]1W^UW[(-"W++;YS;,DT[*,]SX<dgES>irf"bK^j%Y
%,q??og8$@4<BH6-D7_t)<6U<j.r$?ML)RUZ3_h!Ar(SUFOs-b;\$Zk;5ko\QXR#0GdG%Z.`Ah1iQW-47;mOlVUahTSF#$5jYt6"k
%,E_/rm`9+&[q##Q#X<d$b0*[+]D69rbcr1N+_\L.-L,Wi#iH=LKQfX$D+HeqnNi!#X7$uRqnBF0QXk@XUM5][QS5;q&/:"a+@EZE
%4rlj)hhC1uP=blNs2S\l+j$/)4J_g24D6T>egOE`:]E=dU4r"Q6H!G,S3o\rWr;!YOc!0Q[*:[u(jN$,/@%KK'-hie3cBcB_rmtT
%_=Z.kl3,jYGIGt*lNl%C6_u2o0Kr%S)j6.$"shJ(ZUD<BQouJK!+%"G'd3<-2C^R?i5d/U[ZnYnl0]_+Z0Dq$\b9U;Q0ne?oi'rB
%oO:5[VemB1&sR7,l3@dqftqMhqqZ;S+NA%enJX"DUS]niB+A^q>%U%2kbAUm%DUt%aOe?$Fqd/gT'-5iCOh9YgHcR<nO96s_]0?r
%.`HMps.jC'(p7HWpHY\]^]#j+kHH,,kBk-q1![^!9[ThiY6aE\U[4L^'bN2EFir?.(X(E,bqk]_@>V7,N-nG3cnWs66Oc5JN6A"l
%HYc\-6cFGkgF/*ZjH6tGTtdR(J+VD\Gr%4-Lmk;Y-E#cb3"H,dnN2STUOq%Lg`4WU?ACgr&[Gf^N.?82pad%$mB?i(nIKBV6Gemh
%<)TE^/^$Bd&ZXtl=,Dl$28[Ok?3NTGUs1l(GRNb.;&8m#210G-$`k,R#hAI9KSh%D9?P?EZ!N/7Yh3e@:pEYrYp=q8^plV:;5ld@
%=3YNP[r?m<hc/#fDrFSHllKir6YJ?O&ZP:E\]h:G\"D$b?<Z`4<P$DlJ:Xp8#>\'5nhU3*e+E07Pl_OqI;5]ijq39d>ok-sd[3=c
%P\TBS=*3q_gUpV"62-&<CQ&e@ZL&QpW=@$^acZct`u@9J!nta6@G0ts@\.1KZ%FpA,8LMR7\t.G>K?RYG&rqA0]P5'aGLMIdF9VO
%N$*3k;P2;HmC9F@Pdf01Qgi+s:TF6'KcF4W[i3Xt7C8[LH$^2OXe;&nLQ#\6]t>K.U/Ed](;`+9#U-X@`!?9)qN$j4nbQWRKDUkD
%a"0_"+J.%05uuFAq]VGqWo`S@W[k)Y6]P(saW,RRq:/E*jD6YQc7]!CZp\Xm2&fO&5KE;VVJi)2g(l2'NjT1eln=ClQg%FtTs<,J
%6?kK_J03bG_Fn24KF/t"cc9akZ/2!hHge128=jAh_T"))fnNKC%9075h/Ek-!gZ802@:"m?Y?//ON^SfH0L2)qFRc;`%lFP@.^-7
%B=p)o7H;8T?"nG>g0uUpm-7c+W\R,X6`^CL`UDsZGA5Sl1m@\uJlQG;5csM]T'boPZThcLR^U%Y(F6"Dfc`WZXC_`N=L234eciU'
%[S*8q!l<d%,MrR?!g5IYJ1*53qhsIrlC[P9EN,nT2:^4Fk%cSj+tSemhm+AJfQNr-pf9h>R8A0m3E_NEU-27!N$&C)gHIGeDfJo+
%8AiOs%pD14c(5kt@e5R(%6Ls]&QZBIkG&fSlJ`X2pPn_WO_IN%h%h<Vb90$p`V6<m+3=sVVTPM1TDqKJrG,;BI$[J<6UkH+m5m,,
%g0W/^hne::'qFFb)8k:@kPapVWUb-lKci's#?be37\GqpgKU=5>sB/,K8%81&oU^6m8&LjPJmF-gXSf']o#bSY1(ur/St3:e(k3n
%!(XT94X#X2E&rDg!"r*HYYQ2o"Q4l3JS)_*)HDnW7&3s[F]F0G_\rO:m*e`r3![>[pYkq7/2$4s^jiib[gd]sj>rM8&X13oU?uFB
%I*?=pNj>1V-2(e#;>!W[^Q1ua*rgP/i>qK'\9'0/Ck@^>;//tC]&Z_JHquu(FIgS&8$a"^Bj`PG=.+PC(+Q]n:bdcZi3%GQ_iaGC
%;-q`uA4H\SAKfk5\f<1k7955rOUp7[cX3@5Y&fsc[5r.c$p\o6ZF(YaLbaW.,+C=J_JG8)que$n!+'+EgA3,Z)j8tkJ>8IZb>aa$
%fhrMg6NiJnT"lVj&oaf[eQAhSD32221;JeL1=:\`>d)<Y@&RRG2h>fbT;'+KVq@Rjl!@ht]gNm%DEb'"\tT\%\gHm;4=i%S93"<t
%$=N7MeFbU"dM%$ZftD1k66;T4`S/dC-q:bi5h;9=qB.A'UgFZ"JD,</lr<2]E':?VfIpV?h/5[Q3,_$2,8pI?3M$Ng8%BS,jDpTa
%kRsCXhGDLIef,&YKeBQ*K<$7RP`!:o;LVX%@F]8X3,@)7_f94eT[C>OrN:m<Ek%0@d`Y?9<Yc*8*6Y9M8b$DN0_X\5]^<2NP:;pp
%n3kD0VjZFjdW<KuP%*FC:`$?I5pN>4U4Vh]6*D<D_.6LV5\2:/-A3^OXDpo'ddcsIPWsTr.0"'QoLDre.>7%3k@KhVX>4*_.$X*Y
%8s%%,[N5`G:uX$/qLg.6UmJp)SebFIPfOKJkGA$RP\3<lVS6`j3l^Bk*0hetZA_44U^Eu.gn(k]>SX*04q1ujh0Sc'-<#*eJ<4Ng
%>'CC'_R;CMGhf*q:#CN-b4=g35q5Zk]#"ekPt72d\1B<3_0>QhYH1Xfq/4Ej<Qk>Bc28)g,QR_i/!+3V=/V-m7\S_F.9\c>Zrla;
%8,3LDjA6rr\D?tMc$oI>;:E;h!e'^UCKU[)]!O=P`9V48^FOs/7JBKHKk$P"N9%BF)Um)t#o4YSUel9u]hJ`_Tbg>f=tA=Mol7FP
%>]'Q5>8.jNI7UmYMNoA?#jS5]]]>CnMr<'Ok"-P;X>cpEG/uj.jRQb9W)K.,)f)ja>6HcSbfrN"1^8Pf\Rh^0AY7):.h4d=5j8PT
%)j.DUa^^2_6+T`g"X7)s;08icSunG?"WA&%%o6E7'k^s%Ff:0YLGXBbF/EjVijLYN)hi:0]eI3&O.2"@2K(B(+*%bRmJsO:G[$uM
%^-Vgm:HBB6/<3,"B`0'G:_6KOJ="\dP\ct2>82QrF\,Q&p&V+ii6<.cLEZ]].E+/(o6%a:k#CtfJm!b#Q@JEtM%,F'F2?<>giIEO
%dnliFl3i'?bWT2Zak'GN]1;Kd6=:m9h.rIOFBQI\4Z;V@EQto4Ys:tRnkm?DG=>2g_XC.;7A:q-L=>eho`9O6[?"ADAG/=6r:Mcg
%C`!puNXB#.fsYW.iDUS64MN!a<Ds,rM\j\+\sSt5KTp7fk9b<c@^P'.Kq#$*r+8(K%f1t,.VVl1;R>$6I$W"AlGs*iWn&8/H5P0F
%7=sr>dS,I;M]d(sJMG`^=:JPkWS=.^*8s:]Np^^-cm_lMS<k08S:/UuFJPpcL3(]c"m7M<]TOolFL-gsC7Y`<dXd[&B`(I?XqKNg
%EaNksnrnraP1.h$Tl&2O7*[iaob6p_4DJUkf0,W,k#3C0&W%qG%&]$3Yp)fH,-TLNDt;t1]G]&)KDl\Re[gqTS3]utHdum`7*o8I
%&7!pd!cqfY@o@CsYZ4KL7s:I0>,%E:o:DCJ<$mL;WVs+p$:,QML"kEc*+`\MVkIW7dDP9Yn4t;M^-PTo.9'&Qgl$6o6nG?[`O*=3
%$L7.!?)nC:_fe5n2B">NNCnrF+[d.BIZMM/Ljf&_i07lhK&X)^P%E/A/H`.-+rJ$2=*5s!CE%5=8iYX!oB;o]5"ejf0sG5!:Tc99
%/-0AJPT@A8?n;q;ccC7kltprGh41saBPf+`%fi:p)DPgH<%\`IXQjZQ,F_IlII3%<XNlb9U+gO1PAo=B'-//4o9"WD?aAXGQ-s#/
%in\R%pj?'<!Pf.k[eiL5imuBafiD25/HN>a_c]*Q-X#mi=Gui>p^"bRO`[4io[Vju'Y:dk6\G?>/H;fSIqG9,7!&lALaO^mD-nI,
%W1!K$9^jo^37]:+U@X=q,%PQ`=*D1NP#Vj2DqV8o>.OjC?ChT-Z%:1DE\0EZ=g>&):<(U.E5K-3Khh^d)3cjP^+1YHIh*TPoH8B7
%jPMbkIo4kad`[2L@b8AJ]bo0K\>YjIZ)Pg(14N+QnH4HX.eo<:23H?(/P*5!MlTR%-IRgepl#kZ$TWLj/lK[-\;Y3+lBaJj#51_,
%q2M\'OGeo;*KjSuV9cVm28H_3>&%NpiM'Lr2KB:$A"iPoO+r`[L'1LRk&k\QA(h=*bKEF`k\Qlp9;CoEkqAl2:gL0SQ]r/b-ZhCg
%AR>AJ:[L1218uUuD+(.$rk@5n4_)cABKqN"k<lC.qe=in=(7kJ,*QA/`kXP;Cr:NPg=IM_UbI[J/q7cG#U=+JkRfCe'a.j7`aSL=
%E/["e\r6h+6j$6456)YWdl^S]E-aY&eVNEqrVAXU)'k([jAQSrq(%!`.<7KuQ#n:/3mR>Df+OSYDU+lpUCGTH-$^@m'[jDtI/]Yp
%8$?,@D`=<O:G'q:Sn?^pI;ge]juO"o?45qgRaDpCf*2!J$"YT<&Xe5d5jeg6+TAc:b5'N>2ek!D7/`<q[eof`-BKGeItd!O@mKfb
%Z5cf#$a-,Z-VrniD)V+al@QoG91W%>PLJK\h.dSK,'(NNL,4Q[')"O1dEj3=;%,/Y3R48&Q4V;^7H]gT=U.X6p#K:'rOme333+pT
%aiY0C+-AhAMIP[(mK?CE/p_@#'Xb/[T8"IdR5t)GLTURsH6+AQ=n6_3d(\iWP3k<Yc07dn\8I"\;hkAV>=!dc<Xqmk,85jOM@B['
%&c)iR2MtYhIFatR_aNa4feo+($JM2-HeB]M!RLgt!+ETW;e1E[:g-Yn:Y$9S*1:Zta.])I75F<F4<'<0;lb-<JIojM@:>IT_BH:[
%mad]Erc\47.#T4b^2%X>p!<,*+tLsr(hm2:$n^mE[kCVJFTkr:S;RC&!(n".=8fg+2COlT*+K=+(<La4epB[>NV`BDl5u&Cp2MjU
%cpaEE9!TSHAgq,2FoYV@^90VATMFMQ/u/4tRh!=oE%%,4*MDLg4FMW3JtP'*arr#!R8h]2OmgdQbu]+;rlTTeG"9L^4&`aX#C<8R
%][+@_DNA0(q1l[hj)qZ_a=[i,61AT@RUauG^J4nq*4pMBh(i87qtW<L$h>m*S'%/[W[qjc)ab"3OEg'XA6''E<4@Cr1_N*]R#li9
%]Gm^)c*%$pEh-)$:%>p]T(n92[(J'WC%4$qo(]W70!@pp%Pp&:EiGc6!o;$++@s4!b(oVYR]$-Ao"N0-=rk1'hd#;D7l:?h"Y`7P
%_$i.$A!jRjlK@]&>,:JY'#k?d_$c-NnLP+Oap4pEHVO%ZO:^l-r?*MN9@m@PeH:_*5I.XL;ehrNWl)9q4J_CK.kJ8[Zebe>?Iq%d
%&2a`rSW0&emk7eW.36u]9'<CI86CoDkn<VJobj8PLUPME`UH<HS87Zekb9NS0:g[bkf5^tGb'G7eED?3539n3h::HN9`*JR-j;[q
%?Co_ZN1_#3o[`:bEb*.I2d#k*?Guu\:ejlS-s8X;'c4OhQ3HpsN,r'^cNC&D\gUSe'>EAm*8Qk^80TOO95c60D#o(P,m\jeR-4:H
%JF=%Dj\[TZ,t5qrYDhZK%)(-`?7,C*]<KAdBH89%W;\H80_Vb7T\8[\eiqHI.I.L1r3UKO:OSg,:IqSRJTnM>[LDVm^Vc+o\L`:N
%UV[[_NaH=gG8TEZ6+)e:JlF;*/OWrk5O%lD8/h$AjZnZWp5*Yo_2,hHII?,6W@[C>^$EJ2'F7]s<UAUds"q><8';+nk>K=dPecS.
%ZiBndej#d!pXWVG:$kn//:r*i9^12:mH/,JQ/5l<[oL,LkP8DR2X;9-`qb><Du3EFVrb3E"sk+k10.'tZ8aLB!@nTo>=VC6:irCY
%+Ps8%TfMIF<[ro`EZ4m#5Wq<2lef-Zrn;E5KA8-2e1-i,S;e0K2`bRuP;:JA1M^mKh2]BBAQM.^aB/G8?LE`]$SoEI>s5P=qqLN\
%CqLuhA+"OFf9a8"i;-Aa7jq<I=Cb^Eg,Tg=f$D8`>B;crqWX>V@Ja3:RF/SLr<V\:=7ehQZcgie1B\*4+Q&IPUW"JkP4^'[ODpK5
%&QB.h&bL@<TDdCMltV,Fm2SY&88OT5pim)56?El@8PR8%0l>:L1ZFop[qto"R.n_^6YtS.\'Wn&hQ?p7G-r_Z!c.fqBP7qC#Ml/H
%]IkW,$NWGN:5E#p!&V$S1sTNcB=`N=\cp9/I1,&m>IPZ(RS=.`4C#!l\mi)19T,/tmm0^SV:\D:gk$[WUVt(#.U+uT*[:sDejX#J
%,YoJ)ah.fCm,NQp;R[iGpKc4pj_bE(U\>6Jj0XAOH6N#jM@U_B3V-okIK#-#q-DV6cPagnQ+Uk7o5'nAh\1FKXJ>.:_H;\l4f[a"
%5@dcDnr_jZn=k>9ZA25j)hF%TRj3+%$jn%Lh<8RkZ`Y*:kEsl(BHGcRpCYhSf"gDM/TtgoZ_o]J-qj84aF^a-M3I21(QR\(XcJJn
%,+$JJ01?!sLN(?2iQ.a?9f^hYFlGf]\#?urZjc[`J8FC4)@N0)<mG9TlUT^f(Y],pJY,+EaQVM'e$.c^0eq84.bFq;Au2<^RL:gi
%\%llPi/3AmK_&(Pi-idVa&WI!Oljp?:$jKLg3*0;OlYB1V9$2.c'$$F`KG!iZg!rc<ZqRbhf3UD9ftQkm6>D[4EAsLE,Upm=C2hl
%AMI3YZPS\gfPRP4F]ODM"`5M^+c*,NeBtP"*Nd`s>qt+QRkduXbo6777?L"4nNf37b_LKbkU@e/=*-+SKg1([21HELLc`AS(]4f?
%&UHYGcU[1/),O)'fnCsnCGI4YL"ou-Et-FD*0$!UJp:@E[WM<iOjkbtA?#Dr.ZFOWWnV0kBM@#dJ,_(u8'T)8Djed1)bK\]TJWU5
%Ha]]af*GZQ!-DWf:D&(g,u`WT#EQ/>4^/U:a$Q>sccYrk->_fb+#UY<b;?uL(Q\E1.Hk1JloEo?AY5NuQ*fk73S/Lt-i'aW7lHu!
%R(cf%m^e!V3^I!(SU90_h%hiOQqCP\A/(A:Ad(DT%M[QqH'qoPFHC1l*'7htV9\!YeW$Bdc\qrR3&lfN.J2Bjkpn"U]3*L2^K'qO
%G0X.n9tNOlcrWWuN,r'l]m1GfFr:;RB^:sn&k;ZTZIkKG$)8H_M^;TGZ+qN3\Mp)`Oaf"@SO'f072fdnSOON1eL!#3&4/p0r,h-g
%I-T_=fZfUS9$8g[87Q#Ll"=3PQ]ohqm\sQ_lfYI#q)A(SCBcliT1*G3ETlg8fL+=tLJY#Jm[5:KU(prKMKo1I8o#H0>Lt"b6L@Fg
%r5o=[kJ@9B[7!*I7Qn^.32u[VUAL#JcQF-AT<QK-X]m2U2*4DXlp\1pl2!*>U1<97=#>k<8]M/JVct8T#HZkq#oAmZNR+/HF[OZ6
%<n(YjO,>EA,U;.535dJugo%4$-:dO#9I!$0>2mP"4/G%`J9Dc*`%b"G(0N"7B7;`/O#-FUL`uJLgS49KR8*>oHe4268.j6s8Wj4A
%Z5cW#0dOif?!I32*7s-&R#W7`';.!VqSP&-<C<%T:tq!l`apA*7hm]%&P\I8NBh!7%UqjKG2eXjn+21q"%7mVWXgUN'4$mYJ#AaP
%,jl]4fp3?9ZTbL_"r%s'B<KD848$!u6i`>c'MAJTH$Q0FKWZ%?.RBBZY:[#,E[gbW:4\r^D9L8=4Gr\`mLL!'nS;O<Qbne\>DZuc
%>MZKZg+;hT4<nKC#^N7h2!$cVHahJi8f_.JN>X;Xe@5oYD(V4NXF)ATONbdU9H)9,[Q!A5+TZaY[W+P8+ei%;3o'.j@L1,0lu_kZ
%M.1<NZ&kn+<80q=m-&4RTgH*FEgM$aaJC,/CG[]dDBKLO/^]t?)bHo/AG$SNN$I+)PZ]iN;Fe>q+Sdj?;BpMB*iIIg:"#[f*HFE!
%f5UjPH&cACO^aY*ST\IZ%dUbbcHqQ6a*I#_b8oik<`0,_^R=GD<UoSe%qa]=MeBVFRPGn$L_N0$B;:REB2)buXF@m+mlP;oJeh'*
%Vim2nYoDq%VDQ`45<g)irP_gYLt3R!83UU"@bbVJM\)OGC+Jc"4i!M45DuVK;FpYk).OII7O0>$B@Rm?J<6H"oJ!=laF*[#]/GGM
%c$\M7@BH,J0/XG`P6Dnf9W;-Pp(8R]7P*,"c_ch7=OoNm]r2*G/p]N>FPA_Y`%]fr`iC*`Di-E##[5XmY+rPlBnPX'7V?Jj\do%t
%Q:Qln.ae39RdPC#ioAW2nU"K1bH,[/Q7co(DBY0Ge87TF2sEE3Wea,!Zc1plpfOHIZM=*o/9L*\0<$diW#p4N7(Yt`Gkho@XkAik
%d.n:p#C(u[I@rb2?C[tEDIFZU"A)b4-I%HW-*;kjDm=P!%:203EUt-Qknen+@#)JBEU0L5.+F$gkl)!]>>Y.&Gi@sW/?1SIC!<i"
%CTAIO@01S\M`LLKYWkh-LTc5J1J1?nApQ^_%d21jop1pjJ>auDI<rEJm38adN)M=&eNbN1n+bRW/?$::iZLd?7!5Y\<)9mAeE"nO
%>OICtACftu(9)(>0k<)DZ_Qe^)l>(@,O_6b7u5<JA?:WN1m.I`YLErf=PhZmg3$#a*fkPlJ'N'-5R/\ZO+!GcbBhn!aDUdlKp5JN
%-g)Q"*DKW-*BOJ*cn<Hngl=JFCsIl-k9>69Q!:qW<qVjt\b"M6#os+Jl<OfORYgEp*3"/PZY:KPp=-Ou*[^bm<IFSY>DFXt*He,h
%!biDlbUlh^4G@c<Yf44XFST<HPim?*$%^k,<\[m>aNO'M6RV9_'^D\YRK>*490YERPD7DrH8B_e5laR1_oc"'lL"5.@qH%[KLoM[
%iX<7go[>,;S^@l,I)9,if.@5E<nK_]+sICA,^P?7DH(e.5+/<r)A))s<)]?i4H.h.TRQ[K$%mWZ):rDf*.?!'&Nms9"4FD_TOk;+
%dh/Q![ZkKu'RJL3FAtp''g!rL%[h94Od9saeAt]U<_no?Yq7,6Fi@@+P^@_;@5:CQb`g@%24\+(TggVJb99bpL.(40.p`B^]HBgn
%qm%3U;[giN7dBkIQ+6[Cf]I>90Tq;hNFens]/6_.S_*nP(;&"60[E/,Y68bU8Zg&o2BuP$N4B,Hd&]0O_T4b:%ntqhJW;j;DkSDV
%deO-4QMsa2"1qRNbmTP%P3`3n,PPB,/e?l*,+8D'=ndOpQd!7MKA(rD^q78b,u7q>,";//Ve;!:"IF$)B;A13P_#/@=Iq298Mr9"
%XQl-V)g*O6[e.jT0)_CPU0kr/[B'iJbcbR+hdIKhIq<^"%7oDI0^/,c#R4;oG+IE$'1rlkB^CaK4-ldgKC\-mdl>e=d%_Ho%%sI9
%!tBu:^r"d+KjTU/XFonkjJtMYbOtnp=jK$AT`>^-2]tCs?@isR#A=-k@enpmY*U7&T1]Es!,,*/IkBkR&2K@Ke.E"[TYMuZE,iS/
%#(Os]rWDe:I@clePQQp;Sg-(pYgsC!ehbK'_dt&u,tg&BcAIIME2!WLh*H!?FuZP3.jQ[`Th*n892\tR&X58sUIUbsE=BL:6r>W[
%H.FIeN*G$fGNaI2k>RG_BO$Rd^5cNQEaQAHBS&4,X/sZA.cBpeD&lk;8m-l1Tpr7p0cCd!PbL[MNOG+CQX+0U'iQ<%X,7G@/$kj`
%ibZJ@Od2S/MF=k:[So704dCbj[VKnG[EXLO?t'R&18J"WnoU;4oCR6+QZKmke/Q7pOLs"%;>_2>ZEQ7oS(W=@RHhg-nNBP6:R;ik
%^$'8<\r9Hje.rhM-B#UA\hndL?)D38Mn48A5=!KF#]P2iZ'K*m&IqE@5>.C&XKjOLnfTB[0?LVk_7ZlHP%er&Z\C;iSXbEO6-:OM
%!#K([Jla:SaEi!Liu'd^b(R6SRupSq-&6mdL[Oj4i+jJ;P,(NYIn)%q_QjV3ilahs=BOi"9;kXE,g<ft-f?P>U`,#S"`2*$V0CO%
%2)EmK*i;/%ofH3^g>hsXq.oWI2.pnK<3a#KT$'G!MAW]bj`:3GM)BWbJmnAST0t35h'[A>BhYr6HW"9br2o[KO?!)EYE%I3O?u3B
%5m2qg9@,6R[pY`<>l'26Z9@,:q$<DmkK,4k'qo;_!@44oW2MdJS9b3m;8G_)<Jq#4QkkGbU8`9I?s?W-oZ9kWbMQZ+p#mV\6rK`X
%Ri]1;'_%1T(:N#_M\/_k4F*Sa/%*T'huPI+b?>3_/.I"Q!m^@YrU1?9`jbKQr/dKO\D;3CMR6b:NcLfgr/JOa_M3dF\-+qn]LN-5
%3_mR_0u;"/CM-M#?M[5-j8QXsG(/=GG5*#pLj]YhAZL^<0:q-[&m\d-PF7-prQO%;1d*VfbFsQAdFDVSpci7PYN,F^?hn;/V9e0C
%'#^uP@?B)=$"tMW!&!^Z6#B-M2kn1;?tF>"?U+M!BE$5$m*/RSnLdM)m#q*TT9h%KYQ(k6.:KnEa,&T>1ZR0-U!j>OU2NRNUd10-
%T[?#YhA:>N3QLE[1WSH0CHLG.(f6gdW;F&g\2Y-p1dr&cZa-I:hG]?+Hf)p*7SU]-;a@[I:A"J01VY6n1VE"@iV#%G3G'+K8kh)5
%:7gP7EXY`"8%bbqg-V6Ag1kl,0/rXi.g,M^R;9r\kg<q5X,56>(h!5+9&)[\J..q7I**#p!I6_(Ja/.[>%*QS`Gh]\en)dW$*Q!&
%$Ul%#k0"pAIIEht:$3t*,^%uF5kA/ILteEfQ*c\ZjNQn?]OL(?OfDbgr#:^!6u9m%8U1-+hkJ3iZP8&=YdG(C@4sQUI.nC1ZV\p.
%eOgLT[`f5eA+h;FLL6k$;t4G+)Y<4nnF?P.ANP/HUBoZg&qjZdDupMR,G&+K^=4?R#+ODc>CW])i4(>hIj8LT+/>KU2[%GBc=WJZ
%T?57_[AWHF`/Z]dbCUN.^mD\lm1J=uYiUu.lbuer2F?j[kL1N@SH#C1plR-1LKGc^?(aP&mAAtr,&P45<qA*]6!Af.d'ih_-R_s&
%R/b],9N5^[;+P>B>%&%?<(7&FoJ@";&Se"7O+&GqXY%okf`K/O6?=Be"]JaD!!(<5g*kG&.!-Yij!HjtEbg.;HP]g3m,1I<9$E@:
%fUn9f+pFe]IYbus^!O^<BM/F0)L1_S\niX+B&)/c-)SDe6=p<4-IDdA(r+Tbn6`kPIY=3TYk5KLHkF__@M]X;gd39&.8*3Hi6-r]
%6BW>\dAPCui@;*4e]J7k#BGTD=(S.3P/>64N@Xq/k\Eu]6V52e]0UulO_KoO\'#RB+\cAp[0i@jO46f26)u??99;Ek/"HF>g6JPe
%8kO_;ESpG1,:G4>P\Q;1T^Eq(U\`tTeY0\2_^RlsQrlbD21gYLMjIq'l>q8@FRCIc`Mn7*lS3jUMN:LKOZjJT'piu3GF#dle+a]I
%n9A0CJ/4::(*lGbl3[mM*\:E^ZY9MZWXQ,NG[)JPTXSmVb;:YBC?N;F+AHNQ71fee]pL6]O#DNOLe<rJVm\]>$NbMX.?QU*GVtp9
%RBCjlG!g,O$)\nC*"!"/>7*+Y)2^iqm#1:Ia`Be$VP_PZb5:ki]Gna!T-]af``cM-lWN6t7K4Q"!<V#?A.Y".BspnjT[o[06.h2o
%X[NBVbb88rFIA4:h2NZuT7P![qeM>oPNM]mi?#U6fYCl#>4!IX!-n>)b+HkOjk"N9*et>GH4/YqJq`T:rC53<-_WPb6A]"%Z,fNt
%qI=XaZ62h`S\`BZigTc;R(XT\^L/u`*%bdCakO!g>4Br^0.'4n%UMFIL1@$s39eN4EOiO\Aq2hp#SXiX#$b/0FL_m]BU%3sO@`4>
%(\n--Bdk=/":-nSUI=a92X@0rJ!I=pYQX6s7Y<UtLBR-D*spdChhpV[eB,:I!S>IDl39LY!7eB5?bD1]St";W8$=D.X4B)2dR(^5
%ZL=mIJ\Toa_'ps<J=JIj+;L0oAb1"Z$FapgNP.SK.mE8sO[A>c_dg?,:8@@\QS"9=b92@s;0O.7QBbd)"L7LcCfJn(#"hsU=hRIa
%>J?`lDjUS$HMq,6U_V<"ZbeA$Q1D2Bi!2(RoX59[KHPlIa'lk4.XL-C7^5@$btkpU$?jC-9aK'0>M)i4@4O_>FoeTW$D*Pgme@,\
%b;XL;j'N'@LJV8gR5#^2a^(r7*^^i08jA`XENbb)4Io[[m9Y4:X-TuIL!rL[P4"ZiJs,`aN_CR3XWHH/#*>)?ApiGEj$tU0eukCb
%ohA<B!57b:o9GE./%h9SlO;Gb/W[,"`q%fh:Lc`ac.Vf;A;"&5@KmM)g-$br"08MP?Vt_eKNPtPf;A6.8\=K#2TCr,]IH=<</I9f
%4Rh$Q14=$)U#rpj6m-8R_CZ=#n>l4"CG../Y$]N<Z\,TK,k`9L=FHTn^g<)I_]XF#1]_"tb+GcQlu']n>Z3;ZK]IA#LU@8dm#$*4
%99M0-YV's>iRqUO_1W]K*I?D=4t6bM,>#igTn9>d1fi^be^>MfVK$SpF>h(enVUka_dOI<2ISo08jK>\:$AO#&1qe\D:F(tmb=>T
%lGhc3Oi1S&X6oP.)sKn"2L/LWD@HBJ<TEPb:Ti0?=]qH^!ko.WVm8D:N1ss#Do_W].R&5U6?Bj#K5u/\;bj[#+PRJha:Ot3QN2:I
%bC?E%Tt)Y&R5"n3,p+GR"EkDWb*^MB^cKs'bV%X3!<R^_]i'od^=hU_:/`GEX.2]6LJH..WaJ&hHnZnX<:@EKp+\.20[Hn8burT#
%,:SD7,,&%Rc\n[3QEsoQ#]EY<REhHVZVoEB4[Da1KtnE0)ARQK`hmW(L-Z,ZWMF^o9+994g<FnN%bZ,)AZ&ik&%e';Saft&gnmS^
%l&"H#%<W]=92P.G*lljtX6G#!otMZJ]$rE5+aFr9GHf_0fO-)=:1Z.:Bc#.KO`:Sh-!27P*f5<<qEs.8;rVRq5:PVLj0D'o5_/^r
%^Iap=eI@Gtf2Ma)E"J3TMSM&A3bBAI?lq@5'28F97O'@88r+,3()*m7$u*l*-p:(47$R.Io\mg\91W"C(L*\8TC/^\dcWGqbA5lm
%"b:cg`8\L5C\Ch>pjQ3BSuE]@8'XkYYt_C$dKU#_Q%9k#pe_Y5XOp7nNA)c9aVCkKjP,J]ZFW(bL397H)%CRa,FOnqK/QK)/='hX
%4Wrldd6i'0dUf<MkP%mbo("ie'6cO>kII[=2k``YEkV;PN&0f_/$\^5mmlDV5q%8Df8Ah8:=k[L93"UY8@'`uRRINU'@E=2K)9Ku
%l]X-rF")\C(m50TB1n#;rRLW^7o^AF@\nQh.MD+lmAN4L7aP]9djUrb-I6rf<S*FD'^@6_S\;X1OEa*[4VH>Qa]!klj3"4>PHbC.
%]_SLAM@+On()QD9:POg8qmVL?AG^3tm:EQpC%/G5O_W4o_t@nPs5)ECoQ0)?2BB[s;U)'L[AmgG0q7"p*nXVsXje`ggtGeelUm4B
%o+L*P*S=33l8h^Af\P"J+@Qo5RGk;S6ro-ta?j[D82Mp2Gsq'&Ubn:7SX#nm8qSUm4FQNFIY=qj^9t!hLg&PW2mLq5MYgaJJC9Bf
%?r^.##J"J&[l6\IDG5P(-EmHk:]Kb\I[H/V$Wf`P)BB*T*WP=\&2t9lN_7B)ABZB/$JIuB80B4&@4/dm(+)Z:?kk(!TMlKAV;"I>
%Q"_]F3h0/I%tT?8.\Q^;5\^lj<rWde=ki4P[>!-@B>Tk]$!9*MdNq&9s)<D%qlfnf%13:XE<#at^rO^GqsSu7(aM2!c1"t./L_<!
%Jh$TGkS%q3=])C^Zh1S6@&b%kXX&LG$\tj3(cej'IfA'-J!\O?K1>>&l4+WgV:d[gqGP6u=,J=/]R,Ya<<fHl0/+tY^7$kNrRa*.
%?.[1^N])guC+V2Y"d3L`R,p_*=1!FRIbTZ&AJL^^><PKnJm?h&)02+Pf6,)s('VJ_m5`!+7npq6&,aTelm:E$Z$>.8s&;l;Zm@gp
%iH.j-`Ea[6\a:6?PF,RO4deo\,28QT4*[^r_0-=q(%+(6O5mk%S,N:1^Sb_^+*'!W#q:F?JaL>qC"fph$DDe7`[V(:@S<m-E:>,%
%Yd19($l\CD6Wp=ob_SVaZn%U"+N_X30(lF"96BHmoXs\F1LrCJEJ/>=Z5e&F2hX1\W8^'b1'ii!h)7.e$RIn;"iOfW40qT,!#h`o
%[-i%g*m&:#!QrAh=;Z8k18;TCGoZ?5$#^1Nged<tCu:&7eMS=?gr_`h5XG$['k,Ei6i;B[^;Hmpq@T$^I4Atsr%6N^6i+%uOHAHn
%>_VeW-7FJGf)jog&$P;Id:n+S!I3ZEkbn,KVkW>XZoD<D]uL.7;T&#3E1!D'KeDp8JuisK8;`->"ooW^Ig\dh?)oN'pu(Tic1iGi
%Hoi`=>/%UFOhP9*YH1%&3-nDQK!8M>`=/i@g>fmHHj1&:c@'4`X6Q[K)jKRoVjIm]/K9AR%]6OMf+b=hU8498D^t/4;"nBGm5MTi
%B"3<"oOR)k0AL?-P^rL%q_57p(aEh--k6TAGPGt/8DEZ$g4!ROjRa@%8-nkK&gWSF7[-0/cKJ8q;A$hh6.++tqn=QcD`P*gINiR=
%k_rPC0j6[:P7k6D=.0AkWh3TpZiqkC63S@]p'RXr2_=,JW(1'\Wa64];j?#o9"VHrDh<Ob(<GU8GDk]I\qC$E2A"!*.M@CjW2:#o
%C>h:Fp"EVm$8@d2D&CDF,7:L0<#A6%O_((^%.G\prPli%N(2&fPrhT]Ct*d[_@M>B3A&hq[2Bfp-iGOWX;K=&'bk?b7K(m#_d9C6
%O(eqX@KuYHn.cX*+jG&m!QK)FV6>:<2iP@84CS4\j6d#K*bg$I2`^WrWaqO!-e8eMIqV-%Yq>$s(clU<NljY)\V!7S$$mJ/&6b+U
%ZC/m,Dn]&ej+lhqc%^dicF!Kd\Mc6=]q,b@+OG@GmfBMf]0c><bC>.^0[UBl:C[9;PlC4/&3P`TKWp%El:Ru#&C%"KT)Ql)8O:uQ
%Je%kleN\/E'kl7i`6G>0Y]uP1:Od2@rhJW9a1'IJ<?Dp"g\s.''5&1f#igGo;K"Mmj/N@8=j=l?Ns:2j^1>\WWf+B]#G\--L9*D3
%Jp@[PeGE_JZS+qYo#nsb@X]*;IDjoJm6=FC3gpd<L;o6Qq.dL&(0r;I\csIl>D\]fj6_B,M:Q''79$.\WiF[*;g[$VQ='guRcH:/
%I1_dEs"K%Z&JLpsI.Z7)IY7Rg?bWCdL_GOZ81D>`MM]Bi)+h"Vm:q\D,/f\'#[<t+]3W3C6C:/YL6$_m9r8B$OYR#/[*5l,*&aVe
%8q17^*-k!p;QY_nPG@>XMV_n+dlH[9QcHQ+1Ap(3-LPULgYiDK/foT>]d!#U")L8B-E5[3@59BR2@!TG]%@6qDPVUMpo&MDMKh=0
%'?t]rOYTd/AM"(kY1-<EaljcXKICH^,_0UugT,=DR%TL8c/L%7G+Q:R0rh82/@E-R,"h)bS/::fWr#I?5'DrI:P%_'k8-4&,cV_f
%#@(@2>`0##Q?Ya]d8s`)8_assc$P)WU/ti]?qB7`_:r`1#d\AFWM=XlRh,H/l9\?V32&jL&h1.Ti,R--=1>=ILp;XYs2fmIHjK7f
%j`$fpW/B+b:nMJ$O-C_UlX<m[I-*iFDN&$K.D:`\]\`u@C%W7<&;cSVd0rj7FJCQFC5K04Nq]X/AkAIcde2nIY#uNQ5n4=Fc?D2I
%dh`<MA3ud/YtLZ6cp^biW+S@%[GP"E8Xdm`$>paq1&nY&5\-Jk4cb*rVB)D>El=[$QT`ncCF`k:-4JEr;TIg"]cGQ4T/OcS,(C-6
%]NM1$Qt7RXTd0Y%(i$s>TE]qI"Ht_X9;4nB0[&S^@%@@hZtD+_?s`_D3%E*9q;)r"_,FgDM#qDrY%=)'SZM>^1C1S=`NliP]-*3q
%(Y;f^NE)LJ&LI=u!U3/'L.qJqIFN]s]DW(%[3@1PBde=AXHR#2Q0W>mlHOR&r/=p:>2Z0e/)CeDWn$d),-&91(\SEbHs_#"Ee)E+
%n[V76@u>,Yi<0uZU,q>t'RK]<HUG+nascN#+e<crMb=)h]Gt)g97$gkBf]pq\dem0H%et,V4+EWN!!u:o8%.B-gZ"W&Xm8!F3Le4
%hSpO,>&c,!Vl:o:YD;FP>X/40,I6;FabF"'Sb;(oY#eN+,U@jEDoEYo#FBXBL9?I&7;cF5E5$V^dg.dV2PEZG(7e#@Eme9V#M4$j
%\1318+7XF>Kb(NnOuUqN+RZr"W&P!rFreCq/F"'soKu-EX8iK&L_6aok2Dbm<(i,^l;lr^<&"5A?0lep/P0Yq#Zo<U,j="peZb[H
%pa'sBq.\nZd(um&!N%"UrIkMQpNRPJL["X0c$Pi&oE?\n/L5J@]a.%j[ms-E*mo?e#OHf^EO4''p4:#?kVWprK+=O=@7Tc/"41GG
%annom>mk,\,hs*M_W2=[''MVt+C-f?>h/#^&Rm&<FOKngQD[G1lHEGY5R-j?;9HMrX_F;lBcpX(RqsVqbI%PjE]mb_V`_?9TL5a2
%(CQA/(i>>?9"LM?R57kG<H#ahSmjEk[hW:q;LLF`mq1]dM=^aFHL\b"1VH5)0+,t[\geUu"Bdu%h%bMIn<^+$:[9WJGD"%ZYXY%/
%o$EEg]A3rjKXVQce!]2`5Htc:cduB/VfLU;g"mGSoe!J8*VVG??@fYA&==<"n9_dbmCT!Pr(1d*7Bc/dg^$;Eq_jK7`IWW2DioBH
%"hfQj]Fr.J+;j97K.fQnAPW"OL]D+H1j.+$,H*8"GE/>tP7guq"8DWFFkS?\bb!\9W7.aGotUO"C]*'SG^<3aE,;`ZD-hn0H92nn
%V7ukr-(iY1?fnYH\Wgs>*W*GaJ):<dlmOXU>eaHFY&<%qKBh_VI(T6l"@PiORUI>,_@eGY_\WDA_$aKHq7"8Z@:Kk=`\L="dF[X"
%9OV0M/>Q_u"[i?KX$p.iLH,;@TOr/q^H,;)9Ua8&*)@`O=PFk&E?84&5Jf_MeC3i`Y70kYJh.uV_u?h]4\1+Dm&4sR/0"_";^EE_
%(kh3(O=MguK_<G&ofJ"4qr+JFT[9*emXR//%&-*Ue5"!7\5*cYKJN[Cd<1"ja'CkU2HiKQEouZX^pr"0%ZogRrK(Hd8?Te7$MGjo
%3(,7?0r/BKO39@PZj*#'*ClZ(i`sY'(3ODGGlgIq(rDfKl22S&%;Z*RR'@$"e7gO(LBYYc:pOGE`LY@Hiae1f2V*^7VQds3K^@.6
%=(^*Qa]rY&on[J?ZhSFLI6?`od]P)NJ0'.3=:G0-@2]@dc[:`1F?=l^,=nh6UH8tm4sZgNTN)%rR<86=+dRAPLjH"Cqm=aQ/g^79
%4)i4=St<SQX!bhrOU=Y'E;AC@a62@1Y]$r6O(IWVi)3g)QH'E19&ru%:aJlkr*H@nHF0tmAB<[e5C!&tFRUf,j=$q8#r\b+1/$e#
%3O!u+0f2=mNYYUQHpiZe((hEPNcTH94M:RKTs9&/T2.,V)3dK?kS;9XmPI39#)j&#*85MHfmM62m@;\I_RaI9D8"E'9=fH'+\4O8
%P"Cu?FKLc)c6<l`)/FdTTO^1Zm!i+hNcZr(Jb^i\_?2\m1W#iAhZ4A"2o:[4H2nR,>&1l"M>A@ea!WO!h9T31(7rdU;VI't83_Bb
%4$sSrJW@:\4l>m.OE%Y*a3"/s&Ac"Y`-Fe%R_q?:>s7d0.AAOhA?b5t[Ki^Oa&TeVfcJPR*C!Y<o<$IA-DEJR*P9c@)!nDj\oTk.
%#da+jjt1aQ6r@:cboH;S0Ab6NVr/YPKAH[pe4;m)XKOWPJ%6'Lk*F0^XfV%.)>g9>e#(@!7h/nb>T/3P/Qnqj5UbHG4*[Qr7U(,.
%!(aQN>e.p4L&<R.[<$*m7%JQ9G`P%/Gg(#_\<TVBL^Gn[;#+Stl;VU1f6O?.Hit`LfM&f'@Xc47]GTTijuqPB;^"fseQfjr'S"/$
%'_H95Qr0Ce+q`5FgomL\XW&rDQj,>nD-Tlqp-),hRInVKKdq\q'jW[2do"i\V:t#DWN/YHgZs\-A;Z\\(gk-3U7g9qI+@NH5.+M:
%A2+4?Z:%7<E0aE3CL1cVd3:+SU(Vj\3AuVfYgsG!aY(@5+kQmR1?6En$4qD&^HrVY#dR(0"QX)hlBu\9-&TA\WEO^Q>$%do;.`^*
%Wh'[$`B;&+\I=18YJl=_V$LLk*7u^7M2CF+U:EpMMfX`2(=IBcP@dm%/(ublRI,c@n[C&=FdLl)cX*>?%7R+qZr^-C.;FJZHXb(D
%V'hfYFgO5fm,h263:>$&S4Y'B/1@8^l;REYnW[^okSg;g<j*5Fpu*_;#D#rUE^c9Z7e$TkX`5GA%Q,KEXLt]Ii#H;?c"F!kf`D6=
%g$1Wm]$sR7>ql7e&6@p!Oil@Rb.>JmO[qHW[pksf7j:6IK@a8Jk\(_/Sp_3)Y2XTK.2W]!#hM%p\??/:@>=cIFb(LuDbWtB5?hk)
%r0@[GYoS[tgQ#0=q(R5L:+l2LPe&DKSi'&FM0pLe&2/%ZAfJ/k.0:@\0%FSWm6+@Q;lqr3>.aB7,7<(\WI&-(BEY!9N-%_/NUSk@
%$lI7`2G^fhDJAjYk*eb6b1ZoB;o15#l#eZDF%t/!R45X-YV718FHGRBSOndrBISNB]r/JXCed0l8`13?U.%rEq-i&#-KnZ2`?0m>
%W1CC?d]hD;#F4Q*QaL_#!pJ`;m90'),J*A0!!4tA`&HGq4`>Jr:u@co"hgP6F9GkcW"QSB/NBfrFN*a%;CP@d?8qGE/DaaKp27VS
%\Gt2I.730'mmeo@W8ofa@VhYV?X4)o:Z?KJ`Xl,Cg5E^b<=0pEJ?Q$mR)[,3Vno0kX9bq.J-K5(FW8E'GSpkrT*#UqOdgrNMELK.
%?8NNP8J893H8*f6E"cY*L0"MIB>Ka\aX2.]*8`TGjOZ)nhLFXrJ3he\q!l.m#8Xp9m"N>U+-#ljY>b2t$@K2S_Z"o<_:KXARoMan
%$1=\PU2/:MeeB:]$lAkb;7Sam_Rb$k9W=q24TG!IQ[66QQ_l8Qp<?$cl:X.aCBUdU;kn[uOU"Y*nioO^#VI\8?[Zdp"IeOsH;hgP
%5`,1H>ZS#^9:okme7?hJ>?4io1Dk3/#"epLU$2igCKpOh2?8t(?H6g;LYe@U.U%ZUa-Dj15A5c7>"h@TY5Va\dJ8-Z^PA&Ag;EA(
%dM2tIX$[F(=-LQq"Okp8D'\I^P3Ri\X9jFu6GFtLc]IYK=sG?oqW%F+g&jUD7R!F<*F:FQ$eKaP*[*]gRZ+.g9C0,&n[Dnh++TTO
%IDR2l-MfL\L*T^J0k!V_@m>`Fi(;!Fff1/1$G:qP+f$]`R":_2V.$ISqOe,pJ3sOrne^V/rA_[2EF"C!(;*%+pOTS)Bt$o)4sOBk
%kl6IbWM*S3?foV2HjfB=QY<%QK#%BL@IlI$cbDJ_25o;rC5#%(e&_mOT-OEJbW4r(@.QR"/]<"XW0bN!MBjYfp@R^=Sna]6]nO%$
%!>V8bnFLQL[JrHbg7R#Z'1.F)4/Kc-,]`uUD7i"hfIU\[8B`as-IKt"O1hbcd#:9nE5=(9qV;*=c1'4kYQ9Yh2e"k<Iu-0[7$2p2
%L&<R.'ph_p76@V]6A`m:F9bkZb7ZdIb%4Ltci&"UVLcScPh+6V+;o97q0F!(&]2#S[<X30HOpEk/Z=tn,:EZAS,2E=9b>QLK+&<G
%7UtcabQlM)OUlsUS`B\I0RepF%8MNGn$fNM8.!K_2H?O75-+l0jN+NXOslSA8Qq;(<p;")D0FqHA5+Z,&<a$"+TjW8MDhk7;FS/#
%FD8][#][/UWmpdj#EFNt)l67eIEM\DQi[MAW.m.sli417[H22Bk="1@nrC4s4DTaNbVi98NYWgTGbmt#WVO0Fhc&()!!<"B7C3TN
%*^<CbY>>e*['<g_%N,FM@10fXp3+0PL]S?^=4_4#NG"6c*o=B4n082:O%d=B'9S6DC:`O`*R&L(8U5up$L,JX$)&V9PTCLIcEu:0
%+"YDigk9Gh88Wu)7M.n<M"RCYf&;N$&Ct]5W&_<(K3s"1YK\[i_Eh5gRCF^Y?BJMCPSa)1s7OJe^F>9&`@`NUfEN`<6Zi\C&NrdQ
%0C*cV)n4Nh9f7&5eopi*H,k^;W[V8/f44Dq#lh'<_jaR2'jh<^pGo*YNU\4BG`-]e7T`9G.TKa;B68kic.L@MA^=<>EE-2oL=)6A
%nlXXnH+6d0HC\gNCjQ30YeX:<`*brMp/&O>5SRXM8Q<,MT];'M,r,%s1YD(c9]S\A7+%]mE7@7\d_53Vli^e]Qn8`.:s9i9i\)B*
%k4g!g[tFH#ZhK)s#kV+18-FEfL&hLL(oM>oXqM?2QQ8iomZL7@f;m9>+_^4SA].0"B6bol:bj,oBCM$S$BS`!q7/gTWLL"K6E!7\
%ps$^BGH/@h<IO>8\?Y"<C0dt$b=3PXdW.It&UG]Yk)(s'lh(;:f_F#8/8cU30'(B"^_##u7KKMf&nSE*2u5^ZL3O(L<8c-OmoM(P
%o`2-mkZL1?3F031B8?7\4g*V]a4PC"L]1_2?GREpmn'lfeMOm`mP&:N%4qVFMd5/9="..%$X<a3HG9"adrRoe-JZe7\u]geg0r8_
%^Dtl:,c0jK.#F-#@8!'^&QRM9-1(!INH,UV9)<r3b1lq[AE!:TerSe,n>EtuLIh$Lp(:mSIj%5.<Gm`u7?"$:oK-XT1Vt%\8=0_C
%oegkl(2(Y.%\2aOC;I;Bed7*[I/$WA*Ve'7D2Km)AF;].?0MJ!lr2eSm4Tlm,j`WjCD%!tA_qr/\Rs1U)s8dHNRof-HAr'"\2K?!
%dRJES2SB2dj-9=7@o0S$eK8u`_,b*9>Ib3+(H0jNo!a5Sd2_<W;^;7VBVk).?/j.Z4iVE<ipSqDk[4ZAQ;>$GN'!]:q=cJ*jgAXb
%K@&8Zl]uQ4&A[Zh7)QC:Ss/+PS)Tg+3(pM#0J:#%!_E9'O<eX$oE^[0ac<3]qbNc!GI(kIPCfU115X*Uae^[G_4\sa`2W$r`9_F`
%U/S(b>8B'51QY>-O?3_$QCXPN=GRp]0-m<aKijn*<Le#=O%lI9&<]\/H.c3QDI.'Z)6Y;tH9Z=/e=0hGaB;.X[$:su2$0pYG3\#*
%Y!Smf]8AjT6E!MXQFfY&m:q((C^6.)gZ@3mf8`qgaYn#K]Ah#P50j2c[d`cAC3UP)`PDq=,PdZN</aU=DrR#+6e(m*H(AH+F.DX#
%R0)el31kjj3<:*`a4]$9&@T*%)rR.4d2due/1AUZ>u8MdT"Zc6kJ3Z5ML8!aRSG$rWD*^S=gRa?Hk0%%S.B9ra;VEJPZ+<[)\>Xf
%DDs!*Bc9.L7eZ`2QH"1Z2q]$6[![P`Fu2IU?@bPj!X"jdd8V6N/a6o%W,9Ookk$4FkhA$Pn91Q*[M:"-J>*>RL%/uI]#iaE;CH>-
%fmras=V).[T<PP124,k/W62$&=^k.Z_O=Dto/Z-n.YbL-@/lCcHV))W<P!YhlsVmZ@#>413!!kK%-ObaW/<8?5n?PR*NAJRAK7a*
%:5<.4GL-C,s3>BM]>Y*3@bi(=%Y#%*P7/&KmH8`!jA-kmc<I0=mgpST9u>l\#JW[p0L)ENS)sf:#9IKf`]@q_CB+/PrJ*E0)h$j-
%OeuarPu^lrJb4of'MOB"7f`YX?i3pQR60VPWXnte3Q?CH'!`7]dOa<UFg\uJn`S?INZC,"'JIKmlT,NHPSb\L\bW_7o(,$UQ;a2V
%[lSlEB5=E;j.Uu4?s9,=[L`fP[[ZX%X.=rR=a/4EMn]p;*)r<\3cR0''n#E/etG<j/YY;s/R.nQZG;b()M*JDek"1LG<L72f\`?8
%q);"_53BnWIjdNNZAZ(k3U+H)--PU#70NPa.2-L#-YML-2+-8rMeJKO,aomFqR(MbZ7k+!+j2?KnoL7?P`Hp^gYF2@Xu<D4^GcKr
%gi17F&6F%Z:md/9pHd6_`o0b&kuM8[GAA7-,@GHlZW`5*56[d0Mt;Nt/cjZBOEk(5?Oj*9d.nu%;^/o84>EEo]MP"t!p(q':^bk.
%Y7=,Mh0lI'q5[lo>uZ;F`hVP`K^5T\lf\s_=(_E/bD;s`-gj^\i[nqRNbK1NjpGdBq+&41fW=1bS?K+H!\#4QoAp7C#%[4RGU!@H
%`aNjCJJO6u?[BG,VRL_.jZkY,gUI(Uh0E^Z\q;q8IGAN_In7(o_F^BF]6u;E7"s=j@%ek`Vf+)?[85gd%i2`i_f/:hh(@COej7kU
%kZH!2S]9r(.DNUseHdItHln.6Hf.kQIe"P8k4sdek)5!<0#Ei[b$!&5"G/H%=+#(/(KPOK_J-.fB$2\q\CUM(M]5`Vn27_GBPtT,
%#P%@Ur1kPC%u>8)F^uIin=7]I:jBOb'%B`ig!hB9[aX2\mt94>k\o9=?bR[*?qe*m097Q1*38-55X?u8f+A-5Z_1c?Q_:"FjGETJ
%3:XTG5i$Wl3O0dTB*!&4UVUD.Ft*i@L.7^UKhEdS4`2,iKo/rl!<8/IlF7#ZNYM=o$YJML],gFfY:Q^B@8$Oi93Fm7K*NueFnrp1
%q##'F%)0[%E];A-'VO@5.q6LLRbOV.bQ=>B$9m^@4U#U?LXknjCRidl]u[+U#NhH4&aQ7L1S0SaGZ[&"^G=<r1VjB$/#IC]67/#I
%o5Y047nPfan%R.mU>"u:Y*hJP^V+r8lQf$olr3B$1*RFQb\5\W\l+-u]Dr99`@H0)i(qD[,eQ1h3+V"n&8-B$;KWiB\_:eGs6+BD
%#6+,sVohj^f*A<df+)=dV]P8.%%g=Q.@mfci"d?7bJc0+k!nn6X/Z46J%@'OdJdR7H"%'b"Tq*84A5Hed=#-%BfEZG1s:?U#S%[H
%>k;KE*a\hM4_ZS$]T'\Skl-2miT"!&7gcJr-lI[K%7r!33\t)+dZCEqdnXoD(%+^N7A:_'TB&UalfQ&Uh[Q3&)"paTAD$pi"8kNe
%SF"-Op`>U#Oq1g*]5qO]0#F%IiW:"?f;`Vu%5h&.-)4&!$HjS?([p?#1*^81$&W9$])30CR"H5Z'oH>)V]msa_!t;bOA=%SaX!FX
%d5I.Q6tsZ75eBmGXIR\hKmBQRp=WX](?enqNDQeV:7QL(,Mg#23('*LO01XXR_o[5VF9O(b"`%sdc;=2V8b$JX*Qk+hs0M(="TFS
%7!4Q6]#9F,jk8''F=\S(e7(,^^MlhFgPY-;VgDZG2mO%=.G#7<5Q`q^"nE.hV</2A$$.N]5h+T8*]RfW@0X*N*2^no8hUXC3iUH,
%W=Bu_CX/u;20=H*mG]PZ#]4kP_#Pt'r0Mfbs4,L;(.g)[]_WQDJ=(N760'm<QKK@!j:'PULjk[lnV8HNhR9<ej+uQ$8<_.dO&T.\
%54b^HN7siAS_#oM).<&')UPmD?Yd3uTa'*YEH7nn-Z>&]VZc[_[ch?sHdEQY_RAPRXARs^P@EGA+"X<a_^PhW1odLq,%f_)abj^b
%lWkVT):?Ba)R`H@oO(VZdqbJ3lG]<TPXMlJ0)E<<A+XXm5CC0NoTXC=/SVj7+iom`HR2++.Z#\_SU$<uS4h@C;WfZT$F`?_>?.XM
%d;T9?4HLYJe#(6SC7f]JY>KYp>ucLi0;Y:5]c=RZCN7<r%\a;\6H!2B8J0@83EO_IZ,]/b;tNsa)=[_Zj;o+\k@RVrlV"U.K[4:f
%X'1Q@Tjm<W'og;5;kg1!:eVE/B$W=a?cracE^N'D2s##'+Sg=@kjN-H_\[h'Ms\_iNX]3)ODWfOA`;'?'-d*KeC`;G`#C-74$\BY
%K7mIRk_)$ck<`0-8Q8WQ3GQ^Nf\CXj;+m`e,?3rCnT/b"#LnQX`Do(d4H\bg@u:Ve3*hp"WP`hoaJHqX8Q(:g1ZR=59O5OEHG]B`
%(0,gp:s_8f+$CdiYEXAQq^d>_NSF-=njrq%KtB3AFl)@l(VFNWV==$.B7CcnLDfs`7F5BtXFb*ppe^Ue4&Uo53=Y*o;\@quNcGir
%R1-L*%UH#,N"QYHS9DeL4%n()LuqhBr?e1Rm`EK@"D9GG_::($&8C7<?&7k0;PJD<V3DV[]>Ss4YEcERf5c$T[hd!J/%oTg17RlI
%`.A4oX#@.K6FZO!o(Ir2e6Tb4:.*%`^@),b]")+8GK$_\BuLqP1d"OL'_Q(jhp0PTTa0kSd6^ak'RCm<Q[/iH9LV!J5q1$@.,P_p
%'M&Gr^')c4l7ie:^2sl7d(A:S(=\(@5KTXGF8D_FXrCsIUN1Og=>?!!,n:PEjLQMeEE(I0k^YZpm&K@VmpMo=B`2D>!R3V$EBB(=
%j*S`]0\/E@;sdg8Q'Tqk1@*;+N]Y^lS:8sfn$K/Tk?=buk6rb,0DY5TD<o2,cdT2+oOXtC],cZoO`rVUnQ*M<I^fUsO-i!O<ZB<=
%?:b;?=uduD`(Va[3DPQmYtmRL>AVJnF8BrKqk7B(HI7Eq7bYt$J6\4NJL8`"_CNdaeR[e`!>3EQo'-1Y,GL^YHs.^i4+NY1bG3[1
%No?]"=@]B'6o7;r/tPO63[Ca80h4V:D&sXd:4->-747"t9@/h2/B*_5O\S8FlB&P^?D9rP,%X.u=;GA/"-Vd+dPF.K7%Ea^4A<o8
%m!\d5H#ZdA7LC!V*LfS$]FXn=dL2as;me>^e=BTp50R6G`-&t6*]1?90>>#ZL8i/&hNEI8QOEOeNr-aj&1p^[^Dmu$)buj8.[n_Z
%]iHkV:.VJKLHr]/DY-TILT>:-#pG!ZAcKVYds?NBJoDC)=@fUp403>nbm58S6i%(1oIE<(ja.oQkl8>X/deK9^=qXb=G5"df!_>p
%mdQ)HF%UPi?#1PWLOtPs6]?jFjBgTK,h+7?<>&qV[A^9Fhf9&EW46f+ZQ-G2g.O75Lceik5:jD^0^L+lUjd4$JILD>YA!$r@n$0e
%TjS>sGRZh]\DsWU.>@o[QJK=j.FY8jAlF30($5aqBIUL\QJeopQBt2/i=ZqFR=5\3=2t%t2Utm+92Xksd7/bAkHICLH"KTYh22@@
%&K4*$\946p/V8Z1;`NUp3<HX)lV[dqdl(#ZpD/d/*^e[Rki#_DA!%-,-E/i5Q9gSO0WQRj8hWu"l3Z%gbPRhA2:<KSQ'M?TF3m9r
%D'Rg&_egRBpYX7^Ii+Cm.![%`4.m[tln53OO`EMF[O%!FOjg\,h]:$W._budPHg.4p:W@A#gVaal#2M*go,T6@!%29?+"8R.KZm4
%Nc(@s"*'uE^7'(cdnbkEQtK=<9LVO*p_(<7T/($Aj\Y1(^fthg;"d"d(-LO27sk[Q1GFSJL,nWsZ@4Xq4p%S_Q'B:<k.hK5!M_]+
%2GQ"FfsPc;V-A.0HFs/?m&jJT#E,Z4`HGcZfAr9Mom@'dj9m7^^?ObD`!`2>%W71?Aa[dY9WnS+4>1X<iu9#fk(@'SgbjI\4Y-TG
%FF@obL@=."lX4RO<UU^mJ\%n=m3H5o<c$9Da0S06eCZB4R6V0M*<BHefFZZ@kkWuYcsQg^e^JOJaH0-Blbh%^:oLqs/COi#@""#0
%CGG8CUq3%7+X,!UeD\n_0IuGW<R9RI"4=tfLF$hQ@Q`KEK[Nrj<m#V3-JA6^XrOOhR4%F#Z54o(nbRB%)KtM&ZptLEVgo^sGTa+"
%eDSb1ikO+%S;6<Y*_k8D_oWs\SDjS9hmC`,/oE^ak,_,+V,_\8fkK/ff8P>X11nYicQTeTG,)RFT%Q%tVTfpg#3q_]Me^V[#W)2H
%DG,EROY-7J]48g+W7k.)Ae=gpWel%h??YeNXHtuB?7&5(c<!#MJO^S$1@K7Q#9Er'A<q];!(,16_3#mELJ6Z1'Df>5^TEZYSV-?#
%Sp#`$7j;Q6BrRdOBTTNrGF`OT&EZ(.\H83I?a7r77=TY,q7HHgPPX/<@'k&pIej%L:O-2Whdpd)n^Yig*.!KEb`-M-0rf'RQ=$"8
%=JiC&cIu$e4&uc*<if49NHH$2cL3X9V]X>HH<,:l/jAf,RceMl\h;%h,Ht&%l<+s5=1Kq5qu2>IrD6gD0SZUq;RZMEnhh'AjXULs
%5S2"*nrn(F%$V5Wh)/\*W<)kgpGdgVYeb&s'O*`,+86V+ZF/(tdZ=ohqK]W!eeG0L:X$(9dAaMV8sEK%*q"'AR3[]4aZ=40]tiM1
%h)XYd+To@?kZ,#+%-:\W++HYg\$LI>Q2CA=KlV[Ni]c.*X&.>'U[@pgMh/>/AqR+*k]l+)gh7MFZ\X:A)Oj?"MEAGSAij(PiFj0I
%X926,DN+d!dhicfBc?)uAcZT5?b.QMpm('Hea\!T3r=db*"@5IO$f49ULpP9f&JIHR;_3-L730"_7DS-esZri<<?(S\,4d\IJL@r
%]RF"JJ%"P8s82!L!4%r+P[88iYrXh^7KEY&R-C1s1jakb,Z-'th4^i/HZ49K0<h6]RT(NqbEQJ`<UiC.8r$<76Y+EMb;M"dI/=MG
%goC<i%_dAjapWZN5U7!\DuW:$%fal[ElF=pRoOV%*'tHo;Zb1KVuCHAfCj+')j%G.CRTV,I.;Gnn\d`-6=a3DaOFH/&_Jfu'<4eL
%p<CbFl]^r8CB%]UnO'p`d1!$Z09trpJIN`koEtgtoF>P/I8rBf41Xd2HNuMCLfgh)^1:AP)VYZ\)o<XqePojE]l]:H1:8m3CA?5I
%h?,::^hQnW0HQ%!6Mu'V-D=7@SR7;#_j_QP-5U.tXMSOA("k(i=A=+FpF+#J4VeQnAYRm[s6=1IC.pG!238urg>qTN]-OWoTtoan
%A)5XuSVU>,+F5$JDm7:\].KU=^5H>/e?][^AQg&"]k(k7<7UJ\<DX2ZRcXmG#0N;*=Bc>u\)^t9._dGo6@5?TOTmq7()8pcf&IO1
%MIURsAJraai=d3L#C41"]PjS=Y7/H,*fnO;j2`2mZ/+0R54:]/G7Ql(lFWA^Y_JjqMYh4I&&k=T#dZL@O-$'k>LdTF>@/"G&+HG1
%QWp[3QL!S97T5QiirgcqS)>9U%3-1_QL=T1R<QNk;:\86<G-+$/dC)oQ:l-JY1Y=t)lL9CnS8^3a:`=4[;VB\;U.kl8hSZG`/S9G
%CT'9g?R,\Z5hpmDr2LU!E4d#7K$:d8TcjC+<N]bACpH::/*tLTPmFrD<#:Le0_`q*9l1kWLA>gI52;0P&&:&sUA\rL.WWi$#a*X!
%G86MMK$o6DB5t#%$#<.-VYG2W)V\?8+)i5/=VB2L1PRt2J0>+UCQ.E*(,CYu7l+?]b.H`qZHejP.\M&`8Cj4A3<MO5($SEMPpK7j
%_#ZkXg\c2CB;eagrG,"p<-G2H0bYYGeUteQ;'UU%k*"U3cJ()OpfV@ZpOk>_5!mR='VIo^]grX2B98PJ?1oZ/<`?+W\]Ns3(3/44
%j/;?DK4`EReXS(N:q0@4;iG-1K;KrpFefHb&guoe^BG;Ba`$9aSR^L_8VG\s((4P/Zi^s6ZHA%t1ApQ<bqYKq,mtYs5l.<$<>6\J
%IV_2330-->6jh(P4SoCfM`lKA8Bd;.hZ@.8M$hEfj9=L?_neBU(]nZ6bM8TjY5iAS:NRu@9/;7&RTk\N`3ONF"OI`.rbgG,ORKL+
%g:lpZW#Q_8lJ1X"@;)8YedA"*(4B'<>qH7$oJO&jamAO5n:3%t7ub4)#g&Xb@+8U$hUTC8n2u`jLX/mHHqAd_#=/%:_Qm;37jpqe
%kJa)_"G5E\Lgr7dieS>H.]s2'7>gPer`+[X1PH$J<0Ju]<3&&u7K>fCVj0X&j8Z/jHC+f!h\Qm$X.fEV`1;j530p37qHY\6Hb`QE
%LXkXHjlIi"8@EU@,U$0-I]cfpN7/$]Id@>DN>\)U;sJ`@ceD=p/+umlg9H>1>S8GH:Est7P5*sQ:@Ci=Nas(%W4er!=U7$Q[5DS6
%C;Rq5EJ*<QM<&Pe-+bIfU\ljag`&(%1Y6f'@2l/#B_B[-_5EL]&ueBs+GNJ0Xf8_j%sQ2HfqC"F"<c'bf#T3A'1meInrrGf1%90.
%(#sY'FY-.oH$Z`rdFJ1^gcX<.>SFb:FcCag)CNUFUcm%aFULk;*NJJ1N;DmZ-fFASr=s$B\#[kADR'<MF&5Y'Lh)tJ#YD(_Qq`B(
%Yf.qnd<&^%%i?7I"`/ZR@RVE<Y`HlJ907_*!4+eH1(Y[1Y]k']FQhg]rZDr>("eV0A:%m`U%niaD46msLK1uh!N"m0<W*t.o-i04
%gN(sM&oUL%(LrSdTOSnFq'fn[""gZ%.`GUVrR@3W$6"'33,C+mFB)Y7J$$P2:sZ<[o/j4R`rFZI]CgDhAQO?L!q[N(7DM.g>B0)o
%aA88A(aG\-*m92@qoPM;$)ul5[_Qd#^i/]:XgLsc5;-R'ZIl:1d1>U!'bUJ%I;\qnQL?\4n?)O/O4%+P&l=MO8@\L>1`8]UBUQHC
%lbYH^?n"&DEQ-^amar3(Pqo(?kT$LcU[:lKeRZGDcDIJ3b!_KJ(9s'UKRLhqR6=?P--EFi3_?k@c8+3&T&+pBi^pnUU'VVoMECB*
%B).$iUqTmdC$U<?WM2+f<c'E7\"8WPa%`K@@`e,"6FZA'gW\:U`2@p.$U]FEQiNg'OjE")!nE/;\qP1S'WWg`WpQ74/:NaSffOG<
%#hTj5;C!J@J!'Ac*1D'TmjZp`cjFB@1Be\\jk)p8S.nQ*i=n]cWtp6nO1#u7ANI[7>a#R"[A+#+^%efb3o@lej4<hU)W8C@;-/>o
%%V&PW@e25b?OfAZpS>JDMdXD%g$R&F&Q^EEWksDL(qGU;E:qr7>;Zma4*I_GIe,D&,t6Q7.O^Fhl70=q<Wf`d]Xdd`alKDs5$R[%
%+I0?/QZI_uQtDa=8"9q<J3FqHO#aGi4/goO.UPO`_*(jB7Y(s576=Uo'0&6KMB=:M>$X5,[c:=$oEo2l<NSs(%(tmflM[(LB!C`S
%jmP-XT3oY>bhGc_ls]g?DKKq9M=>`>-4K<b]gQ+&Y<1$`1/mOuqRa`f&&3H4DfbAm2h.0`^X$-($t93)kP,)[)3:GZ"_,mFcU2%p
%2EHRV^>(/*i4k,=h;M8O'*12R(332\MpD9^aR+,lH1:JJPm):/H`:sljfN_$[W6JPB4\%030AV^&]Va.BPeq8.lIMYCa+_9!dPps
%N/\oLV.l-W`C.+;@CKGaMD)2ImM,91hr_Z2Dk6!*1G0#KSGD*,`3;RPPQUg-BJe0N>J%a@9jmqfifW/;n978%^'-][R!2;];ZJi$
%*N*L_"WVW4+pVaS!hc@\h6S!so?]I(RV(KZ@#Gb^"s#kq-(B[iV[l(7[F"DW1f3nWCIORT^oA]u/baA<#gNVlG^e.L=#Ckp&+@jM
%e'Xr?K4#KXW$:e?o)RNSNBPXcOTAG?!+50]$ZGs:B'AiJ9'J"+g\gd<:ID@@_MsD-YRu/2PZnl_6B<8"6*1M,$gC!6^MHd6>,k8O
%p^JDrX>(O/+2ns^c]nCjB9`Ae`W#4MrLE[76\_?CoEta"hYkQH&.(te;,NfT`PhkX_`%RuZkRIQ,%X^-ooU7(L2(:u-0<L61%*uD
%FE=/p(_"hASiWn_nA<X5Ps4MiM2F[uds2i1UL&Uc0S#rB[SVTF;Si3//nV&C#T:C&DW1X.$VEKT"Zk3T"OJhFS<=qZ,f`UpKb_^N
%!jdujb,J(/8+#RmkM-,Zll/d$#6*;f;b.N;f/4/(4jVfnkF2<FA,4`F&>-5Me22)lamiCU%&'EZQOo!).8.qmL.%S]Q6[JL2#S"O
%63b0`>D^WoW#mumfVoY9Ot7KXb%fBTED<:)pg,nJ;[q^]^jN&k?_Z(B\_4,)3u5''3<H1O\TpFj0.BhlpHVm^+RkH=-AABIf8GFb
%1Qk@@c#7C3-2$>XiNH.L7^F1Triq%rlg_AM%e=Xp^'`V)GbbH[PAZ&JoG\rNbP!uK3_pT-6j2q#j*;ogqoUDM18QLbEoBHMd7RYB
%d2bSZTF?dab12=;XF53tBWN\q!@@D!Y%m-g:`\GN6#"HZ_l)uDL_tY.1m6%(UhU6ZD(C2TQ6=..&GFU.^fOH+nQ*Loqi?E.R=RU_
%lF4?MU;BtR,i[)*Ulm+YHOE94H3o^5+"PGB?fG`NI7oMI7Dir4q_Ae6S5EU$.hEne#fZmU,\=K5j6Br[lH;2+m*PjZQBt,PMWjVe
%9e[<+g!Nn3WUM@<KQ;3<:8:r9@!/.uH0%7I[h.q'T/4=m-9P#Bn-*!I;HV=l`P_#KHaFLRcPADU+?11MWQVuVZ8%i97JOk[h#W(g
%>aJEPdAB"oTBc7BE;\^GIjX!%VKUZ@jD`!jQ&%HX$<\X+`K:9uC)C]lc'd$j%C-cRI'aA<;,4T[M*/C7^DP*58b8'9!N9eL&QWb0
%Zu=2f&[7`Grl'9ap1[h'E%t<>EKJ49$^,A3XMa7un49jXJSf`4pN6=S>a!RENKWsAr.-b$Mh!>iWpu2(U7Dqp8)hN4:*">r"RO^g
%a$%*UmRQl%4WTeuM5Wj"n)F6ud5%e;*>d]*99642CAliD]QkV=+M'@N-7hSc]j+F?#CrQFWH"recQH\=Nml]2?6h*Ap7D$LVRNSS
%0j#o_WTl5=!uqG[nJ-gHe'DC]QY?OY9g=[\!(06kJrF4D_"56na.<;E:(:50c@q-Kh`YZFgpduEbc#e[.sCm#&j#ZFn6hl]Cs&Wm
%E["$gA_tkO\CPC9XCg3jM_lFj&L,f`$);X)Fk9eti)7:g8nQQ/+P.%n]SK&cR91!PD>#<\N[]mmj>HlnC9tY+I3pdHM?]Y5iorYl
%DUe5FH`qjJ@',_/l_P[M%O.]pGj:%q1:S/DC.$;FF"$gs/.#cuF?$I`"&iHf4g9j=&)F^;iS5blNjhm.",;PQVJR0Pa<2&h?(UG=
%9g\VlBC+(3K1)c.T'g@P!"_GZ&]8UKB_Hjgn)T&<1C+o[rB8ua$WmT&,N?&U]lC,mg29p^7"\jm&q^I$V:[WEgp0BR")#X:*t&'f
%q&a0NO&X:\Pi1Mb?(/Zm<js'Y\CA&NUd%+2+V7-cbLA0ZP:lg4/LRMr5'?/Ho:833)W7c)IDsVM$o-pne@407)M/=ddlWf\@i-<P
%p*H:l7IRlNVAb1We*6d0*C%9D^.Ab>^H.?hH2uM!3=@j',_bG2Uek^F>,%SiQh5Y;8uKK#$a#uKF/[S9bi)0V-&aJ"4&g3H^3rDA
%Y\]#kAtHcU:VU-URHM+<Xk.8"r6e.)dg5=;^WZuMRhqieA#EkUT2oE^G7P(TR_GP&nNG5sn#LcH7#D^JLf(9U5<===?,=A(U*\@:
%AP](ppN$:pI"aZDT"$"C@7s$Vqt8;+0@niaFGR\t"eVs]kICe'%Yl+QScX`2H,`TA?3c!hkB\SSrc*M8:W?L4deXGL)pA:b)-]Rp
%-uII6!jP7@*gu,b'\V:t*,n11dh\Hc#(j.hTG`Sd'>ZtA!&[N"c)pRgnm2G20LoM5pLAiiMm6\>SntoEEB82+-LOcAT^LMcIG';$
%#Y)B.6\;jubI=RB+$V\0j^@*aYW;-C.IcN@l9fj8:EDX/iB,3;SXH($nS1!LR6Es5@Mr!%L#gmL0cW!:2*>]WVn@+]!h<!ujYX3L
%`0QGE=D#1m67`^s?)5d8/k'HPb;bBtJ@jf4bNK%)jc5L5_1DoC$)p6`m0-uHqhBR!iOXL8L9h0-![o?-NSr?c_*s]A:*td['ERqb
%_Z-I\@"_@q^g%)uO-:C0\1KGW`,ZSA8OTVV;ZWdb67MtZUX*.%59#QB0hf:u)Aib71hsgO0l,&p!;^V8B0rI)T+7QhWaq.eX@-Vt
%DZV?;[H@p>Y1Gc)[l7Wc)ZEKo8rnbS5NrZ#KlMZ7n.;Au<<o%^L!=uNn3kWGl]e%icj_,1nSNURJX'&GiRd\[]aX[o.1-R#SDCS"
%#^c]%L!$#7,XU&2Qk#HQ2mJY`WX%kS0bb57pE0u+E6X9OGRY&^jIVo'rr9!E_$#\`WJ]jWrI?<smb@L\?JF)%%j2FL<]A0%Q&?g`
%9Hj$8Qk,a#q$bIPaMH1?,?5ME!=I@''+GtN%uDb9,HF/`W[T-f:4W[>`('A'LCplpAsDi,NL3NS;.`hc$r^"L7A/0hcl+$Jk_(bq
%=$+6kd^W3NV7T$:-:77>fDQV?o0oVq(?<>X([URC+]h<9W,Vi(ZG=8$MmT]6MV$%g%i2JLTiN4sS!@mI@&OI!7O_iED/sn^Qf2ER
%QE)d]FS2.gVV1!l#4tkq0"UGB5-.rQJV%;#KpVg9doe[?[9)f9qWp<h+#)bKo)Yj=Nt$+d+nO&>%;:dq9I18_/_]M%2/6EuP31cm
%Jr)r46\s9M]jFl*6M25#J\RlS2a=MBBCGV.=7U"KFAUDU1$?>'[O/De0'et/$S>gfgKE"'m@Y>fL^XTp=3u]g1E_5gJln5nfDn0\
%)ENa@/i@Y`;`@Prq2O9>N'#A?2"nRfC,cu(NmB)?Vs*k(WgK?.J5&<Dmm=@NcbOY4Fb6C/#":7&o=<if<eiDU]8=5n1*jXlB`M*:
%oHgA8CkJ.Mm@V&CQKa$f#c&EK=RIK'K;TU8mfg+JW-@]G9omV'J,gW9%t>o`Us'TPb3!T;?4k$h!`,EOPsgAg"GctqdCNqId?CPM
%*F7:-PZWal+9Y<4=Kt89J_^,nECmhtX,/2HEcnNQoM]HS%GWiAcs=;@F<*NkXfKao'IBqR#(TFe<+R"WS,`6&\%;HpR<#+aY<=7Z
%S7K[AG=K\54F=rMT)2SJOuqbuQu\Yk`oPGQ"sOB+41#lIX4"WdoW7)j(TO>3Ok--5cYEd839h!kaV0hWn"(;.nX9odQV!53p!dUZ
%^?.fjhKu'Dfh,1rF`jD"6prTOb%=`Bql4fV>>q26nlB;XP+R#8ku<a8f\665)aaZqd0SMpVXY87B7Z?r\*5(GYg_\fXKEKuON^Ml
%2kD?U7H%H(LY-/@Zm1eX,1<rd)Mo0QAF3tQ7Xh/6V`K8);7iJ8;fSi5]qs79"^?j4^(q<HUbLp>QO+!iZSTOS2[+-DJ;@4bXeji\
%9;I]P<_sLIFVOk$QXhS0N23=oD6ueQ/")+u,j!ag'9t_T4=M^#Y<p[)"KNNI%ch05ofsjHP%c@Al629ul4\EGkL.bkF2bTpn+Jpl
%O:gSN6B_",]:Rf@>?*i6l*'+m^?cQ$=sK,U:CU@nRSjq=T>ON>=Z>V\#9GpQ_g*U*aVTuG;,YlM0@`JY_$QNXckgm"&IW2(hA=JX
%H>KNgdEO6bO2@A=G$@!j0CN^d1m-8fA=7,DJ)QSUE+lt[)tu@t*1Yf5d30f)ETL)P9G(;6PJb\Pl+^=<N\3M7KSb%-5J!e2Qt6EW
%)K2"^b4^MSoim@^2K,fg'l$rU5s[BZ<cB^+KC`BUc^hEAfLSMd5/MBd+6,iKgp4RYF$[Y+H2cC"$WU&Vs/nWm2?O(V6l&)%,j%St
%C&>ABC3Q+A&QtdVgU=u(=f7/HLpZZ'<t+;>9pB%M&lGjh05]&[k1dcASC&nH)(h=/f\<\U`F7O@<D5TGpN!h]j$lSuj?'Q'ZKtgT
%s4tT*WQg7Uq4`<EQ7n]SH%?C!LL-N]$W[Q(I]!lTq7Lf;_oj&?==`%uQ3Q^?]_f41LJOQ"UIM>mcuc5N4YGSK>'\EX4]95;H-OfE
%.c\&6eFIP5K.kZXZmSg9^K]MerW68Xmt_tFIa),9d-Y:X'2S+gGnp'tZaQGTir3"aJ8aen">:to7aoiLa_Z8"$*tqVhFu0rY2XWp
%l(&LHa`r3gY^a5[8G$1Jkos)JQQWT*N\U9S>2?gc+>]X!rSf.;)_">of;[5A?L/?$7CsuJmkgo!`l4nHi3X7%["njeDEuh'bh2g0
%)gqu@l8;?ArU0b%QYg.`3Q(#Mf4#FT>i=)bm5Ip'!d"1,anupj?d"8a3s3o48dqA"CuaZ;gp(UYh<>93BZfhoIMPCH,1Im9)-2*A
%5NF1nKBG_1[=WD,:N[M8\<keG*;>>)!)XDg^%P!ShBap/;3!R%\@8H!92_.1oXH'A+qX-tXiP!eHRj$ZE"s9c48P>_G&ihh-o!k!
%dNsVs2e#.Jh:qM%_UjnN6Gc(4];NIAm5-@=Edp'C93&?O$o-Kl77e/+$4<gS;'r>q-seNMK;7?$9Q1H.Sk*^O7%l*o]i*IqX6*O#
%ZBjNpa5I"2RpVdCE=\1Dk]<`GdN-s3;8&u/7D;\krd6_+ds?<438MfbB+sjd>minVPq1h_9lqc'S8Sc/D]t9ad0D>gK,+-^8$L=!
%i%3;sYt:?3>KG(ili9Bq$gS%t]e)?p6S_3tXWo^`pre\g[bS,])'C%cqmP;!e.FUf3,3\*8(Ti?Ej<J;;an'j6[3n<,2pn-\GQUa
%?VQ<<6e!Lke5`>_%_*`h=UUEtV.N7'`Q[TW+WbaEMP`5I"HWYrY>3M^f8Q#giX:NTT-%eHaU!;HZ[h[7h&,qimnnfmm2h#U:Zb/6
%[/%bf*Pm542s+A^)/&im!GPnSKf:QoEuNLBXbm31VN+2iHM<F0qGfq5SZp[Yd5hu#j3X&Ab+:OZe45m/go=To;DI2kf%B!!F0CBY
%.EXPHEmpT&(+-^[r$5Rl<8+g^M0?8#S;+TMgfc?-j@1R<kD3k.Ys^#4"W`)P6<S/s@^?q=_$q2MXWA!.71]T/1_-dX3K2*]5H$DS
%ALh<u?LJF,]`'6ML>[#I'd-O#2Nc<*ICnGj`YQSA@4tktcRENt\E-^U,a'th"@sNt"@>(L(gf/oG_B6L20+A%ih8C?M2?k0M`&E9
%VNr-^)I=1X6^ObWK'skUW(1EK?nHHW<lh75en*Bro=X3)!@XPW-].pG0U78_8gfZDLFAS?/s:6kM:DN@E,H"o$#UhX89TcH);\T=
%&k42n,s<HmTW#FuVk=GQY$iBkgCtgX$q2^`1cI_=0]_G(T-9F2IZOQ_S!W!kX4>>76u\4'&9:_Q6l>hH9#Vpr6^!nm-9rA&_C!:E
%-uPKJ.LI9Y\Hi9o.>>H.Zr$jtYMnf'l5.t[Rbk8<d/c7,SR\P(=0/L'D$p;TRAV?fH-?IE0Lna@F)<)7C\Ho%CFd[jUn7ZtJ#F%k
%G3t-e"J!P#WG.dPn$FKRPRU^UA0#q`akW/9CtR8f*?WdDi#+J2J"l^WdbjQCMu*DQ8DSRZ*50$\;Z2L[[OH?TSmF[D*P_mF0q*:)
%SW,S>bMO#OW:T;^DL6e%/J7KDh?rF_\+PC6ps=IA[r=I@-kgS.J\l'?mdd2X/Bm)gn-LSrCQ?>=GM,B#=%V>4[n.3T?\$U:=ZoWo
%<X!Kg32X7jAK)?2XB`:sCkkYkZg67nV^i96i^:Zpc9b`F$eVqlLl7_.Xbm84hUXB(4i-U$$d+j5eDBu2*"U6/VR=S])(:3DN[V=\
%XKFs:)WCR/#q>m((F6$ZeeUZgpi0WCG94f-+0:TlM./_i,K,qgf8JWdM;dYbV[Ch':a!-<@GoZAp5"[8gT8%?8hLKR=1R>s;g)L'
%gI8@fE4q;aBGN^p6q/"VmJ3S.0?5F5;ss!;poj9P*N6Ip3[AAKpW'?p"Ba!D+#S&48b;;`$;0t6rf.mfrjE1VeU\"GG*PtZ06d1Z
%Mub9Dm"=s\$k;NiWHlVVPc5M-X(5E,pUVEoqVsi/\;mtVe[ZF?=kE6;rb]\L>MlLJk_dJfA/H#>;H;(:^pQOb*>r>%k59Zr&JaAa
%VdqBHVn:2T1VH(c)UZA_C(5e)fF(PH5rT);.Je'_'A\ndpK)q,Y,r8D->a\bHJqFr3*h\9IYiu9'-7akI`OM2TOYl>\3_MTBA7-o
%`PF9g(8lj81,(`&1X=,Ggt7\HgNFD(Z)W,]F#[6+XG8?oa=9=Lk[3p,qBR#6rPEE<'MPW"S-+tMD@q1CLpot*e.4Ogd%5FR<1+F;
%;&_`n$WO*equ;2(V<6PJF_ZBBA;CLAE,8,5Y$EGBVpZNd;'fBO3lFuc<7=^>%5I5R$QuB1(WaF^FqA[TDA(p>jDc:DG`6=$lA+0_
%B-7&&<pL/=dX5=+GPjW!FTmme(!c0dJM!]%[8D?Q9kceegH8jh6N-;,RCh?\qICKol_trc&P'gA><(s$AYuGk/a[<#(O6i<<=3jX
%00R+JMUqk%ZW[o?hF_Lam-Jt+Zg%Em?RXo8p#IVH)<oJB\8>6E-[quV+8#Y"KJ+F359k.>$`!CoB1GVa^+6W3)E1(VeN<oOKAp]h
%D(AEf)/Oln;caJDMfZq_GLjL?&:q_=/OWdo=uc4To0t.Trfu:\na[t&G;W!"Yj;Lfg[&peaDGQId6uU>6.MC@Mp'g:%Bd7fNA<q]
%$KLtZDMCV16bEt^`K%fS/-ZVV`[?b_O$!S&5oFrK^fN%em?Nr[]k^F/;?GkYH4*5aU.]Y@@J\AuB-/X-m#Ii%[5/<%E<Fh4nV8En
%fMrRP<CB)&;+\/c;//nSS@4'f4o*o^Vu-CM>s!Zlm^.:;kHN^Cer1aJA$(2&I=<Y]bV,^>pqd@1=f\*PFNqETf=fuiaGk)YONP4<
%-/,'3l7LDgG.1qlaeGsNI?P=+79QM@ig_!0=Hm!,(A/Fl8pG<P+Us7d'joUrHd>8H-$$Ll=1.G,&N<8N`&@8"PE)f%?-K:b2@ucU
%q"8>+cfa_-8*CS1OM+91`&X<hY&7baqO(F'/kJJJ!uhrS3p]uB>XC)L74!U^G0d&,(?3nSMaH6bb<AY7Sed352F=U=NMrRSM!enU
%KY=iO['ul,%ct3>fS*I;KlFg*p*:9QTlDGNduk\"RZI()%XOo6]2eUH0&XU9RDqK8hFo*Y>ONY\J-8g,[0\h9-]ose)MYVs))7WM
%KuQ!JQLC?_fGucJP1ZE'8f"C,j,Ff#`s)\QP%!`!!P+kPiZ^eCVcnD@cIX-m8<e-OL+A:53A0PcW(kZV[YX,uqJE%cjq03+9'%Hs
%(DmS=N79Et]<uq'UdZ1RifMh+:KHb`7n\41(Iu6@Ec?kuHQVVpeTdfpn?!?>k$+,#--7FGGH5jNdMDY:"X:U&ZD5L!;U?"01-KO+
%r(%4A[.RFnrt*5je.AtYAc47!M/4W8&]Yk+/8Il-I?4dcGO9hC]HJ>`ddSS?f/?kQ*P<#M,9XkGLhX&@WPplf8p(WrR;@JI,,P%2
%\H8I7i&&1<=m4Y)HIM2i3\q3-XIYAm'2`Wd,=>UFol'VEk"s-E8+9\tELmFC?4AP:a*"_$MqUY=3*LU;FX'Qc]TTa>a#4:2EY,/2
%pGN.]DO_!B%C65J=Y6Y7,f/IdZ3TFcW86S>W.&J+PZuh0@nb@W6RVYJQfU:lC(l@^0I's&<o`.djS,Zo"btAgOZ7J18b[#O1u]FA
%[1T</7h-ZH`@OF<3Y2a7$0+`fXO>aq7/"l`hspA;$g3VR@77D1No0RC`D&g+$E</Q1MDjCM]-YE7?B[!h;5rEUJ7&OXJ58miH/3X
%WhUr<cN$ZX/R#HU1\\EnW@OPk1N2'ETaVff`/9If%:_dlAOHGbjg?]\L@.X1\*"!$HQZjM/%S*j_P`S)h`\SmY5pA$!8'T-nbRuq
%6u%]$^#%E;>Mt0TW:';//W,gKlMAU!hA#-T0qsqBRGB$?)mqmJT<D,LE7DI+j=i6Aik0iD'N.='_tS@cMZE5=a,Y*T1Q+Go`N`rb
%jVujU0t"4IJG_pe7a([0=2AZoh3rF\]Fi$uP'S:!V%#)0.9kAGSSUR4ki/V)Z:c.rKUiHcc^dQ[gq/%,LdI:PZ3S(HCP+XrC>>j\
%@bba4H@>+$6&MFuP0b62`h4&RIp,NI<J1ZGU];m!7ID4A(-t!`D[f[Or:$hm(gaEY/ZM6c3b%CL)bL[2G]cK[N$=P"Y7o$iX1.YI
%1t'^I`9UVrchtK?1HZZ[.@s]YD'#K_dtY\3;<?'JS0T,"-ZW.)82WQHj(RkhN9rh^S?>%!`2BRi"Gn3T=diu,KIV=I8(Y(0i(mD4
%#2B<@j%-?%A%bi-XJi*N>m90O^.[P*h806K['<_HTo!;-8!4OOUoSR$mN4mHAq7C7\;.-:\5hFl*W'G&(38*]H%oiOIL*b<3a"lP
%eG%t&8o)-p&0GNFqXQW.kFP\/]gbVTp67#B,]lV#0U3?E</6X'16+\ck:XOu!B*1_@^^/1aXC;$9jP29p('!tl,5;h"E($Cei;f,
%%s6,B.A+D<jr?NdU\QZg_D('LYQkcJl"pOPSEZ6_j?^@97BVX.?=;:Q,:Z99VnMt%:<tNLg*?a>H2-&XWM<Tl/aCt6al%QN4^b!"
%[^R5!H\+*\9pJWJ?C3%!VUAtV0&&_cg0b(thQI-^EJ.XrNc(bFc[>Lm!7'.:h#MuWO]])!>-I8>Oa&\?:M.Vu3$h;c_bYC"or%q^
%ioI_I8gpk[[D$-rUWi&k@d^Kc?Ph:uU4TW:fofAuXZ@IW<Do?iZFJtf(#Ms#HcX#1d'0Jc]=J:$U*K"7Nl?M["aXuG?/*Po/[PO/
%>U4+n/V=r&C/fQ2(5l\%ECH:s4gn4taPhE_LQu2K;q;\D;SmGKW*H>_o-C7e>b#e.)XTR6H\A$F%T51Y<,*V<BYHWi#Un7hhU(5,
%_+N;>f&rW/I-UN,(C?=O`@RcW%cK/9X3p:;@Y1t2ODCeeb_`Njr6-`]R^:4/IMRfJCB02*R#&+$7BQf4,T/!2:?hiO*WS/G*CFTZ
%*/-g#_;C#7%+0Ud^>l>:W'5u;1GlZR%P]2if#d*u>07mCj132c;"4q^s6Jc$5>0t8D,H]GKs;r@Ck]#-.6LIu*2S+*8rqW-H2'?8
%Of=FM3:;jhY/ho=KL1\kA*-SDPH-AS"XoV4?-uD&jqKO*.IA9`MM,QkI2+i.(%aT$j%Sj_5qbpK;bF=-VX>]?^AO#3fTTdK`j6?S
%D0k;=:D;O=,BBDm6%(=lf5oT1h6W%qpYu;9@EPpSH=0Shq8.OUksa_5)RJC@DeI"ddd">2^IDqUk!bI7U$0iLPnd\+TPAFM\XdJ=
%7\nJp2]d6GKM&7ZCdbFb,H)5Fql2fNIumBa>Ghs@WY@.)jm6$M0-kB,Ef")_RiVhrAQ6#l6M3;f1.]AQB?79F,3Yj`"CKLfr])\G
%6'!57pd]X8pM-T>5Y$1^S0YZa:'!jVn\E&-Xa-6[o/,0ueSD/@>X9[teLi)kpao;p.)8ANRGu/4L"e"(%*CRe&A2ol[LC#rKTGN/
%!^sAocW0V&Q?7H8GItiJ)RZ?9(1)P=dDO_5oiDM4Eeth4Tus5;Cf;t6,!=S:9mJn/5o_aM.:6`sH.>a,FAM_Bi8r%-/=.b%W`QuR
%a)9q3F/j)9VkM'+c?EsqjQOORh)1T7q*k>s%B+8Pe(Bj"`##+V4j<8*9Ah`)``*\2W4iOS]\d_Bfl*[h&9*%-d*pbESY<?!7U7cr
%:u<f<<n]Hp)$$(\19f;0`(W]U"20QUG3gE+EC@L#TM.JiQR#9Rf,CQ5KqL>7fJF<\,54GA1U"_25P"KHj]Yh\.$0aL*PTSTk3JY<
%l-5!8H[koP_"X8/="cF+J?^_'"1o1MW48Js&I?^Y<:1gE_1Ip;rBcdkE`Y7$H7HY5p(SJ'8qE1JoU%;s.>[*@>MWMPGI_11>qO/U
%CIH%XLk05o%9[k2]@ZHcDB&Iea2Ys[He.BP&?8qiUoE=1mA<C<;]ejNDj7ZA^U?RI?O+"d0kqk@mQebHa8WC5':V:$o7$"Rc!(q7
%Lf?R(glBXS<@**cBoAafI/1ErXWD-Q@:sC5Bj^'J-(M6g,Q_N9G]:Y*Tghmp^qI+ma*YCCTlqZ+j82;A:G.Rm!(h5`VUL4p`OXg>
%Sc(p%O@8bqhM#S6PWf&n&$Cg\616J0RXS-c*8]LYDQtm>!UOfB):O`m_l+=ll@P?=YQ]$,+)R@pd^a\hrhpWbAlX\h8m3g^96FZ`
%^/.$S&FVkY#l%8fck`u?Lf<PO]:tP<ii7=e>'GfPJT^qSV?g2U\;J[J[9(U\.m@Y$D`1c9#3@K$ggC]*i`0iL0@`!'=+0\e=:!P+
%b,0ZPr0XEo#+DCT]4/S".nHltMV<nL4KgUA75lpVrPQBVoCc,nTFu>i6cJ&@"0Ia"CG0>#15TWZRC3*;)_pLu*kL![*eZp?"b(aB
%+XO.c@0R&5Q?4@](F41'41jaX7,L"C*qUS2T=[$+E<mEn:c'8cUb+Uar*BZs%>Z'D[BFn$nbo7rhfo+D?M0:=57'@i!!K.^VPmt"
%8*V$e@BkOG2qXI.%](+9a3Ua$"1!U^ThE3(nf[9!3!o;lmcYShL1KrtV.m7)!CUjAkMNLc9l+8oBEe$rO)')SQ5"<>B]f(Z9_`rj
%U@`l/a;-(9Ogd&.KDm167u?XT^W(_N\s6"PINsfTIk9AIb/)g1TZCdBIdJ96=r2&"c%lu5ch$j!fK]+AIb=tJc%nOhDasA"kRjYJ
%0AR*d)bJ/4##mk2-="5%;5#Q\VHsAW%D^at]uDlJUcD$kD?_s=%rqI`<JaVb*EM&ZSrW-J52p0Zf2E\P(2d-SBS:V,k;06Tp:*"\
%7>_<jA#7<RlG*B+rNjU;^?b?b=\50ZWi/UrF+sc4oZ_(+i6IAhZ2gP/0aRW<U[\HsM!G!27S(iA@HoeWIajL.1Q!o8IX:7l5(q1"
%)UA0RZUM:50Y]Gh^`nFM8"A9>Lk\"@l96@^FD#:-(P!VUF/;_e)T932VekZ)KUG5iBUnoK!U10tmM^/Q%`_!_LZ-'Z:?/Oo?ti5?
%P/oC[>2Mdb^Rr%"\9[-+KP?O_?f]"XVKelNc&WX<hKdM+8&GpXrXE5F:4DI6rDe8uZEnr0H-)#J1\,+im^@?C=Ke>7)i"]nMXu];
%L6F'uRTRPgD\jQTE<:mY1eZ/GMgdY<WR0_Gi8Ku1_T`t<+gCYY&9m86`@s,XnTT`8pmse=@?7?EoXn_PP\Z=f:nPsbO1/6*f[<6K
%b'q_u"M*uJbGm7hae#e4[D?D6N.T!"2UY(XdDDLqjPoRQ1jV=iSga5X3G[!QH?I?@E#Vk,c?VT.8#-=I:_=M1T<k&[bNbsY1mJV2
%PI&BQ@T#)h-1pV^i%/`H,a$C`TR7lmbF2\mZgYO+V+onfP'?:mj;77l%qG67HNVrgbq>PD./boB';<'[k0`L:nU7$be?`k2s#D%@
%)t0Rl^@J@TMeF=T+\L&r`dd07'i#CbXnW#i1$qcgi9<26qRK!lT:i8Gh%(5rZ%nT)9R:&%B1I^cN5T\Q!UKlR6b#[II02\s\YeMt
%oQ+mNSe\mc4RFt_&JBE:9VlSA;[mg``f[0=O=ra+*08P]Cn_U6<LKpFHaYru<4VJBL_@A:FQUh5(2lj6,Tm/Gl.pf7krV+OcD>[_
%k$L`]'8KKjAm`=V?+rJ-7++GLq(f3OUW=;?W,L=aJS=/tO1c9q9,#IPb6n>P']AU;20"+TA2<\D)1oCm'THotX1CE^T-sc$3T!:$
%m'eX\i!07IO-TPYImNHUT4Z;E_(Z;Ad&9Ce__G1%r.ZYQiXjn-jrX,<MO_1ZF/?ii.N!B%$"Fa*63TU/3*f(mi&"PL^>Y]aBcCD#
%S7f&!mqj12IuTu=fM\8>?"U]smo-O-MT'1HJ32S_q]ep%gs*ueVc'X89\d!cp(Ve9W1GC^<_j;R(q!Kqln-e?.XZLCeN"NJ!3EjF
%>$0H=:R;R@HAHR2/PoOsA7(mKAM76h>Cm9M5eQeGTSgGaBof9U7Z9X"*)<']qsan;!DTd68MAIjdGDiXRJ[\bJ/n0?es<%",TF8o
%8q=73V4XZ#r"+nO?ePqbe><(F;t"S]:;MC$L9"uGb_Ak2i0?f+)F/>Bbs5,_-F+g/P^M?o'<(cc;+1m@VarlPIOD=-O\Dj.pQa0*
%_%!H4MC!_E"]BkYBrZYj;"F.9L`WkJ=(Y]I8lXc8WJH*S0gmkP"HQk@I/:)iWfoN8^%"P:hQPgHL=Vlp"BP1pRuMKXFWNsKm3H`@
%7SZ3X#\Ek<F6q/(nc]G1qR81Y(j#kiou!V;P,QH]'hN]B^#t,p;`_P,n5\W[C6GA6PN<@'>o.(C=7R1?]B*J>8L+m%+361t+gpb@
%OhiH'bPQ`1#4_sHpFc:`_lS'I]aqeC/tiGG]Z#dI_RY;mf51eh0s&.@VH'sc?9o-1br<':a[rDPQPk2><m-PZibO3IdU<*?adTm*
%00+iTW6&>BE>T!.n43tBIS+VhffC>4-cf+bgJT0;;ds-*l9>.b_cuLmMg6#OY>]#s6^Ys!esYgEEJZ2B-4]BAC)5M15k.T(rX<#>
%7@c]iVDOH(=it%ZYc[fPcuD[r',eN>$c)QZ$?G$-=NQuqZS`'>J#0Wa<:a(=Y<P?2Wpj.ma7KS:?BNq_KMp1@+m@_`0:;1)Yr=k`
%b1,3_VIL#f/#de,+iOM1PmZ/tl^Ie2b8=d7I&m"mcP#tFDf/]ml5%<_VCRuB*/Q0HOUP_UlKqZ5@lfEM1f=h>JVFdb[5^#8)H:!5
%P4a4im!Ht:PGg&*D;p#U<R#"_^:k7_!beZ(L"C[D;/QKg6A6(bYs`g@Oq_pGNOn*aHPijtePFB<`usW"<PB(A['n@%Kq42aX0Qmo
%.]_'h=<t9dDe%rGef'>]1G/&F;a3mNa3<CcliF9%`jIsd@"=T:Y#;_T^K'[?]2KGt,;5\EKo%9WhI#*`Hmns7E'b3e_J&65I*g,:
%'u'Me.5ZbuNVNcOc?fp\FVL/RM.SdMlJEj`2esZ;mHHtXZ`DgrD,;MLej:T!U9gi?&ClAKko-F%,cSpr2G3Mk'brkB^)3UkA^AGp
%1hoqq?A`]Hc3Q7^$U[Hg2(aeKg[/>`@bDMt_@T7ckVcZkFpFPe\bo=Fj[fK7_F_t<!n*e*kOr">O-TJtermN3A6S@+%3@!tg-SBD
%@1,`J$Y%*N?-:&W)W(G/ik_$)]-"Nr$lcoXXWFbYW+_)lX@e-m1q=H/+972)F"4#&ToIN0Hpt7&)@BYo<BB!h-Ca@^Z/7):%V5Cb
%oL2o201`%a;F%UDY4ELh[%<$?d\<N2]hH10%J7S.>sYbZXE)WV;*]8_1(+Wnf_]2=7Cd7afr/(9!]!B8?HJ.3ZG7tHmoK=H`p!(C
%!O:>>JXbg7jB2J3:n8+`,i,>`39d=e`R@.riqL15D-!4i^:\PfhB*;@.0LbJT/&%?)rKl=C(^c&DPM@,6J&3+&512H7?HL?=C/bK
%H"*:u8;d)0/ZETprG(V.e-J!g/o39d_2luFbB"T)RFe`/U,/:Tglju(:i,Mt31qF]6kmSa"`M+CRh$(-F[+'gD*=;D-_?T8/=_9B
%a(m5+=ktS-nJJt=//WnQkC=ja2GUO?<EHkfEWcLX@Am1qi3)PPjKu,)/Ti:D&>cSP#(9KgBSWCQW!.'oC,4bO??PZTHU"#K:q7V[
%<Tt-CB]2g%a5r1]f&"n4%2)!;`Eba0hSP-5Z5B(jfYqIc9TaH[[UXi?F)Vj`B%YuG[>[Wr2NdqY],_V(1Z_/$bb<3`=QH595H1YU
%V@PVF`-k3i?l+]>dEm3Yhs1",:jgJpImGK_ZS&9,>rBpm+V*D*,hG>#m^n9J2k70FAM?S%rON/R:F*n*,"%U5@7pqL6mh;oIV%^j
%%VjgKE\&pSiPR;B!Pa!GA`!BCR52ujd9_iLFOKn!2VGp6?q"Br%587,D^`;8@RaE=%G5=fIO`A>>_1mVQoX`bWoA,[8n!'`<RZb0
%^:AD"@EHR0^KpP\o(8ZTZihm^j0_7W@loBdC2&H(>eNW)mI3fl'WO:q`*^`S&JRDF>C,+9fr(.b<lL#EYi\rsZJHg[:e5[/OR@)g
%E8aWU)C"j0rlBdYNJq9<l3p6)A0G-4%No_?HLZ3.1$8+fe8m7@f;^P"AAni:Hj#L9/r$j8<P0.EN3:T:>plErdGg\)V">j+<Y5m>
%:JY9O\Wc"1VpGej^eZW_bQhTsF<.M;9h9[u44.Ql*lBp$@Ib"@IPA`7ct\7+qLlfNm9b>QM3/-"94VH38#1q'3&Y2C@i)Y-Y-FI`
%7I&teaY);4F+;JN[j+H%^TS%#f`E$mE7IngQib1i?_XBBM(^;kL1lHbfdmHkOL_p]M9:;E;4Vj%4CJOENf-niQ:!!897_2(8ZP\P
%NU]e7f/[6__BjSP']-o-gj<p"3eOfdL!@=)@#B$c6_`"&.je`8l$M[]0Jb!#DFkYi3J0OO&Ws)fe.JC+WdEQNE&nBi8e;(pU4hMg
%qC4f&/9V8Ume%IohKC-S[h<^])WUP&+K(F%KSY'uMgF0iI\ZHh,L0sMb822\E(_p[O_3s3a)kUJU`*TDLN#Z6mZ*NATBJ*c,K`pn
%)MjjPp5q6hCEk-oUn+rSXZA-E,taX025b\/me$uPJk_qJf!H'9>%A6@=OSOam;8o'W+t.pid=U;cGV3a7!UtkIaM?qZJ""+66aM9
%c*k*pA>s+Mj6qAX6;9YGDNZ`>]'t%=gdt,o43"gjSN]ZqLoV+98J"!Z1hq@SOBihbkM":lY:\rie9D;><o^\\cFT:N0#=Mo$1e(t
%]Pguo(,;`>&!-\/ZeR^m`Qr>uopc^B1KC3G'4#2M)*k=L/JB0.XoK-,I]u\o+ZTt@G-?6r/N/1f\92;j?jund\fNVlIK]IT)ANWq
%:\[$4@[geX!4b(@Q([2Z%Llg$Q2ENV-&tP'>(hms8"cl+h^#!;/lJl&<DdFtb.SF5fhu)7W@ZC.hpp!&9b:3\H3c%`I.-bJ6+'t?
%GcJ$0E$[j02`+M%(hA\A<,!8`9/M&@ZONTd(:-XG%)Z@>UbVt-KME5:j14?ZZD!DZbOgAAX>S4GF^uJ]5?I>F!L"&QJ^4LnA5/77
%<)G@*8fY_@XnfQYhuRS:;Knj',=D]C6Jl!Vf4er)pF8ug+e`).3+>YdX\YTjfN+^fD?1JlD`&Cq7iIb:8cTE@1*[pYnVabucd5om
%d8-qT?2LES>^Y5PkH3%%%aAVq0I=DI220lSg]EI,"O3NYE0h9$;[eHdLTIc-7pMlW&_^;cAL7"+-rmkC>QK@5lRkJc.6K]-DFHr]
%i'[]1O@6%.'%'r=o)-e]WJOSn<T4%<h`,A`hcSkPA])Y[KESTlWb@MrXK8q@QF8'QiuTQQ,3*>%MoDjRE.lio6$0%K;ukb&iEHgY
%V`n#0'<Sule4'j_LZttl^bduoCGX#aQAYK4p]H<Zq%/CI?n\O!%F@l&/R,F[R6US5QtktY0"hrB6?l:>et&eIm24I`>Bf0O.AXdm
%g%$?<P0ARj<6g71_V@71'Ycs+^n=+3\]'7sOQ>\V1s\'Wa2:$t-+pZ3'lB8^'hh-N!$,uF?eX,6)%:SKf]=KlHD8nj+#dS7>J.tC
%!I"ONXCq<o8lT#Rd1B*<38d3@L8_MfM98kiTbe;=^U:Gp*i""L4.GEW5>?Mt==2",>U6;7$SQ(i7S_u5[T3)r7u@<gAJtclaDJL<
%%N$?Q$2rG=W#J&CBR\pg8@el=ejtRDbA#TI_)C(#P[@o"jkeQT28)`ea6)g1?.sV)e^n/HF!"?Ga_uS@<piNs;R%!D5"Nt8e\[*o
%eFXQmOLc*@gm`C6c,^=8Zkg/:RaI$->e"Y`4JddXj"Smf\Yj\Y6U7@A]I&*:#ES+o/`ILmbW^__1WL9u_tnr3&JC'Lc:IM@?EF@E
%VI/&^F<0f9S9i'f+].hoigdXjl14Ica,[Zp9YP^Cg^'GbaIO*+js[/VQdj;r0.()jdgl-,iTo(pSE7kK4;k`^?e+'sV&3Wl<4rfV
%:[LV$OjHNJ8k,orNeJ`ipJ1kY]=)cB]:l]H]c>O<fJLKM8LH+bZ>tj-?Xbp.XafZ>gNIC%T8HlX=tC!p,k>#c4YT>VWDb,Oj=t-h
%<,c`$6_IAXpgmLM8\4#(_!EMbTmK'eGiR%$=?!L\np\?fO8bn8<b`nT4^2I@R58hcZEE5c4cK.J$$cho=<3Os&\_-!U5.]P4Dl6P
%7=BJi.`8o'G)?7Gr5a#6&YDf/q=G4dVrV_;#cdbBIEV'D9aQP5Ko09cnQcG3oT"[d<3G).I&F^;[2T.Z)$5j4(&[7FBF#Rtql=h/
%STb*Qf:t@l["P$an]*2Lcfh[2)8DK.1oNSM&LJ[^Ca!Z?T)PaI3d%,cB<osKAE0Qg3`+?U7`_,E7,!Q9YOgjXSg&5R[I)Is)87g/
%i%4)>omE2R6Q(_u$s_VeU_/,]H)5q!ZfmpR9c(A''+$ahYZ$;UcH@'L!mqQi"&CD'gSdbd5"/_cqE3<b;NJLU:R&9O+mY9p3M^S%
%+(c-sKc$+%5T\a.p`%^3#R_ebP6`2C;&H'%Lk?s&P#g@>Y$%K6(S8)-r5G6^l-DIV5]B?&s(L+3@o);c^iU`!LBT=pJ?cg+d&5q'
%M\@XiG5!_bSJ>9c$s]72.6'<PKC%DCUC0/C#8tE,_hrQrBbfG0L4Q&D07Aq9^]!S$`f\jF,W2YIaR!D8k"9n1goIcjM91%dhPm4$
%CcGWg,I5ZUpS/f5nb`'l.qJ1Amqu_,1"</D#M>[G9M`Ef+8WS[$F%q'amaNSo\I"Fmf(,5^]42Gs/5>Rs7G^Qs8;;s^]432oCp#s
%e%\:#!/'%u[kD+ck.C*^o\C%mNN62-kHoa7df97$n,N2jrY/H5LO])KrqM7ms7WAZDNYT-Y5bCar7gt\49+9SrUd;V?R9SP?fXHN
%i=@TSaLa[ls1eTopOE)nY#>U=rS1WWiJ6m:qr+0]rS?rBm>hd=roA8qE?cm>5PN]hJ*PZNoj@^f_u"B0rVR3%2ZM!6h3:-0&,C;>
%Y\tKhCfPNH^GK*mYL!08XbYqL*rccKkAt`F53Je=+8gOW\bj!gr;KL<0)io[J,cG(J,AY`s0lorpVXJtmtL>Ipq!rLs7*`$j'TO^
%L]?\L5CEA-O8G1a4lj_Shq[jr^]".Un%S\X^O5qX]:XB<f>=SbeM]>R"N]qVTa(uHk$,h@."ck0aC#3K7'T[,FInj1!r-p)"[0pt
%J>t*X5m5-Z;7KESl3N'YZW+-a*X)5MV1I/MffN^Y&WZB(7+,(+\fZAGnJg9\^6$='^3_,an)5WuRQ"u+WiB.Qj3,L2nJRXsO5AoH
%DMA,:]uR%3qlTnO2gNsD*^;Tirr5^lhu>&'\]-aDCj%tkiI]T[N+TFc6LV20IK6XNY/B\m^K$fA#=W8As,GIiSHLgs#2nst>q9Xo
%*VA:+H+;-Q!Pl20mMc5XnT6"p>nX8.$0_23SN8PQ[u?.'$(<m9#3a>UV2lbrJrLho:#.+M#PH8&Ga01cdr`A>"[_i6JNfmToOq_Q
%[0V0$?!>/%PB>RP>XK6AJ!E[nV6;A0U(tgR+8#A"jf][dUXJcOmVbrhjh52[(^@F-^9eKc1-u7E=(>q#38[*UT@*)$N+h,I<:hB*
%RNLN6p!N&6:/Nf\f\o+[>nA!^<UIASHX`#)?CPOq:D)4RQOXY7;p;q(SO,6&.r5cIG\URmbT<Um\kqAR<!;H@/=I.N"%kF7EOf2,
%:kX_3O:_VciYJh.dHdc@3olJ5Luo>$HY[^Ed:l#.9#\H>hPg%Fc9ErHouUbY5^ruQ"eas,RfGa`?fA&5=+tg5!?FfGjK\q!-re/4
%[d<Wr/)cDp"fGN9oW]PqB&#8<Q3*KB,6#=:C$ki1?NIY.)jdZT4Lmo1g#NoNKEUD^3K1aMFpM:L;N9*3A;RLiqpUW!S"[T&A]<Q[
%"WFUp7/TjRA/3VXZpS`oIqqfqn!ssdH^0Zm?=*bLULnq<&[1,!X*59sKb8;epX)O=6?Fg[rq=XQhp[(ArV+sRbT.-T(RY2nqeuMW
%\fO^rbLiOfbNBTthD6U.HhV>7]_5)e%AP_/,Ej\JI"T7>Q1nL=UoC2URL^#X8?,kT^qr*(e;+],Ws2&WTYK_HFdQ's5seLMPB$g0
%H"-t?$H23\[^nO,noJNl..<o*a\F"9:EYPS>rjC-M@q?2,%6/Cq-:cp@%JT_bE=-*_PE,C$/'D.OZYa`.%;L60*X+\KJQ6IKr`PC
%#P>oeZ@K]RYg60I2j4nAQe8'3%L5RcnQ<noa5WkhHd@Ta6u&?!gnLeIrfJm$>=t<`KkuPM_otMDcYZ87/k!EtEuDT)e7-In/kPtM
%,Xt-lXhh#]&!'Vp6VoB0(UrHhd^sh1LWcie^E3(?)t1NK(*c7^cK?I\H&ei%5,+YV.J5dP=<Bi@+r6g1JnbXJ"W7WA&(uBRr6F12
%mgk@bCA+PpXJm-HmdYB;(c\IZ5+pDWKeNbRljIb(Mj==7T4t6c;]*%ZA623O.pWVh0<G:=X(,I\YTWj7'7m4lSAA3b\H7,Ddp0;0
%.fa?noMF5r3,SkGI?3-@C'kq;&j9p!4Ys<LM7\+=]jt[IFNk5-<AHP35R!Y5poCjgfS^3]!9H$j=O[7db!=VN=qh@&.De="8?lrc
%50k"YMB]2$G>b7o"n\9IF(0bn@Fp^T$d<=hWr(u*m:#E\7$1K>:DQs_()XrWiQ2l;4(YG=m.e\mT'>[r!.K%+B;K*[W'dAsT_p3F
%fBJ.VRS$Y"$j.Du>DoeEX5l&W1MH+[7+-"9P!onakgQ#/Y9hlL"%IJSVUD22fOYVEm8g6H<<(`h$s`s>o!]Zp_nc7d&lI$h_JJoh
%qGPc2:X]R%Jp=\B!53gFh*6FmP@je\eqXbF_'eYJcbA]CQBiYYD>5oCC>3R3$YKgo\X2U9$[piH=1,K,"+L!Wjd_JjpuW/l5+ia<
%Y4jlIV"[*WMEbmB=+%S)g,(k.\&fo,SY5pa.Q412Tc6f&ZmFNrZ2f%TT(CYmn"Y.tR)WU/B-06J%ohTLLa$=[eJ&k?65B-_*GNjQ
%iVjK1<Aj9%DOA\/S_"kG;md]q2u4N7-<?k:M%_J[FhfQ,g)5p\*^k^-f:);bVBt4uah.u2dOD*pb@(ZSQ$4T3b`PPhMCIkLNR&$-
%$%DIR3rK%8d8ueV?Y1Cq(L=pBk]4T_A-deR<TMWXP$hZ:0%ml2hRM'&-`1p!s!1KR)ks+-0HC@a[]/f.X[U71oX[UI]*g]^[]q!@
%e`20nXs8`;cOII#RQN9O((->df\SH,nF5_N3C@T;4,Lf<hGaS*qT+D>:c6!jQ20E%p.jr!#AJol/Y]\th0#Ko-TZZuf*AGMNVQhZ
%e(g)j%r4]^3j.e+QUOpSZ:&9DkCPq'g&<>+%WCA-SArb?jqgI.*$K#QhFZ-RDd5J;H_DHqlqIYF&k&m`'&hKjr&!$hR"Hs94VN.D
%S*@!lb67&:o"FIc#'J$m1k<FVdV-'-DmT#WHR9^^1/!MBKHB9<el--Cf'9:H*0@bbCmYq%AY4+0FIW5R9<0P^bt1Lo,^UlWp4>4g
%[(2FSP3`TdHQTU6@!S,<+t8W)RR@?+5]j`D,8.,g)I6mGjQ)FC@]Vk+Dn4uCVA4e@PlO\uGU27hZI2s;[K&^qJCigtRLCoici(19
%1cq.a^\A/&b)9dEJ-N*TZtd8E/?TIQHG/mcs-(BSYJdt"Mpnf*&g*"YmQ1q8hP*k6KkSsm:lk8JA:RuNDP7-7jeLqQ:3gcW(Y0@B
%#g^oY>8I;D6t=GciAkr4X`83d[,2bU7\[;5_A6:$!7Y\dHeUiIA@>n)AD+<86Mo5f[;Jhr)'e0fQlZuV:G"1uTbAXEMJ5h!YHI10
%fC&SqmL:dj7WC/nq-=6GL-tHf0pjMZ(Tt@jDf0S_UcIEkA[[uoCJB!Wf%DZ=KpPb/TGgt,d0>tJWEa1f2E\0-""9Kn+X=oLh;+2p
%m,aE,CX"qK:+&VRJATVq'U838;_I(Q_Y$#slXehK;PL;G;DA9+RNK]G;+Jeqd[^C)_b#\BMeJD%;(a@)^<;sH(s8fZUcmi(W7+j_
%RpjO4-H+$!JNfA[7.hd^FGVakc9%)2Mm$5*lQ@r`Ll;c%,r'b4+KV@@BR2N,67o2iE[8gj<"dH2DGJ)7=i]2=Yj+s@61*"<kA+l8
%N_509Hd0)[J_"XpLK(!qEI<D#U"R+;H1b9$8iHei_fYC']4!YU2"4Q^-tsq>q83rT?7dM'&=A3pppL(m*+[)9];Adaic.pLHcOiC
%Cf;cT<5$td\p(KP,N)].pg#JRFnlK!_\UY$rjlFTcca#FI_UK>`rh<C>(2sO2'LllX_<Zd*#FJ5:*LWCLX3>PTUDZfp.rTT8Qs:!
%UG%D[k</G&dkQ,1GeZ4&rq:Dm"_'LG!>dEoa0MrM8sq\K6Ad1jW#Up:P3(Ka!2.\WN%=lH'Yb>jg+XWP0)F+@(mRQ7e$#q7!`5*1
%/i=*![JM=Fd/hn_aRL>AXA+Sgd@Qi<OF^dnhhO=n<$L81]P4brY`jn.Cd_bRH1-6ZD3JTm%`%Y:g7e@SKMisd4#`mAX.F,2CYrn1
%5J?]_mqmf%;OA)aU+0-O&eUBe;J;^-R$8;gUCh`h+b\X0`NqjWo>!F7MlUZbSW8[=pJ]f>@!-X84iM(6MA@1\.p2-A09Z3]WLDsu
%@+JoWCXaJ+IuW.En=^dKq3r2XjR"<,K7209VK9S<gT7e#?X5>aS<3SI9AZE2mr@Nm77Z1+D+l*E4l5j@Gp[`$//REd_$IU*N"D&K
%&7UD3E+?Yj5"mcR[W<K+BhR9Mk)Bd:$IOas9(Eq4>ma0GgJG#'I4Aa%N!M]i@F2rW#K,F7'/@j=p51T8UM/e6QqqM6<o2i"4`f0%
%L8<,V"_6s`D3G/+eHDL%X8sl[Ghh0*EfT5tS&hA`GW]lIn&[bO^0JLhmIg&gmsJi,/VA"_R[2BGG_F2dQZ`hkn2']'Xa.ip:K&nt
%q_Y36QH2l2T%HK,X.7qK#u$a^,fOj?Ck+*S:mJUaGV$lp;HSt6!NHh`#ZLsa7-tR,RY"N\,*,=2X*WPgZD>s(a+Pdi-//r3eJ,bu
%Hli+i!3eFC"_Q6FC"(:DBPaskbs0%4LIj$4KG=&M$(LZ:44Q4$a!DGQ(C&s@O/`ujoP!=WBR!p<SA/7P>Bc0kNNk]lguYL3A/B\#
%Z]Ku&?00EXjWLrlWgiV(2l!J8#]1nQ^%gn8Ob\7KXGkb:_4Aa7`^aQYZQ>pJK:U%K6o%/"E&JX_"Vl)_jPK^OgF(TIc-A17lJ0ff
%C0-^e![gr3C]7X$A=7OX6Ro64H:+Y^6ILH32`[?PF[5_;;)h6),"AjlhDlN[:FVE<m2AQL@1X;o]SZ72b$(&G>M-iT%E`(aVHXDU
%h/dQJH=1--&>0+@*$lb[f@Z^X$.p[heU=V$bD]K\%(FYia1A"Z?.Cl[U4ApK#u3l1!d^]KR*+1K99(\C8G=AWGH-3pD>7@h`C))M
%;&/,+.(B%tIF6Q%=8+-%+LV,X@Q^&E+._TkjM%unZos5_Kj)?(Q*FrS+:U;S@0\?Xk71!'/ihsZe18PJ_#iSR1<Efli$3SMF;Joa
%j[Kf<R@J.JC1&o*!YiRKDF%U`kAP?;#(!+`La@9j;f[n?ln8WK\!6hTW@P5X&h!u.+I">/@ggT(i"[N;E6Ba'<nnFH<9V&_"Heb!
%*I_8t2oiXgUV?(u4Rn0tR!,V2F(b2J*W&JI$9S-uD`(=iU8@gVTaD@ges6n,!E/!g#4)15d0/gV7_sm)n,#bGl>oG*O$</_%*!8>
%!Z1/F)f=KOVLs:Z[XbQ-3h(SIidRH?h"SIW^YHp^Yjm;^FfM<rfc>17^pn):[h,L':U>=O`2lrDDp2,3b)P+Rb)JZEHU_B)Fj[^T
%A>+(-i0]khMRNbSCJtNV?'lG]C[k@6g/`4>HRbq/^+W3a4?"X'-:Hr^\%X_.md$l2I*;B#-t]HIG9pAC>$H!ug;L+]H<6GQ4ZoV+
%%>3u3?c[RHVfXAuBeIH5UiO]5M$XCZXlo8X`^>Ei8TeOr,I<0j)GGA5e[_h4!<>LU)"A`.bmgtj$5d6a5/AR"akXE[,#>FH'Y*ZM
%r/@P;l1='nrZ=TmeL1YO'!VugRCRagTp+KgTMFV-^Qf0$'m5aN0.XVA*?Kr-^?ng\j]Dp&;K^0i2q:&E:-l4Zk:MM6ei=Vgg.rfn
%2CO""?0HbUjD41h]lscT]`_Ee8\a\&o;2rX3YWEgVdK"-<%<IG^+4]Mbn*G3Q>mZJ-?]b&[@MnGHc:W%!p'aV7GM]hOX)P`<a6sb
%[6DR!-O45l+<WCfd^h?*l4pN)@8M/Z$2,tRDS>IaqB^'0"[ju/dV5c1SPOSg[Z('kbJl-d;@R^`-4LF7j:jJLZCq*YF,(IpSpR`)
%L!p#Ke54b9MKAuq657<nCPu*HrQW,-X,imqX?#9QP9n[0aLooXk9%sYe`)0>HpEQ;$6M!lOC?W?IaBZP"2,MuJY@L1*E9pg,_aQd
%h+0Q_DLipoL"d^qXMb@hIHMM+PZ"J1e9*PmK1m@"PM-DIC:8-\BM0K`]"6%Z^ll4XqQo/Vq5*fY5Q:=_rQRS)A,F%@e+^V(qs@2:
%rUA&jVr2LmlaQolh1,=\gY]dCmYARVX+1-/[m,=cp[._4;j?e-^RkIIpWl'OpW#MsiJ6mirqJ-rp`E&:l+5hlroQHDDu]-1s4.,S\mB^$~>
%AI9_PrivateDataEnd
